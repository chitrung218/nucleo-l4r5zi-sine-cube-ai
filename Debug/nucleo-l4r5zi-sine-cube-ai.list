
nucleo-l4r5zi-sine-cube-ai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001534  08008b18  08008b18  00018b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a04c  0800a04c  000207b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a04c  0800a04c  0001a04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a054  0800a054  000207b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a054  0800a054  0001a054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a058  0800a058  0001a058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007b4  20000000  0800a05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200007b4  0800a810  000207b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000096c  0800a810  0002096c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e03  00000000  00000000  000207e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b0  00000000  00000000  000345e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00036d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00037d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d458  00000000  00000000  00038bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001187e  00000000  00000000  00066028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116c9b  00000000  00000000  000778a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0018e541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005218  00000000  00000000  0018e610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200007b4 	.word	0x200007b4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008b00 	.word	0x08008b00

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200007b8 	.word	0x200007b8
 80001fc:	08008b00 	.word	0x08008b00

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b0ee      	sub	sp, #440	; 0x1b8
 8000ed4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char buf[50];
  int buf_len = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_30_30_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_30_30_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;
 8000edc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_SINE_30_30_IN_NUM] = AI_SINE_30_30_IN;
 8000ee4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ee8:	4a7a      	ldr	r2, [pc, #488]	; (80010d4 <main+0x204>)
 8000eea:	461c      	mov	r4, r3
 8000eec:	4615      	mov	r5, r2
 8000eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ef6:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_SINE_30_30_OUT_NUM] = AI_SINE_30_30_OUT;
 8000efa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000efe:	4a75      	ldr	r2, [pc, #468]	; (80010d4 <main+0x204>)
 8000f00:	461c      	mov	r4, r3
 8000f02:	4615      	mov	r5, r2
 8000f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f0c:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4a71      	ldr	r2, [pc, #452]	; (80010d8 <main+0x208>)
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2201      	movs	r2, #1
 8000f1a:	809a      	strh	r2, [r3, #4]
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2201      	movs	r2, #1
 8000f20:	80da      	strh	r2, [r3, #6]
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2201      	movs	r2, #1
 8000f26:	811a      	strh	r2, [r3, #8]
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	f640 72f4 	movw	r2, #4084	; 0xff4
 8000f2e:	60da      	str	r2, [r3, #12]
		  AI_SINE_30_30_DATA_WEIGHTS(ai_sine_30_30_data_weights_get()),
 8000f30:	f003 fe2e 	bl	8004b90 <ai_sine_30_30_data_weights_get>
 8000f34:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4a66      	ldr	r2, [pc, #408]	; (80010dc <main+0x20c>)
 8000f44:	619a      	str	r2, [r3, #24]
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2201      	movs	r2, #1
 8000f4a:	839a      	strh	r2, [r3, #28]
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2201      	movs	r2, #1
 8000f50:	83da      	strh	r2, [r3, #30]
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2201      	movs	r2, #1
 8000f56:	841a      	strh	r2, [r3, #32]
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	22f0      	movs	r2, #240	; 0xf0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
		  AI_SINE_30_30_DATA_ACTIVATIONS(activations)
  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 8000f6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f70:	2201      	movs	r2, #1
 8000f72:	809a      	strh	r2, [r3, #4]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000f74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f78:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000f7c:	611a      	str	r2, [r3, #16]
  ai_output[0].n_batches = 1;
 8000f7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f82:	2201      	movs	r2, #1
 8000f84:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000f86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000f8e:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 fc8d 	bl	80018ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f8b2 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f000 f9ba 	bl	8001310 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f9c:	f000 f96c 	bl	8001278 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8000fa0:	f000 f944 	bl	800122c <MX_TIM16_Init>
  MX_CRC_Init();
 8000fa4:	f000 f920 	bl	80011e8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  // Start timer/counter
  HAL_TIM_Base_Start(&htim16);
 8000fa8:	484d      	ldr	r0, [pc, #308]	; (80010e0 <main+0x210>)
 8000faa:	f002 fdaf 	bl	8003b0c <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000fae:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000fb2:	494c      	ldr	r1, [pc, #304]	; (80010e4 <main+0x214>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f005 fc49 	bl	800684c <siprintf>
 8000fba:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
  //HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);

  // Create instance of neural network
  ai_err = ai_sine_30_30_create(&sine_model, AI_SINE_30_30_DATA_CONFIG);
 8000fbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f003 fd7d 	bl	8004ac4 <ai_sine_30_30_create>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  if (ai_err.type != AI_ERROR_NONE)
 8000fd0:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d008      	beq.n	8000fea <main+0x11a>
  {
	  buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000fd8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000fdc:	4942      	ldr	r1, [pc, #264]	; (80010e8 <main+0x218>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f005 fc34 	bl	800684c <siprintf>
 8000fe4:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
	  //HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
	  while(1);
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x118>
  }

  // Initialize neural network
  if (!ai_sine_30_30_init(sine_model, &ai_params))
 8000fea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	1d3a      	adds	r2, r7, #4
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fd7b 	bl	8004af0 <ai_sine_30_30_init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f083 0301 	eor.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d008      	beq.n	8001018 <main+0x148>
  {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001006:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800100a:	4938      	ldr	r1, [pc, #224]	; (80010ec <main+0x21c>)
 800100c:	4618      	mov	r0, r3
 800100e:	f005 fc1d 	bl	800684c <siprintf>
 8001012:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
      //HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
      while(1);
 8001016:	e7fe      	b.n	8001016 <main+0x146>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Fill input buffer (use test value)
	  for (uint32_t i = 0; i < AI_SINE_30_30_IN_1_SIZE; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800101e:	e00d      	b.n	800103c <main+0x16c>
	  {
		  ((ai_float *)in_data)[i] = (ai_float)2.0f;
 8001020:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800102a:	4413      	add	r3, r2
 800102c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001030:	601a      	str	r2, [r3, #0]
	  for (uint32_t i = 0; i < AI_SINE_30_30_IN_1_SIZE; i++)
 8001032:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001036:	3301      	adds	r3, #1
 8001038:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800103c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0ed      	beq.n	8001020 <main+0x150>
	  }

	  // Get current timestamp
	  timestamp = htim16.Instance->CNT;
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <main+0x210>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

	  // Perform inference
	  nbatch = ai_sine_30_30_run(sine_model, &ai_input[0], &ai_output[0]);
 800104e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001058:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800105c:	4618      	mov	r0, r3
 800105e:	f003 fd86 	bl	8004b6e <ai_sine_30_30_run>
 8001062:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
	  if (nbatch != 1) {
 8001066:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800106a:	2b01      	cmp	r3, #1
 800106c:	d010      	beq.n	8001090 <main+0x1c0>
		buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800106e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001072:	491f      	ldr	r1, [pc, #124]	; (80010f0 <main+0x220>)
 8001074:	4618      	mov	r0, r3
 8001076:	f005 fbe9 	bl	800684c <siprintf>
 800107a:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
		HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 800107e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001082:	b29a      	uxth	r2, r3
 8001084:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8001088:	2364      	movs	r3, #100	; 0x64
 800108a:	481a      	ldr	r0, [pc, #104]	; (80010f4 <main+0x224>)
 800108c:	f002 fe90 	bl	8003db0 <HAL_UART_Transmit>
	  }

	  // Read output (predicted y) of neural network
	  y_val = ((float *)out_data)[0];
 8001090:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	  uint32_t inference_time = htim16.Instance->CNT - timestamp;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <main+0x210>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	  // Print output of neural network along with inference time (microseconds)
	  buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, inference_time);
 80010aa:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 80010ae:	f7ff fa63 	bl	8000578 <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 80010ba:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 80010be:	9100      	str	r1, [sp, #0]
 80010c0:	490d      	ldr	r1, [pc, #52]	; (80010f8 <main+0x228>)
 80010c2:	f005 fbc3 	bl	800684c <siprintf>
 80010c6:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8

	  //HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);

	  // Wait before doing it again
	  HAL_Delay(500);
 80010ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ce:	f000 fc63 	bl	8001998 <HAL_Delay>
  {
 80010d2:	e7a1      	b.n	8001018 <main+0x148>
 80010d4:	08008bc4 	.word	0x08008bc4
 80010d8:	40040440 	.word	0x40040440
 80010dc:	00040440 	.word	0x00040440
 80010e0:	2000090c 	.word	0x2000090c
 80010e4:	08008b18 	.word	0x08008b18
 80010e8:	08008b34 	.word	0x08008b34
 80010ec:	08008b5c 	.word	0x08008b5c
 80010f0:	08008b80 	.word	0x08008b80
 80010f4:	20000858 	.word	0x20000858
 80010f8:	08008ba4 	.word	0x08008ba4

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0bc      	sub	sp, #240	; 0xf0
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001106:	2244      	movs	r2, #68	; 0x44
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f004 fe72 	bl	8005df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2294      	movs	r2, #148	; 0x94
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f004 fe64 	bl	8005df4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800112c:	2000      	movs	r0, #0
 800112e:	f000 fff1 	bl	8002114 <HAL_PWREx_ControlVoltageScaling>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001138:	f000 f9c0 	bl	80014bc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113c:	2302      	movs	r3, #2
 800113e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001146:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114a:	2340      	movs	r3, #64	; 0x40
 800114c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001162:	231e      	movs	r3, #30
 8001164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f87c 	bl	800227c <HAL_RCC_OscConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800118a:	f000 f997 	bl	80014bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118e:	230f      	movs	r3, #15
 8001190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2303      	movs	r3, #3
 8001196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011b2:	2105      	movs	r1, #5
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fc87 	bl	8002ac8 <HAL_RCC_ClockConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011c0:	f000 f97c 	bl	80014bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011c4:	2304      	movs	r3, #4
 80011c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 ff2c 	bl	800302c <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80011da:	f000 f96f 	bl	80014bc <Error_Handler>
  }
}
 80011de:	bf00      	nop
 80011e0:	37f0      	adds	r7, #240	; 0xf0
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <MX_CRC_Init+0x3c>)
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <MX_CRC_Init+0x40>)
 80011f0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_CRC_Init+0x3c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_CRC_Init+0x3c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_CRC_Init+0x3c>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_CRC_Init+0x3c>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_CRC_Init+0x3c>)
 800120c:	2201      	movs	r2, #1
 800120e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_CRC_Init+0x3c>)
 8001212:	f000 fccb 	bl	8001bac <HAL_CRC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800121c:	f000 f94e 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200008e8 	.word	0x200008e8
 8001228:	40023000 	.word	0x40023000

0800122c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_TIM16_Init+0x44>)
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <MX_TIM16_Init+0x48>)
 8001234:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_TIM16_Init+0x44>)
 8001238:	224f      	movs	r2, #79	; 0x4f
 800123a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_TIM16_Init+0x44>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536-1;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_TIM16_Init+0x44>)
 8001244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001248:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_TIM16_Init+0x44>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <MX_TIM16_Init+0x44>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_TIM16_Init+0x44>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_TIM16_Init+0x44>)
 800125e:	f002 fbfd 	bl	8003a5c <HAL_TIM_Base_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001268:	f000 f928 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000090c 	.word	0x2000090c
 8001274:	40014400 	.word	0x40014400

08001278 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <MX_USART3_UART_Init+0x90>)
 800127e:	4a23      	ldr	r2, [pc, #140]	; (800130c <MX_USART3_UART_Init+0x94>)
 8001280:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_USART3_UART_Init+0x90>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_USART3_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_USART3_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_USART3_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_USART3_UART_Init+0x90>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c0:	4811      	ldr	r0, [pc, #68]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012c2:	f002 fd25 	bl	8003d10 <HAL_UART_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012cc:	f000 f8f6 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012d4:	f003 fa74 	bl	80047c0 <HAL_UARTEx_SetTxFifoThreshold>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012de:	f000 f8ed 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012e6:	f003 faa9 	bl	800483c <HAL_UARTEx_SetRxFifoThreshold>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012f0:	f000 f8e4 	bl	80014bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012f6:	f003 fa2a 	bl	800474e <HAL_UARTEx_DisableFifoMode>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001300:	f000 f8dc 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000858 	.word	0x20000858
 800130c:	40004800 	.word	0x40004800

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	; 0x30
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a5f      	ldr	r2, [pc, #380]	; (80014a8 <MX_GPIO_Init+0x198>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b5a      	ldr	r3, [pc, #360]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a59      	ldr	r2, [pc, #356]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b57      	ldr	r3, [pc, #348]	; (80014a8 <MX_GPIO_Init+0x198>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a53      	ldr	r2, [pc, #332]	; (80014a8 <MX_GPIO_Init+0x198>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	4b4e      	ldr	r3, [pc, #312]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a4d      	ldr	r2, [pc, #308]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b4b      	ldr	r3, [pc, #300]	; (80014a8 <MX_GPIO_Init+0x198>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001386:	4b48      	ldr	r3, [pc, #288]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a47      	ldr	r2, [pc, #284]	; (80014a8 <MX_GPIO_Init+0x198>)
 800138c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b45      	ldr	r3, [pc, #276]	; (80014a8 <MX_GPIO_Init+0x198>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800139e:	f000 ff5d 	bl	800225c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b41      	ldr	r3, [pc, #260]	; (80014a8 <MX_GPIO_Init+0x198>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <MX_GPIO_Init+0x198>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <MX_GPIO_Init+0x198>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80013c0:	483a      	ldr	r0, [pc, #232]	; (80014ac <MX_GPIO_Init+0x19c>)
 80013c2:	f000 fe6f 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2120      	movs	r1, #32
 80013ca:	4839      	ldr	r0, [pc, #228]	; (80014b0 <MX_GPIO_Init+0x1a0>)
 80013cc:	f000 fe6a 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d6:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <MX_GPIO_Init+0x1a4>)
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4834      	ldr	r0, [pc, #208]	; (80014b8 <MX_GPIO_Init+0x1a8>)
 80013e6:	f000 fccb 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80013ea:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	482a      	ldr	r0, [pc, #168]	; (80014ac <MX_GPIO_Init+0x19c>)
 8001404:	f000 fcbc 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001408:	2320      	movs	r3, #32
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	4824      	ldr	r0, [pc, #144]	; (80014b0 <MX_GPIO_Init+0x1a0>)
 8001420:	f000 fcae 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001424:	2340      	movs	r3, #64	; 0x40
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	481e      	ldr	r0, [pc, #120]	; (80014b0 <MX_GPIO_Init+0x1a0>)
 8001438:	f000 fca2 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_TX_Pin STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800143c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800144e:	2308      	movs	r3, #8
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4815      	ldr	r0, [pc, #84]	; (80014b0 <MX_GPIO_Init+0x1a0>)
 800145a:	f000 fc91 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800145e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001470:	230a      	movs	r3, #10
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147e:	f000 fc7f 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f000 fc71 	bl	8001d80 <HAL_GPIO_Init>

}
 800149e:	bf00      	nop
 80014a0:	3730      	adds	r7, #48	; 0x30
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000400 	.word	0x48000400
 80014b0:	48001800 	.word	0x48001800
 80014b4:	10110000 	.word	0x10110000
 80014b8:	48000800 	.word	0x48000800

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <Error_Handler+0x8>
	...

080014c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_MspInit+0x44>)
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_MspInit+0x44>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6613      	str	r3, [r2, #96]	; 0x60
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_MspInit+0x44>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_MspInit+0x44>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_MspInit+0x44>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6593      	str	r3, [r2, #88]	; 0x58
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_MspInit+0x44>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_CRC_MspInit+0x38>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d10b      	bne.n	800153a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_CRC_MspInit+0x3c>)
 8001524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_CRC_MspInit+0x3c>)
 8001528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800152c:	6493      	str	r3, [r2, #72]	; 0x48
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_CRC_MspInit+0x3c>)
 8001530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023000 	.word	0x40023000
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_TIM_Base_MspInit+0x38>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d10b      	bne.n	800157a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_TIM_Base_MspInit+0x3c>)
 8001564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_TIM_Base_MspInit+0x3c>)
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	6613      	str	r3, [r2, #96]	; 0x60
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_TIM_Base_MspInit+0x3c>)
 8001570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40014400 	.word	0x40014400
 800158c:	40021000 	.word	0x40021000

08001590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_UART_MspInit+0x7c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d128      	bne.n	8001604 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_UART_MspInit+0x80>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f4:	2307      	movs	r3, #7
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_UART_MspInit+0x84>)
 8001600:	f000 fbbe 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40004800 	.word	0x40004800
 8001610:	40021000 	.word	0x40021000
 8001614:	48000c00 	.word	0x48000c00

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	e7fe      	b.n	800161c <NMI_Handler+0x4>

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler+0x4>

0800162a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <UsageFault_Handler+0x4>

08001636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001664:	f000 f978 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
	return 1;
 8001670:	2301      	movs	r3, #1
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_kill>:

int _kill(int pid, int sig)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001686:	f004 fb75 	bl	8005d74 <__errno>
 800168a:	4603      	mov	r3, r0
 800168c:	2216      	movs	r2, #22
 800168e:	601a      	str	r2, [r3, #0]
	return -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_exit>:

void _exit (int status)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ffe7 	bl	800167c <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ae:	e7fe      	b.n	80016ae <_exit+0x12>

080016b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	e00a      	b.n	80016d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016c2:	f3af 8000 	nop.w
 80016c6:	4601      	mov	r1, r0
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	b2ca      	uxtb	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf0      	blt.n	80016c2 <_read+0x12>
	}

return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e009      	b.n	8001710 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf1      	blt.n	80016fc <_write+0x12>
	}
	return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_close>:

int _close(int file)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
	return -1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174a:	605a      	str	r2, [r3, #4]
	return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_isatty>:

int _isatty(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
	return 1;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
	return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <_sbrk+0x5c>)
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <_sbrk+0x60>)
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <_sbrk+0x64>)
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <_sbrk+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d207      	bcs.n	80017cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017bc:	f004 fada 	bl	8005d74 <__errno>
 80017c0:	4603      	mov	r3, r0
 80017c2:	220c      	movs	r2, #12
 80017c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	e009      	b.n	80017e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <_sbrk+0x64>)
 80017dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200a0000 	.word	0x200a0000
 80017ec:	00000800 	.word	0x00000800
 80017f0:	200007d0 	.word	0x200007d0
 80017f4:	20000970 	.word	0x20000970

080017f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <SystemInit+0x5c>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <SystemInit+0x5c>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <SystemInit+0x60>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <SystemInit+0x60>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <SystemInit+0x60>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <SystemInit+0x60>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <SystemInit+0x60>)
 8001824:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001828:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800182c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <SystemInit+0x60>)
 8001830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001834:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <SystemInit+0x60>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a07      	ldr	r2, [pc, #28]	; (8001858 <SystemInit+0x60>)
 800183c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <SystemInit+0x60>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	40021000 	.word	0x40021000

0800185c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001894 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001860:	f7ff ffca 	bl	80017f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001864:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001866:	e003      	b.n	8001870 <LoopCopyDataInit>

08001868 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800186a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800186c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800186e:	3104      	adds	r1, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001870:	480a      	ldr	r0, [pc, #40]	; (800189c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001874:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001876:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001878:	d3f6      	bcc.n	8001868 <CopyDataInit>
	ldr	r2, =_sbss
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800187c:	e002      	b.n	8001884 <LoopFillZerobss>

0800187e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800187e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001880:	f842 3b04 	str.w	r3, [r2], #4

08001884 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <LoopForever+0x16>)
	cmp	r2, r3
 8001886:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001888:	d3f9      	bcc.n	800187e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188a:	f004 fa79 	bl	8005d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800188e:	f7ff fb1f 	bl	8000ed0 <main>

08001892 <LoopForever>:

LoopForever:
    b LoopForever
 8001892:	e7fe      	b.n	8001892 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001894:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001898:	0800a05c 	.word	0x0800a05c
	ldr	r0, =_sdata
 800189c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018a0:	200007b4 	.word	0x200007b4
	ldr	r2, =_sbss
 80018a4:	200007b4 	.word	0x200007b4
	ldr	r3, = _ebss
 80018a8:	2000096c 	.word	0x2000096c

080018ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC1_IRQHandler>

080018ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f943 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f80e 	bl	80018e0 <HAL_InitTick>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	e001      	b.n	80018d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018d0:	f7ff fdfa 	bl	80014c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_InitTick+0x6c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d023      	beq.n	800193c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_InitTick+0x70>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_InitTick+0x6c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	fbb3 f3f1 	udiv	r3, r3, r1
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f941 	bl	8001b92 <HAL_SYSTICK_Config>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10f      	bne.n	8001936 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d809      	bhi.n	8001930 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f919 	bl	8001b5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001928:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_InitTick+0x74>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e007      	b.n	8001940 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e004      	b.n	8001940 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	e001      	b.n	8001940 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008
 800197c:	20000958 	.word	0x20000958

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000958 	.word	0x20000958

08001998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff ffee 	bl	8001980 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffde 	bl	8001980 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff8e 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff47 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff5c 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff8e 	bl	8001a98 <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffb0 	bl	8001b00 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e054      	b.n	8001c68 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7f5b      	ldrb	r3, [r3, #29]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fc9e 	bl	8001510 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	791b      	ldrb	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <HAL_CRC_Init+0xc4>)
 8001be8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0218 	bic.w	r2, r2, #24
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	e00c      	b.n	8001c16 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6899      	ldr	r1, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	461a      	mov	r2, r3
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f834 	bl	8001c74 <HAL_CRCEx_Polynomial_Set>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e028      	b.n	8001c68 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	795b      	ldrb	r3, [r3, #5]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d105      	bne.n	8001c2a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f04f 32ff 	mov.w	r2, #4294967295
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	e004      	b.n	8001c34 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6912      	ldr	r2, [r2, #16]
 8001c32:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	04c11db7 	.word	0x04c11db7

08001c74 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001c84:	231f      	movs	r3, #31
 8001c86:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001c88:	bf00      	nop
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1e5a      	subs	r2, r3, #1
 8001c8e:	613a      	str	r2, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d009      	beq.n	8001ca8 <HAL_CRCEx_Polynomial_Set+0x34>
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_CRCEx_Polynomial_Set+0x16>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b18      	cmp	r3, #24
 8001cac:	d846      	bhi.n	8001d3c <HAL_CRCEx_Polynomial_Set+0xc8>
 8001cae:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb4:	08001d43 	.word	0x08001d43
 8001cb8:	08001d3d 	.word	0x08001d3d
 8001cbc:	08001d3d 	.word	0x08001d3d
 8001cc0:	08001d3d 	.word	0x08001d3d
 8001cc4:	08001d3d 	.word	0x08001d3d
 8001cc8:	08001d3d 	.word	0x08001d3d
 8001ccc:	08001d3d 	.word	0x08001d3d
 8001cd0:	08001d3d 	.word	0x08001d3d
 8001cd4:	08001d31 	.word	0x08001d31
 8001cd8:	08001d3d 	.word	0x08001d3d
 8001cdc:	08001d3d 	.word	0x08001d3d
 8001ce0:	08001d3d 	.word	0x08001d3d
 8001ce4:	08001d3d 	.word	0x08001d3d
 8001ce8:	08001d3d 	.word	0x08001d3d
 8001cec:	08001d3d 	.word	0x08001d3d
 8001cf0:	08001d3d 	.word	0x08001d3d
 8001cf4:	08001d25 	.word	0x08001d25
 8001cf8:	08001d3d 	.word	0x08001d3d
 8001cfc:	08001d3d 	.word	0x08001d3d
 8001d00:	08001d3d 	.word	0x08001d3d
 8001d04:	08001d3d 	.word	0x08001d3d
 8001d08:	08001d3d 	.word	0x08001d3d
 8001d0c:	08001d3d 	.word	0x08001d3d
 8001d10:	08001d3d 	.word	0x08001d3d
 8001d14:	08001d19 	.word	0x08001d19
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d913      	bls.n	8001d46 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001d22:	e010      	b.n	8001d46 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b07      	cmp	r3, #7
 8001d28:	d90f      	bls.n	8001d4a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001d2e:	e00c      	b.n	8001d4a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	d90b      	bls.n	8001d4e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001d3a:	e008      	b.n	8001d4e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8001d40:	e006      	b.n	8001d50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d42:	bf00      	nop
 8001d44:	e004      	b.n	8001d50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d46:	bf00      	nop
 8001d48:	e002      	b.n	8001d50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d4a:	bf00      	nop
 8001d4c:	e000      	b.n	8001d50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001d4e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10d      	bne.n	8001d72 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 0118 	bic.w	r1, r3, #24
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e166      	b.n	800205e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8158 	beq.w	8002058 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d00b      	beq.n	8001dc8 <HAL_GPIO_Init+0x48>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d007      	beq.n	8001dc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dbc:	2b11      	cmp	r3, #17
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b12      	cmp	r3, #18
 8001dc6:	d130      	bne.n	8001e2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f003 0201 	and.w	r2, r3, #1
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0xea>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d123      	bne.n	8001eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	08da      	lsrs	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	6939      	ldr	r1, [r7, #16]
 8001eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0203 	and.w	r2, r3, #3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80b2 	beq.w	8002058 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef4:	4b61      	ldr	r3, [pc, #388]	; (800207c <HAL_GPIO_Init+0x2fc>)
 8001ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef8:	4a60      	ldr	r2, [pc, #384]	; (800207c <HAL_GPIO_Init+0x2fc>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6613      	str	r3, [r2, #96]	; 0x60
 8001f00:	4b5e      	ldr	r3, [pc, #376]	; (800207c <HAL_GPIO_Init+0x2fc>)
 8001f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f0c:	4a5c      	ldr	r2, [pc, #368]	; (8002080 <HAL_GPIO_Init+0x300>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f36:	d02b      	beq.n	8001f90 <HAL_GPIO_Init+0x210>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a52      	ldr	r2, [pc, #328]	; (8002084 <HAL_GPIO_Init+0x304>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d025      	beq.n	8001f8c <HAL_GPIO_Init+0x20c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a51      	ldr	r2, [pc, #324]	; (8002088 <HAL_GPIO_Init+0x308>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d01f      	beq.n	8001f88 <HAL_GPIO_Init+0x208>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a50      	ldr	r2, [pc, #320]	; (800208c <HAL_GPIO_Init+0x30c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d019      	beq.n	8001f84 <HAL_GPIO_Init+0x204>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a4f      	ldr	r2, [pc, #316]	; (8002090 <HAL_GPIO_Init+0x310>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <HAL_GPIO_Init+0x200>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a4e      	ldr	r2, [pc, #312]	; (8002094 <HAL_GPIO_Init+0x314>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00d      	beq.n	8001f7c <HAL_GPIO_Init+0x1fc>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a4d      	ldr	r2, [pc, #308]	; (8002098 <HAL_GPIO_Init+0x318>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <HAL_GPIO_Init+0x1f8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a4c      	ldr	r2, [pc, #304]	; (800209c <HAL_GPIO_Init+0x31c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_GPIO_Init+0x1f4>
 8001f70:	2307      	movs	r3, #7
 8001f72:	e00e      	b.n	8001f92 <HAL_GPIO_Init+0x212>
 8001f74:	2308      	movs	r3, #8
 8001f76:	e00c      	b.n	8001f92 <HAL_GPIO_Init+0x212>
 8001f78:	2306      	movs	r3, #6
 8001f7a:	e00a      	b.n	8001f92 <HAL_GPIO_Init+0x212>
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	e008      	b.n	8001f92 <HAL_GPIO_Init+0x212>
 8001f80:	2304      	movs	r3, #4
 8001f82:	e006      	b.n	8001f92 <HAL_GPIO_Init+0x212>
 8001f84:	2303      	movs	r3, #3
 8001f86:	e004      	b.n	8001f92 <HAL_GPIO_Init+0x212>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e002      	b.n	8001f92 <HAL_GPIO_Init+0x212>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_GPIO_Init+0x212>
 8001f90:	2300      	movs	r3, #0
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	f002 0203 	and.w	r2, r2, #3
 8001f98:	0092      	lsls	r2, r2, #2
 8001f9a:	4093      	lsls	r3, r2
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fa2:	4937      	ldr	r1, [pc, #220]	; (8002080 <HAL_GPIO_Init+0x300>)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <HAL_GPIO_Init+0x320>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fd4:	4a32      	ldr	r2, [pc, #200]	; (80020a0 <HAL_GPIO_Init+0x320>)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fda:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <HAL_GPIO_Init+0x320>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ffe:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <HAL_GPIO_Init+0x320>)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002004:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <HAL_GPIO_Init+0x320>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <HAL_GPIO_Init+0x320>)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_GPIO_Init+0x320>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002052:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <HAL_GPIO_Init+0x320>)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	f47f ae91 	bne.w	8001d90 <HAL_GPIO_Init+0x10>
  }
}
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40021000 	.word	0x40021000
 8002080:	40010000 	.word	0x40010000
 8002084:	48000400 	.word	0x48000400
 8002088:	48000800 	.word	0x48000800
 800208c:	48000c00 	.word	0x48000c00
 8002090:	48001000 	.word	0x48001000
 8002094:	48001400 	.word	0x48001400
 8002098:	48001800 	.word	0x48001800
 800209c:	48001c00 	.word	0x48001c00
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
 80020b0:	4613      	mov	r3, r2
 80020b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b4:	787b      	ldrb	r3, [r7, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_PWREx_GetVoltageRange+0x3c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e4:	d102      	bne.n	80020ec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80020e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ea:	e00b      	b.n	8002104 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_PWREx_GetVoltageRange+0x3c>)
 80020ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020fa:	d102      	bne.n	8002102 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80020fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002100:	e000      	b.n	8002104 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002102:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40007000 	.word	0x40007000

08002114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d141      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002122:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212e:	d131      	bne.n	8002194 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002130:	4b47      	ldr	r3, [pc, #284]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002136:	4a46      	ldr	r2, [pc, #280]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002140:	4b43      	ldr	r3, [pc, #268]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002148:	4a41      	ldr	r2, [pc, #260]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002150:	4b40      	ldr	r3, [pc, #256]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2232      	movs	r2, #50	; 0x32
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	4a3f      	ldr	r2, [pc, #252]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	0c9b      	lsrs	r3, r3, #18
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002166:	e002      	b.n	800216e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3b01      	subs	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216e:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217a:	d102      	bne.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f2      	bne.n	8002168 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002182:	4b33      	ldr	r3, [pc, #204]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218e:	d158      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e057      	b.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002194:	4b2e      	ldr	r3, [pc, #184]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800219a:	4a2d      	ldr	r2, [pc, #180]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021a4:	e04d      	b.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ac:	d141      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ae:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ba:	d131      	bne.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021bc:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021c2:	4a23      	ldr	r2, [pc, #140]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021cc:	4b20      	ldr	r3, [pc, #128]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021d4:	4a1e      	ldr	r2, [pc, #120]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2232      	movs	r2, #50	; 0x32
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	0c9b      	lsrs	r3, r3, #18
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f2:	e002      	b.n	80021fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002206:	d102      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f2      	bne.n	80021f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d112      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e011      	b.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002230:	e007      	b.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002240:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40007000 	.word	0x40007000
 8002254:	20000000 	.word	0x20000000
 8002258:	431bde83 	.word	0x431bde83

0800225c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226a:	6053      	str	r3, [r2, #4]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40007000 	.word	0x40007000

0800227c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d102      	bne.n	8002290 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f000 bc16 	b.w	8002abc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002290:	4ba0      	ldr	r3, [pc, #640]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800229a:	4b9e      	ldr	r3, [pc, #632]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80e4 	beq.w	800247a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_RCC_OscConfig+0x4c>
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	f040 808b 	bne.w	80023d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	f040 8087 	bne.w	80023d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c8:	4b92      	ldr	r3, [pc, #584]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_OscConfig+0x64>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e3ed      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1a      	ldr	r2, [r3, #32]
 80022e4:	4b8b      	ldr	r3, [pc, #556]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d004      	beq.n	80022fa <HAL_RCC_OscConfig+0x7e>
 80022f0:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f8:	e005      	b.n	8002306 <HAL_RCC_OscConfig+0x8a>
 80022fa:	4b86      	ldr	r3, [pc, #536]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80022fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002306:	4293      	cmp	r3, r2
 8002308:	d223      	bcs.n	8002352 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fdca 	bl	8002ea8 <RCC_SetFlashLatencyFromMSIRange>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e3ce      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231e:	4b7d      	ldr	r3, [pc, #500]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a7c      	ldr	r2, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4977      	ldr	r1, [pc, #476]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800233c:	4b75      	ldr	r3, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	4972      	ldr	r1, [pc, #456]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	e025      	b.n	800239e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002352:	4b70      	ldr	r3, [pc, #448]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a6f      	ldr	r2, [pc, #444]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	496a      	ldr	r1, [pc, #424]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002370:	4b68      	ldr	r3, [pc, #416]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	4965      	ldr	r1, [pc, #404]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fd8a 	bl	8002ea8 <RCC_SetFlashLatencyFromMSIRange>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e38e      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800239e:	f000 fcbf 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	495a      	ldr	r1, [pc, #360]	; (8002518 <HAL_RCC_OscConfig+0x29c>)
 80023b0:	5ccb      	ldrb	r3, [r1, r3]
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ba:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_RCC_OscConfig+0x2a0>)
 80023bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023be:	4b58      	ldr	r3, [pc, #352]	; (8002520 <HAL_RCC_OscConfig+0x2a4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fa8c 	bl	80018e0 <HAL_InitTick>
 80023c8:	4603      	mov	r3, r0
 80023ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d052      	beq.n	8002478 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	e372      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d032      	beq.n	8002444 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023de:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a4c      	ldr	r2, [pc, #304]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ea:	f7ff fac9 	bl	8001980 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023f2:	f7ff fac5 	bl	8001980 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e35b      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002410:	4b40      	ldr	r3, [pc, #256]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a3f      	ldr	r2, [pc, #252]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002416:	f043 0308 	orr.w	r3, r3, #8
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	493a      	ldr	r1, [pc, #232]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	4935      	ldr	r1, [pc, #212]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
 8002442:	e01a      	b.n	800247a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a32      	ldr	r2, [pc, #200]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002450:	f7ff fa96 	bl	8001980 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002458:	f7ff fa92 	bl	8001980 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e328      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800246a:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1dc>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d073      	beq.n	800256e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d005      	beq.n	8002498 <HAL_RCC_OscConfig+0x21c>
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d10e      	bne.n	80024b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d063      	beq.n	800256c <HAL_RCC_OscConfig+0x2f0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d15f      	bne.n	800256c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e305      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x24c>
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a15      	ldr	r2, [pc, #84]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0x288>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x270>
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a0f      	ldr	r2, [pc, #60]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0x288>
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a08      	ldr	r2, [pc, #32]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a05      	ldr	r2, [pc, #20]	; (8002514 <HAL_RCC_OscConfig+0x298>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01b      	beq.n	8002544 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7ff fa38 	bl	8001980 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002512:	e010      	b.n	8002536 <HAL_RCC_OscConfig+0x2ba>
 8002514:	40021000 	.word	0x40021000
 8002518:	08008be0 	.word	0x08008be0
 800251c:	20000000 	.word	0x20000000
 8002520:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff fa2c 	bl	8001980 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e2c2      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002536:	4baf      	ldr	r3, [pc, #700]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x2a8>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7ff fa1c 	bl	8001980 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7ff fa18 	bl	8001980 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e2ae      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255e:	4ba5      	ldr	r3, [pc, #660]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x2d0>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d060      	beq.n	800263c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b04      	cmp	r3, #4
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x310>
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d119      	bne.n	80025ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d116      	bne.n	80025ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258c:	4b99      	ldr	r3, [pc, #612]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_OscConfig+0x328>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e28b      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b93      	ldr	r3, [pc, #588]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	061b      	lsls	r3, r3, #24
 80025b2:	4990      	ldr	r1, [pc, #576]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b8:	e040      	b.n	800263c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d023      	beq.n	800260a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c2:	4b8c      	ldr	r3, [pc, #560]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a8b      	ldr	r2, [pc, #556]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80025c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7ff f9d7 	bl	8001980 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d6:	f7ff f9d3 	bl	8001980 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e269      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e8:	4b82      	ldr	r3, [pc, #520]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b7f      	ldr	r3, [pc, #508]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	497c      	ldr	r1, [pc, #496]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
 8002608:	e018      	b.n	800263c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260a:	4b7a      	ldr	r3, [pc, #488]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a79      	ldr	r2, [pc, #484]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7ff f9b3 	bl	8001980 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7ff f9af 	bl	8001980 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e245      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002630:	4b70      	ldr	r3, [pc, #448]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d03c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01c      	beq.n	800268a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002650:	4b68      	ldr	r3, [pc, #416]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002656:	4a67      	ldr	r2, [pc, #412]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7ff f98e 	bl	8001980 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002668:	f7ff f98a 	bl	8001980 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e220      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800267a:	4b5e      	ldr	r3, [pc, #376]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 800267c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ef      	beq.n	8002668 <HAL_RCC_OscConfig+0x3ec>
 8002688:	e01b      	b.n	80026c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268a:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 800268c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002690:	4a58      	ldr	r2, [pc, #352]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7ff f971 	bl	8001980 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a2:	f7ff f96d 	bl	8001980 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e203      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b4:	4b4f      	ldr	r3, [pc, #316]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ef      	bne.n	80026a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80a6 	beq.w	800281c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026d4:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	4a43      	ldr	r2, [pc, #268]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80026e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ea:	6593      	str	r3, [r2, #88]	; 0x58
 80026ec:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f8:	2301      	movs	r3, #1
 80026fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fc:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <HAL_RCC_OscConfig+0x57c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d118      	bne.n	800273a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002708:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <HAL_RCC_OscConfig+0x57c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a3a      	ldr	r2, [pc, #232]	; (80027f8 <HAL_RCC_OscConfig+0x57c>)
 800270e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002714:	f7ff f934 	bl	8001980 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271c:	f7ff f930 	bl	8001980 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e1c6      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272e:	4b32      	ldr	r3, [pc, #200]	; (80027f8 <HAL_RCC_OscConfig+0x57c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d108      	bne.n	8002754 <HAL_RCC_OscConfig+0x4d8>
 8002742:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002748:	4a2a      	ldr	r2, [pc, #168]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002752:	e024      	b.n	800279e <HAL_RCC_OscConfig+0x522>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d110      	bne.n	800277e <HAL_RCC_OscConfig+0x502>
 800275c:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800276c:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	4a20      	ldr	r2, [pc, #128]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800277c:	e00f      	b.n	800279e <HAL_RCC_OscConfig+0x522>
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002784:	4a1b      	ldr	r2, [pc, #108]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 8002796:	f023 0304 	bic.w	r3, r3, #4
 800279a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7ff f8eb 	bl	8001980 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7ff f8e7 	bl	8001980 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e17b      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_OscConfig+0x578>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0ed      	beq.n	80027ae <HAL_RCC_OscConfig+0x532>
 80027d2:	e01a      	b.n	800280a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7ff f8d4 	bl	8001980 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027da:	e00f      	b.n	80027fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7ff f8d0 	bl	8001980 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d906      	bls.n	80027fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e164      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027fc:	4ba8      	ldr	r3, [pc, #672]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e8      	bne.n	80027dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800280a:	7ffb      	ldrb	r3, [r7, #31]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002810:	4ba3      	ldr	r3, [pc, #652]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	4aa2      	ldr	r2, [pc, #648]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d03c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01c      	beq.n	800286a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002830:	4b9b      	ldr	r3, [pc, #620]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002832:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002836:	4a9a      	ldr	r2, [pc, #616]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7ff f89e 	bl	8001980 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002848:	f7ff f89a 	bl	8001980 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e130      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800285a:	4b91      	ldr	r3, [pc, #580]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 800285c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ef      	beq.n	8002848 <HAL_RCC_OscConfig+0x5cc>
 8002868:	e01b      	b.n	80028a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800286a:	4b8d      	ldr	r3, [pc, #564]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 800286c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002870:	4a8b      	ldr	r2, [pc, #556]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002872:	f023 0301 	bic.w	r3, r3, #1
 8002876:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7ff f881 	bl	8001980 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002882:	f7ff f87d 	bl	8001980 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e113      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002894:	4b82      	ldr	r3, [pc, #520]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ef      	bne.n	8002882 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8107 	beq.w	8002aba <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	f040 80cb 	bne.w	8002a4c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028b6:	4b7a      	ldr	r3, [pc, #488]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f003 0203 	and.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d12c      	bne.n	8002924 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	3b01      	subs	r3, #1
 80028d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d123      	bne.n	8002924 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d11b      	bne.n	8002924 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d113      	bne.n	8002924 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	3b01      	subs	r3, #1
 800290a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d109      	bne.n	8002924 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	3b01      	subs	r3, #1
 800291e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d06d      	beq.n	8002a00 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d068      	beq.n	80029fc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800292a:	4b5d      	ldr	r3, [pc, #372]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002936:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0ba      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002946:	4b56      	ldr	r3, [pc, #344]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a55      	ldr	r2, [pc, #340]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 800294c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002950:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002952:	f7ff f815 	bl	8001980 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295a:	f7ff f811 	bl	8001980 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0a7      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296c:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002978:	4b49      	ldr	r3, [pc, #292]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <HAL_RCC_OscConfig+0x828>)
 800297e:	4013      	ands	r3, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002988:	3a01      	subs	r2, #1
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	4311      	orrs	r1, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002992:	0212      	lsls	r2, r2, #8
 8002994:	4311      	orrs	r1, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800299a:	0852      	lsrs	r2, r2, #1
 800299c:	3a01      	subs	r2, #1
 800299e:	0552      	lsls	r2, r2, #21
 80029a0:	4311      	orrs	r1, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029a6:	0852      	lsrs	r2, r2, #1
 80029a8:	3a01      	subs	r2, #1
 80029aa:	0652      	lsls	r2, r2, #25
 80029ac:	4311      	orrs	r1, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029b2:	06d2      	lsls	r2, r2, #27
 80029b4:	430a      	orrs	r2, r1
 80029b6:	493a      	ldr	r1, [pc, #232]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029bc:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a37      	ldr	r2, [pc, #220]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 80029c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a34      	ldr	r2, [pc, #208]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029d4:	f7fe ffd4 	bl	8001980 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe ffd0 	bl	8001980 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e066      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ee:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029fa:	e05e      	b.n	8002aba <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e05d      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a00:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d156      	bne.n	8002aba <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a18:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a20      	ldr	r2, [pc, #128]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a24:	f7fe ffac 	bl	8001980 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7fe ffa8 	bl	8001980 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e03e      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x7b0>
 8002a4a:	e036      	b.n	8002aba <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d031      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a70:	f023 0303 	bic.w	r3, r3, #3
 8002a74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_OscConfig+0x824>)
 8002a7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7fe ff7b 	bl	8001980 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8c:	e00c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7fe ff77 	bl	8001980 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d905      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e00d      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_RCC_OscConfig+0x848>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ec      	bne.n	8002a8e <HAL_RCC_OscConfig+0x812>
 8002ab4:	e001      	b.n	8002aba <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e10f      	b.n	8002d00 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b89      	ldr	r3, [pc, #548]	; (8002d08 <HAL_RCC_ClockConfig+0x240>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d910      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <HAL_RCC_ClockConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 020f 	bic.w	r2, r3, #15
 8002af6:	4984      	ldr	r1, [pc, #528]	; (8002d08 <HAL_RCC_ClockConfig+0x240>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b82      	ldr	r3, [pc, #520]	; (8002d08 <HAL_RCC_ClockConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0f7      	b.n	8002d00 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8089 	beq.w	8002c30 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d133      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b26:	4b79      	ldr	r3, [pc, #484]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0e4      	b.n	8002d00 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002b36:	f000 fa11 	bl	8002f5c <RCC_GetSysClockFreqFromPLLSource>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4a74      	ldr	r2, [pc, #464]	; (8002d10 <HAL_RCC_ClockConfig+0x248>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d955      	bls.n	8002bee <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b42:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b4e:	4b6f      	ldr	r3, [pc, #444]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b56:	4a6d      	ldr	r2, [pc, #436]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e044      	b.n	8002bee <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d03e      	beq.n	8002bee <HAL_RCC_ClockConfig+0x126>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d13a      	bne.n	8002bee <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b78:	4b64      	ldr	r3, [pc, #400]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b80:	4a62      	ldr	r2, [pc, #392]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b86:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e02f      	b.n	8002bee <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b96:	4b5d      	ldr	r3, [pc, #372]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d115      	bne.n	8002bce <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0ac      	b.n	8002d00 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bae:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0a0      	b.n	8002d00 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bbe:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e098      	b.n	8002d00 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002bce:	f000 f8a7 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4a4e      	ldr	r2, [pc, #312]	; (8002d10 <HAL_RCC_ClockConfig+0x248>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d909      	bls.n	8002bee <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bda:	4b4c      	ldr	r3, [pc, #304]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002be2:	4a4a      	ldr	r2, [pc, #296]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4944      	ldr	r1, [pc, #272]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c00:	f7fe febe 	bl	8001980 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7fe feba 	bl	8001980 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e070      	b.n	8002d00 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4930      	ldr	r1, [pc, #192]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b80      	cmp	r3, #128	; 0x80
 8002c54:	d105      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c56:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c60:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c62:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <HAL_RCC_ClockConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d210      	bcs.n	8002c92 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_RCC_ClockConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 020f 	bic.w	r2, r3, #15
 8002c78:	4923      	ldr	r1, [pc, #140]	; (8002d08 <HAL_RCC_ClockConfig+0x240>)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_RCC_ClockConfig+0x240>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e036      	b.n	8002d00 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	4918      	ldr	r1, [pc, #96]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4910      	ldr	r1, [pc, #64]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cd0:	f000 f826 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	490c      	ldr	r1, [pc, #48]	; (8002d14 <HAL_RCC_ClockConfig+0x24c>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002cee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_RCC_ClockConfig+0x254>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe fdf3 	bl	80018e0 <HAL_InitTick>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	73fb      	strb	r3, [r7, #15]

  return status;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	04c4b400 	.word	0x04c4b400
 8002d14:	08008be0 	.word	0x08008be0
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000004 	.word	0x20000004

08002d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d38:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x34>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d121      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d11e      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d54:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d60:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e005      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d70:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d7c:	4a2b      	ldr	r2, [pc, #172]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d102      	bne.n	8002d9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e004      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002da6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d134      	bne.n	8002e18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d003      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0xac>
 8002dc4:	e005      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc8:	617b      	str	r3, [r7, #20]
      break;
 8002dca:	e005      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dce:	617b      	str	r3, [r7, #20]
      break;
 8002dd0:	e002      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	617b      	str	r3, [r7, #20]
      break;
 8002dd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	3301      	adds	r3, #1
 8002de4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	fb02 f203 	mul.w	r2, r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	0e5b      	lsrs	r3, r3, #25
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e18:	69bb      	ldr	r3, [r7, #24]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08008bf8 	.word	0x08008bf8
 8002e30:	00f42400 	.word	0x00f42400
 8002e34:	007a1200 	.word	0x007a1200

08002e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000000 	.word	0x20000000

08002e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e54:	f7ff fff0 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4904      	ldr	r1, [pc, #16]	; (8002e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	08008bf0 	.word	0x08008bf0

08002e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e80:	f7ff ffda 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0adb      	lsrs	r3, r3, #11
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08008bf0 	.word	0x08008bf0

08002ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ec0:	f7ff f908 	bl	80020d4 <HAL_PWREx_GetVoltageRange>
 8002ec4:	6178      	str	r0, [r7, #20]
 8002ec6:	e014      	b.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	4a21      	ldr	r2, [pc, #132]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ee0:	f7ff f8f8 	bl	80020d4 <HAL_PWREx_GetVoltageRange>
 8002ee4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef8:	d10b      	bne.n	8002f12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b80      	cmp	r3, #128	; 0x80
 8002efe:	d913      	bls.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2ba0      	cmp	r3, #160	; 0xa0
 8002f04:	d902      	bls.n	8002f0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f06:	2302      	movs	r3, #2
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	e00d      	b.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	e00a      	b.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b7f      	cmp	r3, #127	; 0x7f
 8002f16:	d902      	bls.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f18:	2302      	movs	r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	e004      	b.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b70      	cmp	r3, #112	; 0x70
 8002f22:	d101      	bne.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f24:	2301      	movs	r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 020f 	bic.w	r2, r3, #15
 8002f30:	4909      	ldr	r1, [pc, #36]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d001      	beq.n	8002f4a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40022000 	.word	0x40022000

08002f5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002f66:	4b2d      	ldr	r3, [pc, #180]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d118      	bne.n	8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f72:	4b2a      	ldr	r3, [pc, #168]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d107      	bne.n	8002f8e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f7e:	4b27      	ldr	r3, [pc, #156]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f84:	0a1b      	lsrs	r3, r3, #8
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e005      	b.n	8002f9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f8e:	4b23      	ldr	r3, [pc, #140]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f9a:	4a21      	ldr	r2, [pc, #132]	; (8003020 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d003      	beq.n	8002fbc <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d003      	beq.n	8002fc2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002fba:	e005      	b.n	8002fc8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002fbe:	613b      	str	r3, [r7, #16]
    break;
 8002fc0:	e005      	b.n	8002fce <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002fc4:	613b      	str	r3, [r7, #16]
    break;
 8002fc6:	e002      	b.n	8002fce <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	613b      	str	r3, [r7, #16]
    break;
 8002fcc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	3301      	adds	r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	fb02 f203 	mul.w	r2, r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	0e5b      	lsrs	r3, r3, #25
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	3301      	adds	r3, #1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800300e:	683b      	ldr	r3, [r7, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40021000 	.word	0x40021000
 8003020:	08008bf8 	.word	0x08008bf8
 8003024:	00f42400 	.word	0x00f42400
 8003028:	007a1200 	.word	0x007a1200

0800302c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003034:	2300      	movs	r3, #0
 8003036:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003038:	2300      	movs	r3, #0
 800303a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003044:	2b00      	cmp	r3, #0
 8003046:	d040      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d02a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d825      	bhi.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d026      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	d821      	bhi.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d006      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d81d      	bhi.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003068:	2b20      	cmp	r3, #32
 800306a:	d010      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800306c:	e018      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800306e:	4b89      	ldr	r3, [pc, #548]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	4a88      	ldr	r2, [pc, #544]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800307a:	e015      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fb02 	bl	800368c <RCCEx_PLLSAI1_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800308c:	e00c      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3320      	adds	r3, #32
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fbed 	bl	8003874 <RCCEx_PLLSAI2_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800309e:	e003      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	74fb      	strb	r3, [r7, #19]
      break;
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80030a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10b      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030ae:	4b79      	ldr	r3, [pc, #484]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030b4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030bc:	4975      	ldr	r1, [pc, #468]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80030c4:	e001      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c6:	7cfb      	ldrb	r3, [r7, #19]
 80030c8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d047      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030de:	d030      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80030e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e4:	d82a      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ea:	d02a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80030ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f0:	d824      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f6:	d008      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80030f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030fc:	d81e      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003106:	d010      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003108:	e018      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800310a:	4b62      	ldr	r3, [pc, #392]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	4a61      	ldr	r2, [pc, #388]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003116:	e015      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3304      	adds	r3, #4
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fab4 	bl	800368c <RCCEx_PLLSAI1_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003128:	e00c      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3320      	adds	r3, #32
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fb9f 	bl	8003874 <RCCEx_PLLSAI2_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800313a:	e003      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	74fb      	strb	r3, [r7, #19]
      break;
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003144:	7cfb      	ldrb	r3, [r7, #19]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800314a:	4b52      	ldr	r3, [pc, #328]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800314c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	494e      	ldr	r1, [pc, #312]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003160:	e001      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 809f 	beq.w	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003174:	2300      	movs	r3, #0
 8003176:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003178:	4b46      	ldr	r3, [pc, #280]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003188:	2300      	movs	r3, #0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	4b41      	ldr	r3, [pc, #260]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	4a40      	ldr	r2, [pc, #256]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	6593      	str	r3, [r2, #88]	; 0x58
 800319a:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031aa:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a3a      	ldr	r2, [pc, #232]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031b6:	f7fe fbe3 	bl	8001980 <HAL_GetTick>
 80031ba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031bc:	e009      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031be:	f7fe fbdf 	bl	8001980 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d902      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	74fb      	strb	r3, [r7, #19]
        break;
 80031d0:	e005      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031d2:	4b31      	ldr	r3, [pc, #196]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ef      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80031de:	7cfb      	ldrb	r3, [r7, #19]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d15b      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031e4:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01f      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d019      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800320e:	4b21      	ldr	r3, [pc, #132]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003214:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	4a1b      	ldr	r2, [pc, #108]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800322e:	4a19      	ldr	r2, [pc, #100]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d016      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fb9e 	bl	8001980 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003246:	e00b      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7fe fb9a 	bl	8001980 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d902      	bls.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	74fb      	strb	r3, [r7, #19]
            break;
 800325e:	e006      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0ec      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10c      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003274:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	4903      	ldr	r1, [pc, #12]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800328c:	e008      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	74bb      	strb	r3, [r7, #18]
 8003292:	e005      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032a0:	7c7b      	ldrb	r3, [r7, #17]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d105      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a6:	4ba0      	ldr	r3, [pc, #640]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	4a9f      	ldr	r2, [pc, #636]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032be:	4b9a      	ldr	r3, [pc, #616]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c4:	f023 0203 	bic.w	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	4996      	ldr	r1, [pc, #600]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032e0:	4b91      	ldr	r3, [pc, #580]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e6:	f023 020c 	bic.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	498e      	ldr	r1, [pc, #568]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003302:	4b89      	ldr	r3, [pc, #548]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003308:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	4985      	ldr	r1, [pc, #532]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003324:	4b80      	ldr	r3, [pc, #512]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003332:	497d      	ldr	r1, [pc, #500]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003346:	4b78      	ldr	r3, [pc, #480]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003354:	4974      	ldr	r1, [pc, #464]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003368:	4b6f      	ldr	r3, [pc, #444]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003376:	496c      	ldr	r1, [pc, #432]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800338a:	4b67      	ldr	r3, [pc, #412]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003398:	4963      	ldr	r1, [pc, #396]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033ac:	4b5e      	ldr	r3, [pc, #376]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ba:	495b      	ldr	r1, [pc, #364]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ce:	4b56      	ldr	r3, [pc, #344]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	4952      	ldr	r1, [pc, #328]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033f0:	4b4d      	ldr	r3, [pc, #308]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fe:	494a      	ldr	r1, [pc, #296]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003412:	4b45      	ldr	r3, [pc, #276]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003420:	4941      	ldr	r1, [pc, #260]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003434:	4b3c      	ldr	r3, [pc, #240]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800343a:	f023 0203 	bic.w	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	4939      	ldr	r1, [pc, #228]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d028      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003456:	4b34      	ldr	r3, [pc, #208]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003464:	4930      	ldr	r1, [pc, #192]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003474:	d106      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003476:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4a2b      	ldr	r2, [pc, #172]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003480:	60d3      	str	r3, [r2, #12]
 8003482:	e011      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	2101      	movs	r1, #1
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f8f9 	bl	800368c <RCCEx_PLLSAI1_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d04d      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034bc:	d108      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034c4:	4a18      	ldr	r2, [pc, #96]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034ce:	e012      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034d6:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ee:	490e      	ldr	r1, [pc, #56]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034fe:	d106      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4a08      	ldr	r2, [pc, #32]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800350a:	60d3      	str	r3, [r2, #12]
 800350c:	e020      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003516:	d109      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a02      	ldr	r2, [pc, #8]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003522:	60d3      	str	r3, [r2, #12]
 8003524:	e014      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003534:	d10c      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	2101      	movs	r1, #1
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f8a5 	bl	800368c <RCCEx_PLLSAI1_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003546:	7cfb      	ldrb	r3, [r7, #19]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d028      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800355c:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800356a:	4947      	ldr	r1, [pc, #284]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357a:	d106      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800357c:	4b42      	ldr	r3, [pc, #264]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4a41      	ldr	r2, [pc, #260]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003586:	60d3      	str	r3, [r2, #12]
 8003588:	e011      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003592:	d10c      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	2101      	movs	r1, #1
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f876 	bl	800368c <RCCEx_PLLSAI1_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01e      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ba:	4b33      	ldr	r3, [pc, #204]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ca:	492f      	ldr	r1, [pc, #188]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	2102      	movs	r1, #2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f851 	bl	800368c <RCCEx_PLLSAI1_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003604:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800360a:	f023 0204 	bic.w	r2, r3, #4
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003614:	491c      	ldr	r1, [pc, #112]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800362e:	f023 0218 	bic.w	r2, r3, #24
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	4913      	ldr	r1, [pc, #76]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d017      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800364c:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800365c:	490a      	ldr	r1, [pc, #40]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800366e:	d105      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4a04      	ldr	r2, [pc, #16]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800367c:	7cbb      	ldrb	r3, [r7, #18]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000

0800368c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800369a:	4b72      	ldr	r3, [pc, #456]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00e      	beq.n	80036c4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036a6:	4b6f      	ldr	r3, [pc, #444]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0203 	and.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d103      	bne.n	80036be <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d142      	bne.n	8003744 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	e03f      	b.n	8003744 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d018      	beq.n	80036fe <RCCEx_PLLSAI1_Config+0x72>
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d825      	bhi.n	800371c <RCCEx_PLLSAI1_Config+0x90>
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d002      	beq.n	80036da <RCCEx_PLLSAI1_Config+0x4e>
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d009      	beq.n	80036ec <RCCEx_PLLSAI1_Config+0x60>
 80036d8:	e020      	b.n	800371c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036da:	4b62      	ldr	r3, [pc, #392]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d11d      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ea:	e01a      	b.n	8003722 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036ec:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d116      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fc:	e013      	b.n	8003726 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036fe:	4b59      	ldr	r3, [pc, #356]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10f      	bne.n	800372a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800370a:	4b56      	ldr	r3, [pc, #344]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800371a:	e006      	b.n	800372a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      break;
 8003720:	e004      	b.n	800372c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003722:	bf00      	nop
 8003724:	e002      	b.n	800372c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003726:	bf00      	nop
 8003728:	e000      	b.n	800372c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800372a:	bf00      	nop
    }

    if(status == HAL_OK)
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d108      	bne.n	8003744 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003732:	4b4c      	ldr	r3, [pc, #304]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f023 0203 	bic.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4949      	ldr	r1, [pc, #292]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003740:	4313      	orrs	r3, r2
 8003742:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 8086 	bne.w	8003858 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800374c:	4b45      	ldr	r3, [pc, #276]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a44      	ldr	r2, [pc, #272]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003752:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003758:	f7fe f912 	bl	8001980 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800375e:	e009      	b.n	8003774 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003760:	f7fe f90e 	bl	8001980 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d902      	bls.n	8003774 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	73fb      	strb	r3, [r7, #15]
        break;
 8003772:	e005      	b.n	8003780 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003774:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ef      	bne.n	8003760 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d168      	bne.n	8003858 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d113      	bne.n	80037b4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800378c:	4b35      	ldr	r3, [pc, #212]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	4b35      	ldr	r3, [pc, #212]	; (8003868 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003792:	4013      	ands	r3, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6892      	ldr	r2, [r2, #8]
 8003798:	0211      	lsls	r1, r2, #8
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68d2      	ldr	r2, [r2, #12]
 800379e:	06d2      	lsls	r2, r2, #27
 80037a0:	4311      	orrs	r1, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6852      	ldr	r2, [r2, #4]
 80037a6:	3a01      	subs	r2, #1
 80037a8:	0112      	lsls	r2, r2, #4
 80037aa:	430a      	orrs	r2, r1
 80037ac:	492d      	ldr	r1, [pc, #180]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	610b      	str	r3, [r1, #16]
 80037b2:	e02d      	b.n	8003810 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d115      	bne.n	80037e6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ba:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	4b2b      	ldr	r3, [pc, #172]	; (800386c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6892      	ldr	r2, [r2, #8]
 80037c6:	0211      	lsls	r1, r2, #8
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6912      	ldr	r2, [r2, #16]
 80037cc:	0852      	lsrs	r2, r2, #1
 80037ce:	3a01      	subs	r2, #1
 80037d0:	0552      	lsls	r2, r2, #21
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6852      	ldr	r2, [r2, #4]
 80037d8:	3a01      	subs	r2, #1
 80037da:	0112      	lsls	r2, r2, #4
 80037dc:	430a      	orrs	r2, r1
 80037de:	4921      	ldr	r1, [pc, #132]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	610b      	str	r3, [r1, #16]
 80037e4:	e014      	b.n	8003810 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e6:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	0211      	lsls	r1, r2, #8
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6952      	ldr	r2, [r2, #20]
 80037f8:	0852      	lsrs	r2, r2, #1
 80037fa:	3a01      	subs	r2, #1
 80037fc:	0652      	lsls	r2, r2, #25
 80037fe:	4311      	orrs	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6852      	ldr	r2, [r2, #4]
 8003804:	3a01      	subs	r2, #1
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	430a      	orrs	r2, r1
 800380a:	4916      	ldr	r1, [pc, #88]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 800380c:	4313      	orrs	r3, r2
 800380e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a13      	ldr	r2, [pc, #76]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800381a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fe f8b0 	bl	8001980 <HAL_GetTick>
 8003820:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003822:	e009      	b.n	8003838 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003824:	f7fe f8ac 	bl	8001980 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d902      	bls.n	8003838 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	73fb      	strb	r3, [r7, #15]
          break;
 8003836:	e005      	b.n	8003844 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ef      	beq.n	8003824 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	4904      	ldr	r1, [pc, #16]	; (8003864 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003854:	4313      	orrs	r3, r2
 8003856:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	07ff800f 	.word	0x07ff800f
 800386c:	ff9f800f 	.word	0xff9f800f
 8003870:	f9ff800f 	.word	0xf9ff800f

08003874 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003882:	4b72      	ldr	r3, [pc, #456]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800388e:	4b6f      	ldr	r3, [pc, #444]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0203 	and.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d103      	bne.n	80038a6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
       ||
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d142      	bne.n	800392c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
 80038aa:	e03f      	b.n	800392c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d018      	beq.n	80038e6 <RCCEx_PLLSAI2_Config+0x72>
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d825      	bhi.n	8003904 <RCCEx_PLLSAI2_Config+0x90>
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d002      	beq.n	80038c2 <RCCEx_PLLSAI2_Config+0x4e>
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d009      	beq.n	80038d4 <RCCEx_PLLSAI2_Config+0x60>
 80038c0:	e020      	b.n	8003904 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038c2:	4b62      	ldr	r3, [pc, #392]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11d      	bne.n	800390a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d2:	e01a      	b.n	800390a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038d4:	4b5d      	ldr	r3, [pc, #372]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d116      	bne.n	800390e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e4:	e013      	b.n	800390e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038e6:	4b59      	ldr	r3, [pc, #356]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038f2:	4b56      	ldr	r3, [pc, #344]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003902:	e006      	b.n	8003912 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      break;
 8003908:	e004      	b.n	8003914 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800390a:	bf00      	nop
 800390c:	e002      	b.n	8003914 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003912:	bf00      	nop
    }

    if(status == HAL_OK)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800391a:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f023 0203 	bic.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4949      	ldr	r1, [pc, #292]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f040 8086 	bne.w	8003a40 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003934:	4b45      	ldr	r3, [pc, #276]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a44      	ldr	r2, [pc, #272]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003940:	f7fe f81e 	bl	8001980 <HAL_GetTick>
 8003944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003946:	e009      	b.n	800395c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003948:	f7fe f81a 	bl	8001980 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d902      	bls.n	800395c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	73fb      	strb	r3, [r7, #15]
        break;
 800395a:	e005      	b.n	8003968 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800395c:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ef      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d168      	bne.n	8003a40 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d113      	bne.n	800399c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003974:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	4b35      	ldr	r3, [pc, #212]	; (8003a50 <RCCEx_PLLSAI2_Config+0x1dc>)
 800397a:	4013      	ands	r3, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6892      	ldr	r2, [r2, #8]
 8003980:	0211      	lsls	r1, r2, #8
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68d2      	ldr	r2, [r2, #12]
 8003986:	06d2      	lsls	r2, r2, #27
 8003988:	4311      	orrs	r1, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6852      	ldr	r2, [r2, #4]
 800398e:	3a01      	subs	r2, #1
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	430a      	orrs	r2, r1
 8003994:	492d      	ldr	r1, [pc, #180]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	614b      	str	r3, [r1, #20]
 800399a:	e02d      	b.n	80039f8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d115      	bne.n	80039ce <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039a2:	4b2a      	ldr	r3, [pc, #168]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <RCCEx_PLLSAI2_Config+0x1e0>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6892      	ldr	r2, [r2, #8]
 80039ae:	0211      	lsls	r1, r2, #8
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6912      	ldr	r2, [r2, #16]
 80039b4:	0852      	lsrs	r2, r2, #1
 80039b6:	3a01      	subs	r2, #1
 80039b8:	0552      	lsls	r2, r2, #21
 80039ba:	4311      	orrs	r1, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6852      	ldr	r2, [r2, #4]
 80039c0:	3a01      	subs	r2, #1
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	430a      	orrs	r2, r1
 80039c6:	4921      	ldr	r1, [pc, #132]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	614b      	str	r3, [r1, #20]
 80039cc:	e014      	b.n	80039f8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039ce:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <RCCEx_PLLSAI2_Config+0x1e4>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6892      	ldr	r2, [r2, #8]
 80039da:	0211      	lsls	r1, r2, #8
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6952      	ldr	r2, [r2, #20]
 80039e0:	0852      	lsrs	r2, r2, #1
 80039e2:	3a01      	subs	r2, #1
 80039e4:	0652      	lsls	r2, r2, #25
 80039e6:	4311      	orrs	r1, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6852      	ldr	r2, [r2, #4]
 80039ec:	3a01      	subs	r2, #1
 80039ee:	0112      	lsls	r2, r2, #4
 80039f0:	430a      	orrs	r2, r1
 80039f2:	4916      	ldr	r1, [pc, #88]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fd ffbc 	bl	8001980 <HAL_GetTick>
 8003a08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a0a:	e009      	b.n	8003a20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a0c:	f7fd ffb8 	bl	8001980 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d902      	bls.n	8003a20 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a1e:	e005      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ef      	beq.n	8003a0c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	4904      	ldr	r1, [pc, #16]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	07ff800f 	.word	0x07ff800f
 8003a54:	ff9f800f 	.word	0xff9f800f
 8003a58:	f9ff800f 	.word	0xf9ff800f

08003a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e049      	b.n	8003b02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd fd64 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f000 f89e 	bl	8003bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d001      	beq.n	8003b24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e047      	b.n	8003bb4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a23      	ldr	r2, [pc, #140]	; (8003bc0 <HAL_TIM_Base_Start+0xb4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01d      	beq.n	8003b72 <HAL_TIM_Base_Start+0x66>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3e:	d018      	beq.n	8003b72 <HAL_TIM_Base_Start+0x66>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1f      	ldr	r2, [pc, #124]	; (8003bc4 <HAL_TIM_Base_Start+0xb8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_TIM_Base_Start+0x66>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <HAL_TIM_Base_Start+0xbc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_TIM_Base_Start+0x66>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <HAL_TIM_Base_Start+0xc0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <HAL_TIM_Base_Start+0x66>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1b      	ldr	r2, [pc, #108]	; (8003bd0 <HAL_TIM_Base_Start+0xc4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <HAL_TIM_Base_Start+0x66>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <HAL_TIM_Base_Start+0xc8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d115      	bne.n	8003b9e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <HAL_TIM_Base_Start+0xcc>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b06      	cmp	r3, #6
 8003b82:	d015      	beq.n	8003bb0 <HAL_TIM_Base_Start+0xa4>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8a:	d011      	beq.n	8003bb0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b9c:	e008      	b.n	8003bb0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e000      	b.n	8003bb2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800
 8003bcc:	40000c00 	.word	0x40000c00
 8003bd0:	40013400 	.word	0x40013400
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	00010007 	.word	0x00010007

08003bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a40      	ldr	r2, [pc, #256]	; (8003cf0 <TIM_Base_SetConfig+0x114>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfa:	d00f      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a3d      	ldr	r2, [pc, #244]	; (8003cf4 <TIM_Base_SetConfig+0x118>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a3c      	ldr	r2, [pc, #240]	; (8003cf8 <TIM_Base_SetConfig+0x11c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a3b      	ldr	r2, [pc, #236]	; (8003cfc <TIM_Base_SetConfig+0x120>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_Base_SetConfig+0x40>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a3a      	ldr	r2, [pc, #232]	; (8003d00 <TIM_Base_SetConfig+0x124>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d108      	bne.n	8003c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2f      	ldr	r2, [pc, #188]	; (8003cf0 <TIM_Base_SetConfig+0x114>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01f      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3c:	d01b      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a2c      	ldr	r2, [pc, #176]	; (8003cf4 <TIM_Base_SetConfig+0x118>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d017      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2b      	ldr	r2, [pc, #172]	; (8003cf8 <TIM_Base_SetConfig+0x11c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <TIM_Base_SetConfig+0x120>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00f      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a29      	ldr	r2, [pc, #164]	; (8003d00 <TIM_Base_SetConfig+0x124>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a28      	ldr	r2, [pc, #160]	; (8003d04 <TIM_Base_SetConfig+0x128>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a27      	ldr	r2, [pc, #156]	; (8003d08 <TIM_Base_SetConfig+0x12c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_Base_SetConfig+0x9a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a26      	ldr	r2, [pc, #152]	; (8003d0c <TIM_Base_SetConfig+0x130>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d108      	bne.n	8003c88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <TIM_Base_SetConfig+0x114>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00f      	beq.n	8003cd4 <TIM_Base_SetConfig+0xf8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a12      	ldr	r2, [pc, #72]	; (8003d00 <TIM_Base_SetConfig+0x124>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00b      	beq.n	8003cd4 <TIM_Base_SetConfig+0xf8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a11      	ldr	r2, [pc, #68]	; (8003d04 <TIM_Base_SetConfig+0x128>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d007      	beq.n	8003cd4 <TIM_Base_SetConfig+0xf8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <TIM_Base_SetConfig+0x12c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_Base_SetConfig+0xf8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <TIM_Base_SetConfig+0x130>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d103      	bne.n	8003cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	615a      	str	r2, [r3, #20]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40013400 	.word	0x40013400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	40014800 	.word	0x40014800

08003d10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e042      	b.n	8003da8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fd fc2b 	bl	8001590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2224      	movs	r2, #36	; 0x24
 8003d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f8c4 	bl	8003ee0 <UART_SetConfig>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e022      	b.n	8003da8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fb82 	bl	8004474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fc09 	bl	80045b8 <UART_CheckIdleState>
 8003da6:	4603      	mov	r3, r0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	f040 8084 	bne.w	8003ed4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Transmit+0x28>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e07c      	b.n	8003ed6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Transmit+0x3a>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e075      	b.n	8003ed6 <HAL_UART_Transmit+0x126>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2221      	movs	r2, #33	; 0x21
 8003dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e02:	f7fd fdbd 	bl	8001980 <HAL_GetTick>
 8003e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e20:	d108      	bne.n	8003e34 <HAL_UART_Transmit+0x84>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e003      	b.n	8003e3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003e44:	e02d      	b.n	8003ea2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 fbfc 	bl	800464e <UART_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e03a      	b.n	8003ed6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	881a      	ldrh	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e72:	b292      	uxth	r2, r2
 8003e74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	3302      	adds	r3, #2
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	e008      	b.n	8003e90 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	b292      	uxth	r2, r2
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1cb      	bne.n	8003e46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2140      	movs	r1, #64	; 0x40
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fbc8 	bl	800464e <UART_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e006      	b.n	8003ed6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e000      	b.n	8003ed6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	b5b0      	push	{r4, r5, r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4bb1      	ldr	r3, [pc, #708]	; (80041d0 <UART_SetConfig+0x2f0>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	69f9      	ldr	r1, [r7, #28]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4aa6      	ldr	r2, [pc, #664]	; (80041d4 <UART_SetConfig+0x2f4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	69f9      	ldr	r1, [r7, #28]
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	f023 010f 	bic.w	r1, r3, #15
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a97      	ldr	r2, [pc, #604]	; (80041d8 <UART_SetConfig+0x2f8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d120      	bne.n	8003fc2 <UART_SetConfig+0xe2>
 8003f80:	4b96      	ldr	r3, [pc, #600]	; (80041dc <UART_SetConfig+0x2fc>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d816      	bhi.n	8003fbc <UART_SetConfig+0xdc>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <UART_SetConfig+0xb4>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fa5 	.word	0x08003fa5
 8003f98:	08003fb1 	.word	0x08003fb1
 8003f9c:	08003fab 	.word	0x08003fab
 8003fa0:	08003fb7 	.word	0x08003fb7
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	76fb      	strb	r3, [r7, #27]
 8003fa8:	e0e7      	b.n	800417a <UART_SetConfig+0x29a>
 8003faa:	2302      	movs	r3, #2
 8003fac:	76fb      	strb	r3, [r7, #27]
 8003fae:	e0e4      	b.n	800417a <UART_SetConfig+0x29a>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	76fb      	strb	r3, [r7, #27]
 8003fb4:	e0e1      	b.n	800417a <UART_SetConfig+0x29a>
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	76fb      	strb	r3, [r7, #27]
 8003fba:	e0de      	b.n	800417a <UART_SetConfig+0x29a>
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	76fb      	strb	r3, [r7, #27]
 8003fc0:	e0db      	b.n	800417a <UART_SetConfig+0x29a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a86      	ldr	r2, [pc, #536]	; (80041e0 <UART_SetConfig+0x300>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d132      	bne.n	8004032 <UART_SetConfig+0x152>
 8003fcc:	4b83      	ldr	r3, [pc, #524]	; (80041dc <UART_SetConfig+0x2fc>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	d828      	bhi.n	800402c <UART_SetConfig+0x14c>
 8003fda:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <UART_SetConfig+0x100>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08004015 	.word	0x08004015
 8003fe4:	0800402d 	.word	0x0800402d
 8003fe8:	0800402d 	.word	0x0800402d
 8003fec:	0800402d 	.word	0x0800402d
 8003ff0:	08004021 	.word	0x08004021
 8003ff4:	0800402d 	.word	0x0800402d
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	0800402d 	.word	0x0800402d
 8004000:	0800401b 	.word	0x0800401b
 8004004:	0800402d 	.word	0x0800402d
 8004008:	0800402d 	.word	0x0800402d
 800400c:	0800402d 	.word	0x0800402d
 8004010:	08004027 	.word	0x08004027
 8004014:	2300      	movs	r3, #0
 8004016:	76fb      	strb	r3, [r7, #27]
 8004018:	e0af      	b.n	800417a <UART_SetConfig+0x29a>
 800401a:	2302      	movs	r3, #2
 800401c:	76fb      	strb	r3, [r7, #27]
 800401e:	e0ac      	b.n	800417a <UART_SetConfig+0x29a>
 8004020:	2304      	movs	r3, #4
 8004022:	76fb      	strb	r3, [r7, #27]
 8004024:	e0a9      	b.n	800417a <UART_SetConfig+0x29a>
 8004026:	2308      	movs	r3, #8
 8004028:	76fb      	strb	r3, [r7, #27]
 800402a:	e0a6      	b.n	800417a <UART_SetConfig+0x29a>
 800402c:	2310      	movs	r3, #16
 800402e:	76fb      	strb	r3, [r7, #27]
 8004030:	e0a3      	b.n	800417a <UART_SetConfig+0x29a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a6b      	ldr	r2, [pc, #428]	; (80041e4 <UART_SetConfig+0x304>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d120      	bne.n	800407e <UART_SetConfig+0x19e>
 800403c:	4b67      	ldr	r3, [pc, #412]	; (80041dc <UART_SetConfig+0x2fc>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004046:	2b30      	cmp	r3, #48	; 0x30
 8004048:	d013      	beq.n	8004072 <UART_SetConfig+0x192>
 800404a:	2b30      	cmp	r3, #48	; 0x30
 800404c:	d814      	bhi.n	8004078 <UART_SetConfig+0x198>
 800404e:	2b20      	cmp	r3, #32
 8004050:	d009      	beq.n	8004066 <UART_SetConfig+0x186>
 8004052:	2b20      	cmp	r3, #32
 8004054:	d810      	bhi.n	8004078 <UART_SetConfig+0x198>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <UART_SetConfig+0x180>
 800405a:	2b10      	cmp	r3, #16
 800405c:	d006      	beq.n	800406c <UART_SetConfig+0x18c>
 800405e:	e00b      	b.n	8004078 <UART_SetConfig+0x198>
 8004060:	2300      	movs	r3, #0
 8004062:	76fb      	strb	r3, [r7, #27]
 8004064:	e089      	b.n	800417a <UART_SetConfig+0x29a>
 8004066:	2302      	movs	r3, #2
 8004068:	76fb      	strb	r3, [r7, #27]
 800406a:	e086      	b.n	800417a <UART_SetConfig+0x29a>
 800406c:	2304      	movs	r3, #4
 800406e:	76fb      	strb	r3, [r7, #27]
 8004070:	e083      	b.n	800417a <UART_SetConfig+0x29a>
 8004072:	2308      	movs	r3, #8
 8004074:	76fb      	strb	r3, [r7, #27]
 8004076:	e080      	b.n	800417a <UART_SetConfig+0x29a>
 8004078:	2310      	movs	r3, #16
 800407a:	76fb      	strb	r3, [r7, #27]
 800407c:	e07d      	b.n	800417a <UART_SetConfig+0x29a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a59      	ldr	r2, [pc, #356]	; (80041e8 <UART_SetConfig+0x308>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d120      	bne.n	80040ca <UART_SetConfig+0x1ea>
 8004088:	4b54      	ldr	r3, [pc, #336]	; (80041dc <UART_SetConfig+0x2fc>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004092:	2bc0      	cmp	r3, #192	; 0xc0
 8004094:	d013      	beq.n	80040be <UART_SetConfig+0x1de>
 8004096:	2bc0      	cmp	r3, #192	; 0xc0
 8004098:	d814      	bhi.n	80040c4 <UART_SetConfig+0x1e4>
 800409a:	2b80      	cmp	r3, #128	; 0x80
 800409c:	d009      	beq.n	80040b2 <UART_SetConfig+0x1d2>
 800409e:	2b80      	cmp	r3, #128	; 0x80
 80040a0:	d810      	bhi.n	80040c4 <UART_SetConfig+0x1e4>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <UART_SetConfig+0x1cc>
 80040a6:	2b40      	cmp	r3, #64	; 0x40
 80040a8:	d006      	beq.n	80040b8 <UART_SetConfig+0x1d8>
 80040aa:	e00b      	b.n	80040c4 <UART_SetConfig+0x1e4>
 80040ac:	2300      	movs	r3, #0
 80040ae:	76fb      	strb	r3, [r7, #27]
 80040b0:	e063      	b.n	800417a <UART_SetConfig+0x29a>
 80040b2:	2302      	movs	r3, #2
 80040b4:	76fb      	strb	r3, [r7, #27]
 80040b6:	e060      	b.n	800417a <UART_SetConfig+0x29a>
 80040b8:	2304      	movs	r3, #4
 80040ba:	76fb      	strb	r3, [r7, #27]
 80040bc:	e05d      	b.n	800417a <UART_SetConfig+0x29a>
 80040be:	2308      	movs	r3, #8
 80040c0:	76fb      	strb	r3, [r7, #27]
 80040c2:	e05a      	b.n	800417a <UART_SetConfig+0x29a>
 80040c4:	2310      	movs	r3, #16
 80040c6:	76fb      	strb	r3, [r7, #27]
 80040c8:	e057      	b.n	800417a <UART_SetConfig+0x29a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a47      	ldr	r2, [pc, #284]	; (80041ec <UART_SetConfig+0x30c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d125      	bne.n	8004120 <UART_SetConfig+0x240>
 80040d4:	4b41      	ldr	r3, [pc, #260]	; (80041dc <UART_SetConfig+0x2fc>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e2:	d017      	beq.n	8004114 <UART_SetConfig+0x234>
 80040e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e8:	d817      	bhi.n	800411a <UART_SetConfig+0x23a>
 80040ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ee:	d00b      	beq.n	8004108 <UART_SetConfig+0x228>
 80040f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f4:	d811      	bhi.n	800411a <UART_SetConfig+0x23a>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <UART_SetConfig+0x222>
 80040fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fe:	d006      	beq.n	800410e <UART_SetConfig+0x22e>
 8004100:	e00b      	b.n	800411a <UART_SetConfig+0x23a>
 8004102:	2300      	movs	r3, #0
 8004104:	76fb      	strb	r3, [r7, #27]
 8004106:	e038      	b.n	800417a <UART_SetConfig+0x29a>
 8004108:	2302      	movs	r3, #2
 800410a:	76fb      	strb	r3, [r7, #27]
 800410c:	e035      	b.n	800417a <UART_SetConfig+0x29a>
 800410e:	2304      	movs	r3, #4
 8004110:	76fb      	strb	r3, [r7, #27]
 8004112:	e032      	b.n	800417a <UART_SetConfig+0x29a>
 8004114:	2308      	movs	r3, #8
 8004116:	76fb      	strb	r3, [r7, #27]
 8004118:	e02f      	b.n	800417a <UART_SetConfig+0x29a>
 800411a:	2310      	movs	r3, #16
 800411c:	76fb      	strb	r3, [r7, #27]
 800411e:	e02c      	b.n	800417a <UART_SetConfig+0x29a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2b      	ldr	r2, [pc, #172]	; (80041d4 <UART_SetConfig+0x2f4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d125      	bne.n	8004176 <UART_SetConfig+0x296>
 800412a:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <UART_SetConfig+0x2fc>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004138:	d017      	beq.n	800416a <UART_SetConfig+0x28a>
 800413a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800413e:	d817      	bhi.n	8004170 <UART_SetConfig+0x290>
 8004140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004144:	d00b      	beq.n	800415e <UART_SetConfig+0x27e>
 8004146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414a:	d811      	bhi.n	8004170 <UART_SetConfig+0x290>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <UART_SetConfig+0x278>
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004154:	d006      	beq.n	8004164 <UART_SetConfig+0x284>
 8004156:	e00b      	b.n	8004170 <UART_SetConfig+0x290>
 8004158:	2300      	movs	r3, #0
 800415a:	76fb      	strb	r3, [r7, #27]
 800415c:	e00d      	b.n	800417a <UART_SetConfig+0x29a>
 800415e:	2302      	movs	r3, #2
 8004160:	76fb      	strb	r3, [r7, #27]
 8004162:	e00a      	b.n	800417a <UART_SetConfig+0x29a>
 8004164:	2304      	movs	r3, #4
 8004166:	76fb      	strb	r3, [r7, #27]
 8004168:	e007      	b.n	800417a <UART_SetConfig+0x29a>
 800416a:	2308      	movs	r3, #8
 800416c:	76fb      	strb	r3, [r7, #27]
 800416e:	e004      	b.n	800417a <UART_SetConfig+0x29a>
 8004170:	2310      	movs	r3, #16
 8004172:	76fb      	strb	r3, [r7, #27]
 8004174:	e001      	b.n	800417a <UART_SetConfig+0x29a>
 8004176:	2310      	movs	r3, #16
 8004178:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <UART_SetConfig+0x2f4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	f040 809f 	bne.w	80042c4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004186:	7efb      	ldrb	r3, [r7, #27]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d837      	bhi.n	80041fc <UART_SetConfig+0x31c>
 800418c:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <UART_SetConfig+0x2b4>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	080041b9 	.word	0x080041b9
 8004198:	080041fd 	.word	0x080041fd
 800419c:	080041c1 	.word	0x080041c1
 80041a0:	080041fd 	.word	0x080041fd
 80041a4:	080041c7 	.word	0x080041c7
 80041a8:	080041fd 	.word	0x080041fd
 80041ac:	080041fd 	.word	0x080041fd
 80041b0:	080041fd 	.word	0x080041fd
 80041b4:	080041f5 	.word	0x080041f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b8:	f7fe fe4a 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 80041bc:	6178      	str	r0, [r7, #20]
        break;
 80041be:	e022      	b.n	8004206 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <UART_SetConfig+0x310>)
 80041c2:	617b      	str	r3, [r7, #20]
        break;
 80041c4:	e01f      	b.n	8004206 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c6:	f7fe fdab 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 80041ca:	6178      	str	r0, [r7, #20]
        break;
 80041cc:	e01b      	b.n	8004206 <UART_SetConfig+0x326>
 80041ce:	bf00      	nop
 80041d0:	cfff69f3 	.word	0xcfff69f3
 80041d4:	40008000 	.word	0x40008000
 80041d8:	40013800 	.word	0x40013800
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40004400 	.word	0x40004400
 80041e4:	40004800 	.word	0x40004800
 80041e8:	40004c00 	.word	0x40004c00
 80041ec:	40005000 	.word	0x40005000
 80041f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f8:	617b      	str	r3, [r7, #20]
        break;
 80041fa:	e004      	b.n	8004206 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	76bb      	strb	r3, [r7, #26]
        break;
 8004204:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 811b 	beq.w	8004444 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	4a96      	ldr	r2, [pc, #600]	; (800446c <UART_SetConfig+0x58c>)
 8004214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004218:	461a      	mov	r2, r3
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004220:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	4413      	add	r3, r2
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	d305      	bcc.n	800423e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	d902      	bls.n	8004244 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	76bb      	strb	r3, [r7, #26]
 8004242:	e0ff      	b.n	8004444 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4618      	mov	r0, r3
 8004248:	f04f 0100 	mov.w	r1, #0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	4a86      	ldr	r2, [pc, #536]	; (800446c <UART_SetConfig+0x58c>)
 8004252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004256:	b29a      	uxth	r2, r3
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	f7fc fcbc 	bl	8000bd8 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	020b      	lsls	r3, r1, #8
 8004272:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004276:	0202      	lsls	r2, r0, #8
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	6849      	ldr	r1, [r1, #4]
 800427c:	0849      	lsrs	r1, r1, #1
 800427e:	4608      	mov	r0, r1
 8004280:	f04f 0100 	mov.w	r1, #0
 8004284:	1814      	adds	r4, r2, r0
 8004286:	eb43 0501 	adc.w	r5, r3, r1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	461a      	mov	r2, r3
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	4620      	mov	r0, r4
 8004296:	4629      	mov	r1, r5
 8004298:	f7fc fc9e 	bl	8000bd8 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4613      	mov	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042aa:	d308      	bcc.n	80042be <UART_SetConfig+0x3de>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b2:	d204      	bcs.n	80042be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	60da      	str	r2, [r3, #12]
 80042bc:	e0c2      	b.n	8004444 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	76bb      	strb	r3, [r7, #26]
 80042c2:	e0bf      	b.n	8004444 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042cc:	d165      	bne.n	800439a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80042ce:	7efb      	ldrb	r3, [r7, #27]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d828      	bhi.n	8004326 <UART_SetConfig+0x446>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0x3fc>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	08004301 	.word	0x08004301
 80042e0:	08004309 	.word	0x08004309
 80042e4:	08004311 	.word	0x08004311
 80042e8:	08004327 	.word	0x08004327
 80042ec:	08004317 	.word	0x08004317
 80042f0:	08004327 	.word	0x08004327
 80042f4:	08004327 	.word	0x08004327
 80042f8:	08004327 	.word	0x08004327
 80042fc:	0800431f 	.word	0x0800431f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004300:	f7fe fda6 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8004304:	6178      	str	r0, [r7, #20]
        break;
 8004306:	e013      	b.n	8004330 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004308:	f7fe fdb8 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 800430c:	6178      	str	r0, [r7, #20]
        break;
 800430e:	e00f      	b.n	8004330 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004310:	4b57      	ldr	r3, [pc, #348]	; (8004470 <UART_SetConfig+0x590>)
 8004312:	617b      	str	r3, [r7, #20]
        break;
 8004314:	e00c      	b.n	8004330 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004316:	f7fe fd03 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 800431a:	6178      	str	r0, [r7, #20]
        break;
 800431c:	e008      	b.n	8004330 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800431e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004322:	617b      	str	r3, [r7, #20]
        break;
 8004324:	e004      	b.n	8004330 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	76bb      	strb	r3, [r7, #26]
        break;
 800432e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8086 	beq.w	8004444 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	4a4b      	ldr	r2, [pc, #300]	; (800446c <UART_SetConfig+0x58c>)
 800433e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004342:	461a      	mov	r2, r3
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	fbb3 f3f2 	udiv	r3, r3, r2
 800434a:	005a      	lsls	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	441a      	add	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	b29b      	uxth	r3, r3
 800435e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b0f      	cmp	r3, #15
 8004364:	d916      	bls.n	8004394 <UART_SetConfig+0x4b4>
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d212      	bcs.n	8004394 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f023 030f 	bic.w	r3, r3, #15
 8004376:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	b29b      	uxth	r3, r3
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	b29a      	uxth	r2, r3
 8004384:	89fb      	ldrh	r3, [r7, #14]
 8004386:	4313      	orrs	r3, r2
 8004388:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	89fa      	ldrh	r2, [r7, #14]
 8004390:	60da      	str	r2, [r3, #12]
 8004392:	e057      	b.n	8004444 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	76bb      	strb	r3, [r7, #26]
 8004398:	e054      	b.n	8004444 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800439a:	7efb      	ldrb	r3, [r7, #27]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d828      	bhi.n	80043f2 <UART_SetConfig+0x512>
 80043a0:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <UART_SetConfig+0x4c8>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043cd 	.word	0x080043cd
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	080043dd 	.word	0x080043dd
 80043b4:	080043f3 	.word	0x080043f3
 80043b8:	080043e3 	.word	0x080043e3
 80043bc:	080043f3 	.word	0x080043f3
 80043c0:	080043f3 	.word	0x080043f3
 80043c4:	080043f3 	.word	0x080043f3
 80043c8:	080043eb 	.word	0x080043eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043cc:	f7fe fd40 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 80043d0:	6178      	str	r0, [r7, #20]
        break;
 80043d2:	e013      	b.n	80043fc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043d4:	f7fe fd52 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 80043d8:	6178      	str	r0, [r7, #20]
        break;
 80043da:	e00f      	b.n	80043fc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043dc:	4b24      	ldr	r3, [pc, #144]	; (8004470 <UART_SetConfig+0x590>)
 80043de:	617b      	str	r3, [r7, #20]
        break;
 80043e0:	e00c      	b.n	80043fc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043e2:	f7fe fc9d 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 80043e6:	6178      	str	r0, [r7, #20]
        break;
 80043e8:	e008      	b.n	80043fc <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ee:	617b      	str	r3, [r7, #20]
        break;
 80043f0:	e004      	b.n	80043fc <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	76bb      	strb	r3, [r7, #26]
        break;
 80043fa:	bf00      	nop
    }

    if (pclk != 0U)
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d020      	beq.n	8004444 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	4a19      	ldr	r2, [pc, #100]	; (800446c <UART_SetConfig+0x58c>)
 8004408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800440c:	461a      	mov	r2, r3
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	fbb3 f2f2 	udiv	r2, r3, r2
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	085b      	lsrs	r3, r3, #1
 800441a:	441a      	add	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	b29b      	uxth	r3, r3
 8004426:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b0f      	cmp	r3, #15
 800442c:	d908      	bls.n	8004440 <UART_SetConfig+0x560>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004434:	d204      	bcs.n	8004440 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	e001      	b.n	8004444 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004460:	7ebb      	ldrb	r3, [r7, #26]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bdb0      	pop	{r4, r5, r7, pc}
 800446a:	bf00      	nop
 800446c:	08008c28 	.word	0x08008c28
 8004470:	00f42400 	.word	0x00f42400

08004474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01a      	beq.n	800458a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004572:	d10a      	bne.n	800458a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  }
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045c8:	f7fd f9da 	bl	8001980 <HAL_GetTick>
 80045cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d10e      	bne.n	80045fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f82f 	bl	800464e <UART_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e025      	b.n	8004646 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b04      	cmp	r3, #4
 8004606:	d10e      	bne.n	8004626 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f819 	bl	800464e <UART_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e00f      	b.n	8004646 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	4613      	mov	r3, r2
 800465c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465e:	e062      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d05e      	beq.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004668:	f7fd f98a 	bl	8001980 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	429a      	cmp	r2, r3
 8004676:	d302      	bcc.n	800467e <UART_WaitOnFlagUntilTimeout+0x30>
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11d      	bne.n	80046ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800468c:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e045      	b.n	8004746 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d02e      	beq.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d6:	d126      	bne.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046f0:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0201 	bic.w	r2, r2, #1
 8004700:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e00f      	b.n	8004746 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4013      	ands	r3, r2
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	429a      	cmp	r2, r3
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	429a      	cmp	r2, r3
 8004742:	d08d      	beq.n	8004660 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_UARTEx_DisableFifoMode+0x16>
 8004760:	2302      	movs	r3, #2
 8004762:	e027      	b.n	80047b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2224      	movs	r2, #36	; 0x24
 8004770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004792:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e02d      	b.n	8004834 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	; 0x24
 80047e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f84f 	bl	80048b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004850:	2302      	movs	r3, #2
 8004852:	e02d      	b.n	80048b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2224      	movs	r2, #36	; 0x24
 8004860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0201 	bic.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f811 	bl	80048b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d108      	bne.n	80048da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048d8:	e031      	b.n	800493e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048da:	2308      	movs	r3, #8
 80048dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048de:	2308      	movs	r3, #8
 80048e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	0e5b      	lsrs	r3, r3, #25
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	0f5b      	lsrs	r3, r3, #29
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004902:	7bbb      	ldrb	r3, [r7, #14]
 8004904:	7b3a      	ldrb	r2, [r7, #12]
 8004906:	4911      	ldr	r1, [pc, #68]	; (800494c <UARTEx_SetNbDataToProcess+0x94>)
 8004908:	5c8a      	ldrb	r2, [r1, r2]
 800490a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800490e:	7b3a      	ldrb	r2, [r7, #12]
 8004910:	490f      	ldr	r1, [pc, #60]	; (8004950 <UARTEx_SetNbDataToProcess+0x98>)
 8004912:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004914:	fb93 f3f2 	sdiv	r3, r3, r2
 8004918:	b29a      	uxth	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	7b7a      	ldrb	r2, [r7, #13]
 8004924:	4909      	ldr	r1, [pc, #36]	; (800494c <UARTEx_SetNbDataToProcess+0x94>)
 8004926:	5c8a      	ldrb	r2, [r1, r2]
 8004928:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800492c:	7b7a      	ldrb	r2, [r7, #13]
 800492e:	4908      	ldr	r1, [pc, #32]	; (8004950 <UARTEx_SetNbDataToProcess+0x98>)
 8004930:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004932:	fb93 f3f2 	sdiv	r3, r3, r2
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	08008c40 	.word	0x08008c40
 8004950:	08008c48 	.word	0x08008c48

08004954 <sine_30_30_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_30_30_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_SINE_30_30_ACTIVATIONS_ALIGNMENT));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	3303      	adds	r3, #3
 8004964:	f023 0303 	bic.w	r3, r3, #3
 8004968:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_3_input0_output_array.data = AI_PTR(NULL);
 800496a:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <sine_30_30_configure_activations+0x70>)
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
    serving_default_dense_3_input0_output_array.data_start = AI_PTR(NULL);
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <sine_30_30_configure_activations+0x70>)
 8004972:	2200      	movs	r2, #0
 8004974:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 8004976:	4a14      	ldr	r2, [pc, #80]	; (80049c8 <sine_30_30_configure_activations+0x74>)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 800497c:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <sine_30_30_configure_activations+0x74>)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 8004982:	4a12      	ldr	r2, [pc, #72]	; (80049cc <sine_30_30_configure_activations+0x78>)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 8004988:	4a10      	ldr	r2, [pc, #64]	; (80049cc <sine_30_30_configure_activations+0x78>)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 120);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3378      	adds	r3, #120	; 0x78
 8004992:	4a0f      	ldr	r2, [pc, #60]	; (80049d0 <sine_30_30_configure_activations+0x7c>)
 8004994:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 120);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3378      	adds	r3, #120	; 0x78
 800499a:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <sine_30_30_configure_activations+0x7c>)
 800499c:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 800499e:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <sine_30_30_configure_activations+0x80>)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 80049a4:	4a0b      	ldr	r2, [pc, #44]	; (80049d4 <sine_30_30_configure_activations+0x80>)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <sine_30_30_configure_activations+0x84>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <sine_30_30_configure_activations+0x84>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80049b6:	2301      	movs	r3, #1
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	200000cc 	.word	0x200000cc
 80049c8:	200000dc 	.word	0x200000dc
 80049cc:	200000ec 	.word	0x200000ec
 80049d0:	200000fc 	.word	0x200000fc
 80049d4:	2000010c 	.word	0x2000010c
 80049d8:	2000011c 	.word	0x2000011c

080049dc <sine_30_30_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_30_30_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80049ec:	4b2f      	ldr	r3, [pc, #188]	; (8004aac <sine_30_30_configure_weights+0xd0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049f4:	4a2d      	ldr	r2, [pc, #180]	; (8004aac <sine_30_30_configure_weights+0xd0>)
 80049f6:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 4080);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 80049fe:	4a2b      	ldr	r2, [pc, #172]	; (8004aac <sine_30_30_configure_weights+0xd0>)
 8004a00:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 4080);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 8004a08:	4a28      	ldr	r2, [pc, #160]	; (8004aac <sine_30_30_configure_weights+0xd0>)
 8004a0a:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004a0c:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <sine_30_30_configure_weights+0xd4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a14:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <sine_30_30_configure_weights+0xd4>)
 8004a16:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 3960);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f603 7378 	addw	r3, r3, #3960	; 0xf78
 8004a1e:	4a24      	ldr	r2, [pc, #144]	; (8004ab0 <sine_30_30_configure_weights+0xd4>)
 8004a20:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 3960);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f603 7378 	addw	r3, r3, #3960	; 0xf78
 8004a28:	4a21      	ldr	r2, [pc, #132]	; (8004ab0 <sine_30_30_configure_weights+0xd4>)
 8004a2a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004a2c:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <sine_30_30_configure_weights+0xd8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a34:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <sine_30_30_configure_weights+0xd8>)
 8004a36:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 3840);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <sine_30_30_configure_weights+0xd8>)
 8004a40:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 3840);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8004a48:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <sine_30_30_configure_weights+0xd8>)
 8004a4a:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <sine_30_30_configure_weights+0xdc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a54:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <sine_30_30_configure_weights+0xdc>)
 8004a56:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 240);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	33f0      	adds	r3, #240	; 0xf0
 8004a5c:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <sine_30_30_configure_weights+0xdc>)
 8004a5e:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 240);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	33f0      	adds	r3, #240	; 0xf0
 8004a64:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <sine_30_30_configure_weights+0xdc>)
 8004a66:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004a68:	4b14      	ldr	r3, [pc, #80]	; (8004abc <sine_30_30_configure_weights+0xe0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a70:	4a12      	ldr	r2, [pc, #72]	; (8004abc <sine_30_30_configure_weights+0xe0>)
 8004a72:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 120);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3378      	adds	r3, #120	; 0x78
 8004a78:	4a10      	ldr	r2, [pc, #64]	; (8004abc <sine_30_30_configure_weights+0xe0>)
 8004a7a:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 120);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3378      	adds	r3, #120	; 0x78
 8004a80:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <sine_30_30_configure_weights+0xe0>)
 8004a82:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <sine_30_30_configure_weights+0xe4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a8c:	4a0c      	ldr	r2, [pc, #48]	; (8004ac0 <sine_30_30_configure_weights+0xe4>)
 8004a8e:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8004a90:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <sine_30_30_configure_weights+0xe4>)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8004a96:	4a0a      	ldr	r2, [pc, #40]	; (8004ac0 <sine_30_30_configure_weights+0xe4>)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8004a9c:	2301      	movs	r3, #1
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	2000006c 	.word	0x2000006c
 8004ab0:	2000007c 	.word	0x2000007c
 8004ab4:	2000008c 	.word	0x2000008c
 8004ab8:	2000009c 	.word	0x2000009c
 8004abc:	200000ac 	.word	0x200000ac
 8004ac0:	200000bc 	.word	0x200000bc

08004ac4 <ai_sine_30_30_create>:
}

AI_API_ENTRY
ai_error ai_sine_30_30_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4a04      	ldr	r2, [pc, #16]	; (8004aec <ai_sine_30_30_create+0x28>)
 8004ada:	6839      	ldr	r1, [r7, #0]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f881 	bl	8004be4 <ai_platform_network_create>
 8004ae2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	2000000c 	.word	0x2000000c

08004af0 <ai_sine_30_30_init>:
}

AI_API_ENTRY
ai_bool ai_sine_30_30_init(
  ai_handle network, const ai_network_params* params)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004afa:	6839      	ldr	r1, [r7, #0]
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f8c9 	bl	8004c94 <ai_platform_network_init>
 8004b02:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <ai_sine_30_30_init+0x1e>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e02b      	b.n	8004b66 <ai_sine_30_30_init+0x76>

  ai_bool ok = true;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	72fb      	strb	r3, [r7, #11]
  ok &= sine_30_30_configure_weights(net_ctx, &params->params);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	4619      	mov	r1, r3
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f7ff ff60 	bl	80049dc <sine_30_30_configure_weights>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	7afb      	ldrb	r3, [r7, #11]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	72fb      	strb	r3, [r7, #11]
  ok &= sine_30_30_configure_activations(net_ctx, &params->activations);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	3318      	adds	r3, #24
 8004b32:	4619      	mov	r1, r3
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff ff0d 	bl	8004954 <sine_30_30_configure_activations>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	7afb      	ldrb	r3, [r7, #11]
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bf14      	ite	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	2300      	moveq	r3, #0
 8004b4a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f91f 	bl	8004d90 <ai_platform_network_post_init>
 8004b52:	4603      	mov	r3, r0
 8004b54:	461a      	mov	r2, r3
 8004b56:	7afb      	ldrb	r3, [r7, #11]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bf14      	ite	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	2300      	moveq	r3, #0
 8004b62:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004b64:	7afb      	ldrb	r3, [r7, #11]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <ai_sine_30_30_run>:


AI_API_ENTRY
ai_i32 ai_sine_30_30_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f94e 	bl	8004e20 <ai_platform_network_process>
 8004b84:	4603      	mov	r3, r0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <ai_sine_30_30_data_weights_get>:
#include "sine_30_30_data.h"

ai_handle ai_sine_30_30_data_weights_get(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
    0xe7, 0x9d, 0xbe, 0x20, 0x82, 0xf1, 0xbe, 0x64, 0x8f,
    0xfa, 0xbd, 0x9a, 0x20, 0xaa, 0x3e, 0x97, 0xa4, 0xb0,
    0x3e, 0xf6, 0x92, 0xa9, 0x3e, 0x99, 0x40, 0x1a, 0x3e
  };

  return AI_HANDLE_PTR(s_sine_30_30_weights);
 8004b94:	4b02      	ldr	r3, [pc, #8]	; (8004ba0 <ai_sine_30_30_data_weights_get+0x10>)

}
 8004b96:	4618      	mov	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	08008c78 	.word	0x08008c78

08004ba4 <_platform_network_state_setup.isra.1>:
 8004ba4:	b430      	push	{r4, r5}
 8004ba6:	68dd      	ldr	r5, [r3, #12]
 8004ba8:	695c      	ldr	r4, [r3, #20]
 8004baa:	68ed      	ldr	r5, [r5, #12]
 8004bac:	68e4      	ldr	r4, [r4, #12]
 8004bae:	fb04 f405 	mul.w	r4, r4, r5
 8004bb2:	6084      	str	r4, [r0, #8]
 8004bb4:	8809      	ldrh	r1, [r1, #0]
 8004bb6:	fb04 f401 	mul.w	r4, r4, r1
 8004bba:	60c4      	str	r4, [r0, #12]
 8004bbc:	6811      	ldr	r1, [r2, #0]
 8004bbe:	6041      	str	r1, [r0, #4]
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	4414      	add	r4, r2
 8004bc4:	6004      	str	r4, [r0, #0]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	6814      	ldr	r4, [r2, #0]
 8004bca:	00a4      	lsls	r4, r4, #2
 8004bcc:	d407      	bmi.n	8004bde <_platform_network_state_setup.isra.1+0x3a>
 8004bce:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8004bd2:	1b64      	subs	r4, r4, r5
 8004bd4:	4421      	add	r1, r4
 8004bd6:	6091      	str	r1, [r2, #8]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	6842      	ldr	r2, [r0, #4]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	bc30      	pop	{r4, r5}
 8004be0:	4770      	bx	lr
	...

08004be4 <ai_platform_network_create>:
 8004be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be8:	4e23      	ldr	r6, [pc, #140]	; (8004c78 <ai_platform_network_create+0x94>)
 8004bea:	4924      	ldr	r1, [pc, #144]	; (8004c7c <ai_platform_network_create+0x98>)
 8004bec:	6835      	ldr	r5, [r6, #0]
 8004bee:	b082      	sub	sp, #8
 8004bf0:	f025 0501 	bic.w	r5, r5, #1
 8004bf4:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8004bf8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004bfc:	6035      	str	r5, [r6, #0]
 8004bfe:	2501      	movs	r5, #1
 8004c00:	600d      	str	r5, [r1, #0]
 8004c02:	680d      	ldr	r5, [r1, #0]
 8004c04:	2d00      	cmp	r5, #0
 8004c06:	d1fc      	bne.n	8004c02 <ai_platform_network_create+0x1e>
 8004c08:	491d      	ldr	r1, [pc, #116]	; (8004c80 <ai_platform_network_create+0x9c>)
 8004c0a:	4e1e      	ldr	r6, [pc, #120]	; (8004c84 <ai_platform_network_create+0xa0>)
 8004c0c:	600e      	str	r6, [r1, #0]
 8004c0e:	680e      	ldr	r6, [r1, #0]
 8004c10:	491d      	ldr	r1, [pc, #116]	; (8004c88 <ai_platform_network_create+0xa4>)
 8004c12:	428e      	cmp	r6, r1
 8004c14:	d000      	beq.n	8004c18 <ai_platform_network_create+0x34>
 8004c16:	e7fe      	b.n	8004c16 <ai_platform_network_create+0x32>
 8004c18:	b1d0      	cbz	r0, 8004c50 <ai_platform_network_create+0x6c>
 8004c1a:	4698      	mov	r8, r3
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	4a1b      	ldr	r2, [pc, #108]	; (8004c8c <ai_platform_network_create+0xa8>)
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	6003      	str	r3, [r0, #0]
 8004c24:	4606      	mov	r6, r0
 8004c26:	f000 fb05 	bl	8005234 <core_init>
 8004c2a:	b1b0      	cbz	r0, 8004c5a <ai_platform_network_create+0x76>
 8004c2c:	0223      	lsls	r3, r4, #8
 8004c2e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004c32:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8004c36:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8004c3a:	d910      	bls.n	8004c5e <ai_platform_network_create+0x7a>
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6033      	str	r3, [r6, #0]
 8004c42:	2310      	movs	r3, #16
 8004c44:	2000      	movs	r0, #0
 8004c46:	f362 0007 	bfi	r0, r2, #0, #8
 8004c4a:	f363 201f 	bfi	r0, r3, #8, #24
 8004c4e:	e001      	b.n	8004c54 <ai_platform_network_create+0x70>
 8004c50:	f241 0010 	movw	r0, #4112	; 0x1010
 8004c54:	b002      	add	sp, #8
 8004c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c5a:	2230      	movs	r2, #48	; 0x30
 8004c5c:	e7ef      	b.n	8004c3e <ai_platform_network_create+0x5a>
 8004c5e:	a802      	add	r0, sp, #8
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <ai_platform_network_create+0xac>)
 8004c62:	f840 3d04 	str.w	r3, [r0, #-4]!
 8004c66:	f000 ffb3 	bl	8005bd0 <ai_check_custom_types>
 8004c6a:	b110      	cbz	r0, 8004c72 <ai_platform_network_create+0x8e>
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	462a      	mov	r2, r5
 8004c70:	e7e8      	b.n	8004c44 <ai_platform_network_create+0x60>
 8004c72:	2202      	movs	r2, #2
 8004c74:	e7e3      	b.n	8004c3e <ai_platform_network_create+0x5a>
 8004c76:	bf00      	nop
 8004c78:	e0002000 	.word	0xe0002000
 8004c7c:	40023008 	.word	0x40023008
 8004c80:	40023000 	.word	0x40023000
 8004c84:	f407a5c2 	.word	0xf407a5c2
 8004c88:	b5e8b5cd 	.word	0xb5e8b5cd
 8004c8c:	a1c00100 	.word	0xa1c00100
 8004c90:	84048403 	.word	0x84048403

08004c94 <ai_platform_network_init>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	460c      	mov	r4, r1
 8004c98:	4605      	mov	r5, r0
 8004c9a:	b120      	cbz	r0, 8004ca6 <ai_platform_network_init+0x12>
 8004c9c:	4b36      	ldr	r3, [pc, #216]	; (8004d78 <ai_platform_network_init+0xe4>)
 8004c9e:	6802      	ldr	r2, [r0, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	bf18      	it	ne
 8004ca4:	2500      	movne	r5, #0
 8004ca6:	4935      	ldr	r1, [pc, #212]	; (8004d7c <ai_platform_network_init+0xe8>)
 8004ca8:	4a35      	ldr	r2, [pc, #212]	; (8004d80 <ai_platform_network_init+0xec>)
 8004caa:	680b      	ldr	r3, [r1, #0]
 8004cac:	2001      	movs	r0, #1
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	600b      	str	r3, [r1, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	6010      	str	r0, [r2, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	2a00      	cmp	r2, #0
 8004cbc:	d1fc      	bne.n	8004cb8 <ai_platform_network_init+0x24>
 8004cbe:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <ai_platform_network_init+0xf0>)
 8004cc0:	4a31      	ldr	r2, [pc, #196]	; (8004d88 <ai_platform_network_init+0xf4>)
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b31      	ldr	r3, [pc, #196]	; (8004d8c <ai_platform_network_init+0xf8>)
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d000      	beq.n	8004cce <ai_platform_network_init+0x3a>
 8004ccc:	e7fe      	b.n	8004ccc <ai_platform_network_init+0x38>
 8004cce:	b33d      	cbz	r5, 8004d20 <ai_platform_network_init+0x8c>
 8004cd0:	b344      	cbz	r4, 8004d24 <ai_platform_network_init+0x90>
 8004cd2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004cd4:	6926      	ldr	r6, [r4, #16]
 8004cd6:	2f00      	cmp	r7, #0
 8004cd8:	d03d      	beq.n	8004d56 <ai_platform_network_init+0xc2>
 8004cda:	b35e      	cbz	r6, 8004d34 <ai_platform_network_init+0xa0>
 8004cdc:	4627      	mov	r7, r4
 8004cde:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004ce0:	f105 0618 	add.w	r6, r5, #24
 8004ce4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004ce6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004cea:	e886 0003 	stmia.w	r6, {r0, r1}
 8004cee:	3418      	adds	r4, #24
 8004cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf2:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8004cf6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004cf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cfc:	e886 0003 	stmia.w	r6, {r0, r1}
 8004d00:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8004d02:	2303      	movs	r3, #3
 8004d04:	60eb      	str	r3, [r5, #12]
 8004d06:	b15a      	cbz	r2, 8004d20 <ai_platform_network_init+0x8c>
 8004d08:	68d3      	ldr	r3, [r2, #12]
 8004d0a:	6095      	str	r5, [r2, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d007      	beq.n	8004d20 <ai_platform_network_init+0x8c>
 8004d10:	b133      	cbz	r3, 8004d20 <ai_platform_network_init+0x8c>
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	609d      	str	r5, [r3, #8]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d002      	beq.n	8004d20 <ai_platform_network_init+0x8c>
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f8      	bne.n	8004d12 <ai_platform_network_init+0x7e>
 8004d20:	4628      	mov	r0, r5
 8004d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d24:	f105 0010 	add.w	r0, r5, #16
 8004d28:	2211      	movs	r2, #17
 8004d2a:	2110      	movs	r1, #16
 8004d2c:	f000 fa84 	bl	8005238 <core_set_error>
 8004d30:	4625      	mov	r5, r4
 8004d32:	e7f5      	b.n	8004d20 <ai_platform_network_init+0x8c>
 8004d34:	8921      	ldrh	r1, [r4, #8]
 8004d36:	88e2      	ldrh	r2, [r4, #6]
 8004d38:	68e3      	ldr	r3, [r4, #12]
 8004d3a:	fb02 f201 	mul.w	r2, r2, r1
 8004d3e:	fb03 f302 	mul.w	r3, r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0ca      	beq.n	8004cdc <ai_platform_network_init+0x48>
 8004d46:	f105 0010 	add.w	r0, r5, #16
 8004d4a:	2212      	movs	r2, #18
 8004d4c:	2110      	movs	r1, #16
 8004d4e:	f000 fa73 	bl	8005238 <core_set_error>
 8004d52:	4635      	mov	r5, r6
 8004d54:	e7e4      	b.n	8004d20 <ai_platform_network_init+0x8c>
 8004d56:	8c21      	ldrh	r1, [r4, #32]
 8004d58:	8be2      	ldrh	r2, [r4, #30]
 8004d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d5c:	fb02 f201 	mul.w	r2, r2, r1
 8004d60:	fb03 f302 	mul.w	r3, r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0b8      	beq.n	8004cda <ai_platform_network_init+0x46>
 8004d68:	f105 0010 	add.w	r0, r5, #16
 8004d6c:	2213      	movs	r2, #19
 8004d6e:	2110      	movs	r1, #16
 8004d70:	f000 fa62 	bl	8005238 <core_set_error>
 8004d74:	463d      	mov	r5, r7
 8004d76:	e7d3      	b.n	8004d20 <ai_platform_network_init+0x8c>
 8004d78:	a1c00100 	.word	0xa1c00100
 8004d7c:	e0002000 	.word	0xe0002000
 8004d80:	40023008 	.word	0x40023008
 8004d84:	40023000 	.word	0x40023000
 8004d88:	f407a5c2 	.word	0xf407a5c2
 8004d8c:	b5e8b5cd 	.word	0xb5e8b5cd

08004d90 <ai_platform_network_post_init>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4604      	mov	r4, r0
 8004d94:	b120      	cbz	r0, 8004da0 <ai_platform_network_post_init+0x10>
 8004d96:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <ai_platform_network_post_init+0x78>)
 8004d98:	6802      	ldr	r2, [r0, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	bf18      	it	ne
 8004d9e:	2400      	movne	r4, #0
 8004da0:	491a      	ldr	r1, [pc, #104]	; (8004e0c <ai_platform_network_post_init+0x7c>)
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <ai_platform_network_post_init+0x80>)
 8004da4:	680b      	ldr	r3, [r1, #0]
 8004da6:	2001      	movs	r0, #1
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	600b      	str	r3, [r1, #0]
 8004dae:	4613      	mov	r3, r2
 8004db0:	6010      	str	r0, [r2, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	d1fc      	bne.n	8004db2 <ai_platform_network_post_init+0x22>
 8004db8:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <ai_platform_network_post_init+0x84>)
 8004dba:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <ai_platform_network_post_init+0x88>)
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b16      	ldr	r3, [pc, #88]	; (8004e1c <ai_platform_network_post_init+0x8c>)
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d000      	beq.n	8004dc8 <ai_platform_network_post_init+0x38>
 8004dc6:	e7fe      	b.n	8004dc6 <ai_platform_network_post_init+0x36>
 8004dc8:	b1a4      	cbz	r4, 8004df4 <ai_platform_network_post_init+0x64>
 8004dca:	68e3      	ldr	r3, [r4, #12]
 8004dcc:	f013 0502 	ands.w	r5, r3, #2
 8004dd0:	d012      	beq.n	8004df8 <ai_platform_network_post_init+0x68>
 8004dd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dd4:	b163      	cbz	r3, 8004df0 <ai_platform_network_post_init+0x60>
 8004dd6:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8004dd8:	b91d      	cbnz	r5, 8004de2 <ai_platform_network_post_init+0x52>
 8004dda:	e009      	b.n	8004df0 <ai_platform_network_post_init+0x60>
 8004ddc:	461d      	mov	r5, r3
 8004dde:	b13b      	cbz	r3, 8004df0 <ai_platform_network_post_init+0x60>
 8004de0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004de2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004de4:	4629      	mov	r1, r5
 8004de6:	2000      	movs	r0, #0
 8004de8:	4798      	blx	r3
 8004dea:	68eb      	ldr	r3, [r5, #12]
 8004dec:	42ab      	cmp	r3, r5
 8004dee:	d1f5      	bne.n	8004ddc <ai_platform_network_post_init+0x4c>
 8004df0:	2001      	movs	r0, #1
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	4620      	mov	r0, r4
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	f104 0010 	add.w	r0, r4, #16
 8004dfc:	2210      	movs	r2, #16
 8004dfe:	2111      	movs	r1, #17
 8004e00:	f000 fa1a 	bl	8005238 <core_set_error>
 8004e04:	4628      	mov	r0, r5
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	a1c00100 	.word	0xa1c00100
 8004e0c:	e0002000 	.word	0xe0002000
 8004e10:	40023008 	.word	0x40023008
 8004e14:	40023000 	.word	0x40023000
 8004e18:	f407a5c2 	.word	0xf407a5c2
 8004e1c:	b5e8b5cd 	.word	0xb5e8b5cd

08004e20 <ai_platform_network_process>:
 8004e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	b083      	sub	sp, #12
 8004e26:	4604      	mov	r4, r0
 8004e28:	9201      	str	r2, [sp, #4]
 8004e2a:	b120      	cbz	r0, 8004e36 <ai_platform_network_process+0x16>
 8004e2c:	4ba5      	ldr	r3, [pc, #660]	; (80050c4 <ai_platform_network_process+0x2a4>)
 8004e2e:	6802      	ldr	r2, [r0, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	bf18      	it	ne
 8004e34:	2400      	movne	r4, #0
 8004e36:	48a4      	ldr	r0, [pc, #656]	; (80050c8 <ai_platform_network_process+0x2a8>)
 8004e38:	4ba4      	ldr	r3, [pc, #656]	; (80050cc <ai_platform_network_process+0x2ac>)
 8004e3a:	6802      	ldr	r2, [r0, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	6002      	str	r2, [r0, #0]
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	2a00      	cmp	r2, #0
 8004e4a:	d1fc      	bne.n	8004e46 <ai_platform_network_process+0x26>
 8004e4c:	4ba0      	ldr	r3, [pc, #640]	; (80050d0 <ai_platform_network_process+0x2b0>)
 8004e4e:	4aa1      	ldr	r2, [pc, #644]	; (80050d4 <ai_platform_network_process+0x2b4>)
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4ba0      	ldr	r3, [pc, #640]	; (80050d8 <ai_platform_network_process+0x2b8>)
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d000      	beq.n	8004e5c <ai_platform_network_process+0x3c>
 8004e5a:	e7fe      	b.n	8004e5a <ai_platform_network_process+0x3a>
 8004e5c:	2c00      	cmp	r4, #0
 8004e5e:	d066      	beq.n	8004f2e <ai_platform_network_process+0x10e>
 8004e60:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8004e64:	b107      	cbz	r7, 8004e68 <ai_platform_network_process+0x48>
 8004e66:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8004e68:	68e3      	ldr	r3, [r4, #12]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	2600      	movs	r6, #0
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	6166      	str	r6, [r4, #20]
 8004e74:	f040 80fe 	bne.w	8005074 <ai_platform_network_process+0x254>
 8004e78:	2900      	cmp	r1, #0
 8004e7a:	d07f      	beq.n	8004f7c <ai_platform_network_process+0x15c>
 8004e7c:	2f00      	cmp	r7, #0
 8004e7e:	d07d      	beq.n	8004f7c <ai_platform_network_process+0x15c>
 8004e80:	883b      	ldrh	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d07a      	beq.n	8004f7c <ai_platform_network_process+0x15c>
 8004e86:	460d      	mov	r5, r1
 8004e88:	46a0      	mov	r8, r4
 8004e8a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8004e8e:	429e      	cmp	r6, r3
 8004e90:	d27d      	bcs.n	8004f8e <ai_platform_network_process+0x16e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d07a      	beq.n	8004f8e <ai_platform_network_process+0x16e>
 8004e98:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8004e9c:	2c00      	cmp	r4, #0
 8004e9e:	d076      	beq.n	8004f8e <ai_platform_network_process+0x16e>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8004ea8:	d067      	beq.n	8004f7a <ai_platform_network_process+0x15a>
 8004eaa:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8004eae:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8004eb2:	69a0      	ldr	r0, [r4, #24]
 8004eb4:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8004eb8:	6841      	ldr	r1, [r0, #4]
 8004eba:	fb0b f30e 	mul.w	r3, fp, lr
 8004ebe:	fb0c f303 	mul.w	r3, ip, r3
 8004ec2:	4299      	cmp	r1, r3
 8004ec4:	d350      	bcc.n	8004f68 <ai_platform_network_process+0x148>
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	455a      	cmp	r2, fp
 8004ecc:	d14c      	bne.n	8004f68 <ai_platform_network_process+0x148>
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	4572      	cmp	r2, lr
 8004ed2:	d149      	bne.n	8004f68 <ai_platform_network_process+0x148>
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	459c      	cmp	ip, r3
 8004ed8:	d146      	bne.n	8004f68 <ai_platform_network_process+0x148>
 8004eda:	6800      	ldr	r0, [r0, #0]
 8004edc:	f000 ff28 	bl	8005d30 <ai_array_get_byte_size>
 8004ee0:	68e2      	ldr	r2, [r4, #12]
 8004ee2:	6963      	ldr	r3, [r4, #20]
 8004ee4:	68d2      	ldr	r2, [r2, #12]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	fb03 f302 	mul.w	r3, r3, r2
 8004eec:	4298      	cmp	r0, r3
 8004eee:	d33b      	bcc.n	8004f68 <ai_platform_network_process+0x148>
 8004ef0:	69a3      	ldr	r3, [r4, #24]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	f000 fed0 	bl	8005c98 <ai_array_to_buffer_fmt>
 8004ef8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004efc:	4043      	eors	r3, r0
 8004efe:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004f02:	d128      	bne.n	8004f56 <ai_platform_network_process+0x136>
 8004f04:	68eb      	ldr	r3, [r5, #12]
 8004f06:	b1f3      	cbz	r3, 8004f46 <ai_platform_network_process+0x126>
 8004f08:	f8b5 b000 	ldrh.w	fp, [r5]
 8004f0c:	f1bb 0f00 	cmp.w	fp, #0
 8004f10:	d012      	beq.n	8004f38 <ai_platform_network_process+0x118>
 8004f12:	4623      	mov	r3, r4
 8004f14:	f105 020c 	add.w	r2, r5, #12
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4650      	mov	r0, sl
 8004f1c:	f7ff fe42 	bl	8004ba4 <_platform_network_state_setup.isra.1>
 8004f20:	45d9      	cmp	r9, fp
 8004f22:	883b      	ldrh	r3, [r7, #0]
 8004f24:	bf38      	it	cc
 8004f26:	46d9      	movcc	r9, fp
 8004f28:	3601      	adds	r6, #1
 8004f2a:	3518      	adds	r5, #24
 8004f2c:	e7af      	b.n	8004e8e <ai_platform_network_process+0x6e>
 8004f2e:	46a3      	mov	fp, r4
 8004f30:	4658      	mov	r0, fp
 8004f32:	b003      	add	sp, #12
 8004f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f38:	f108 0010 	add.w	r0, r8, #16
 8004f3c:	2221      	movs	r2, #33	; 0x21
 8004f3e:	2112      	movs	r1, #18
 8004f40:	f000 f97a 	bl	8005238 <core_set_error>
 8004f44:	e7f4      	b.n	8004f30 <ai_platform_network_process+0x110>
 8004f46:	f108 0010 	add.w	r0, r8, #16
 8004f4a:	2217      	movs	r2, #23
 8004f4c:	2112      	movs	r1, #18
 8004f4e:	469b      	mov	fp, r3
 8004f50:	f000 f972 	bl	8005238 <core_set_error>
 8004f54:	e7ec      	b.n	8004f30 <ai_platform_network_process+0x110>
 8004f56:	f108 0010 	add.w	r0, r8, #16
 8004f5a:	2219      	movs	r2, #25
 8004f5c:	2112      	movs	r1, #18
 8004f5e:	f000 f96b 	bl	8005238 <core_set_error>
 8004f62:	f04f 0b00 	mov.w	fp, #0
 8004f66:	e7e3      	b.n	8004f30 <ai_platform_network_process+0x110>
 8004f68:	f108 0010 	add.w	r0, r8, #16
 8004f6c:	2218      	movs	r2, #24
 8004f6e:	2112      	movs	r1, #18
 8004f70:	f000 f962 	bl	8005238 <core_set_error>
 8004f74:	f04f 0b00 	mov.w	fp, #0
 8004f78:	e7da      	b.n	8004f30 <ai_platform_network_process+0x110>
 8004f7a:	4644      	mov	r4, r8
 8004f7c:	f104 0010 	add.w	r0, r4, #16
 8004f80:	2217      	movs	r2, #23
 8004f82:	2112      	movs	r1, #18
 8004f84:	f000 f958 	bl	8005238 <core_set_error>
 8004f88:	f04f 0b00 	mov.w	fp, #0
 8004f8c:	e7d0      	b.n	8004f30 <ai_platform_network_process+0x110>
 8004f8e:	9a01      	ldr	r2, [sp, #4]
 8004f90:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8004f94:	4644      	mov	r4, r8
 8004f96:	2a00      	cmp	r2, #0
 8004f98:	f000 80a4 	beq.w	80050e4 <ai_platform_network_process+0x2c4>
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	f240 8140 	bls.w	8005222 <ai_platform_network_process+0x402>
 8004fa2:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8004fa6:	f118 0f0c 	cmn.w	r8, #12
 8004faa:	f000 813a 	beq.w	8005222 <ai_platform_network_process+0x402>
 8004fae:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8135 	beq.w	8005222 <ai_platform_network_process+0x402>
 8004fb8:	3204      	adds	r2, #4
 8004fba:	4615      	mov	r5, r2
 8004fbc:	2700      	movs	r7, #0
 8004fbe:	429f      	cmp	r7, r3
 8004fc0:	f080 808c 	bcs.w	80050dc <ai_platform_network_process+0x2bc>
 8004fc4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8087 	beq.w	80050dc <ai_platform_network_process+0x2bc>
 8004fce:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8004fd2:	2e00      	cmp	r6, #0
 8004fd4:	f000 8082 	beq.w	80050dc <ai_platform_network_process+0x2bc>
 8004fd8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8004fe2:	d067      	beq.n	80050b4 <ai_platform_network_process+0x294>
 8004fe4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8004fe8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8004fec:	69b0      	ldr	r0, [r6, #24]
 8004fee:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8004ff2:	6841      	ldr	r1, [r0, #4]
 8004ff4:	fb0b f30e 	mul.w	r3, fp, lr
 8004ff8:	fb0c f303 	mul.w	r3, ip, r3
 8004ffc:	4299      	cmp	r1, r3
 8004ffe:	f0c0 8110 	bcc.w	8005222 <ai_platform_network_process+0x402>
 8005002:	68f3      	ldr	r3, [r6, #12]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	455a      	cmp	r2, fp
 8005008:	f040 810b 	bne.w	8005222 <ai_platform_network_process+0x402>
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	4572      	cmp	r2, lr
 8005010:	f040 8107 	bne.w	8005222 <ai_platform_network_process+0x402>
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	459c      	cmp	ip, r3
 8005018:	f040 8103 	bne.w	8005222 <ai_platform_network_process+0x402>
 800501c:	6800      	ldr	r0, [r0, #0]
 800501e:	f000 fe87 	bl	8005d30 <ai_array_get_byte_size>
 8005022:	68f2      	ldr	r2, [r6, #12]
 8005024:	6973      	ldr	r3, [r6, #20]
 8005026:	68d2      	ldr	r2, [r2, #12]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	fb03 f302 	mul.w	r3, r3, r2
 800502e:	4298      	cmp	r0, r3
 8005030:	f0c0 80f7 	bcc.w	8005222 <ai_platform_network_process+0x402>
 8005034:	69b3      	ldr	r3, [r6, #24]
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	f000 fe2e 	bl	8005c98 <ai_array_to_buffer_fmt>
 800503c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8005040:	4043      	eors	r3, r0
 8005042:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005046:	d12c      	bne.n	80050a2 <ai_platform_network_process+0x282>
 8005048:	68eb      	ldr	r3, [r5, #12]
 800504a:	b313      	cbz	r3, 8005092 <ai_platform_network_process+0x272>
 800504c:	f8b5 b000 	ldrh.w	fp, [r5]
 8005050:	f1bb 0f00 	cmp.w	fp, #0
 8005054:	d016      	beq.n	8005084 <ai_platform_network_process+0x264>
 8005056:	4633      	mov	r3, r6
 8005058:	f105 020c 	add.w	r2, r5, #12
 800505c:	4629      	mov	r1, r5
 800505e:	4650      	mov	r0, sl
 8005060:	f7ff fda0 	bl	8004ba4 <_platform_network_state_setup.isra.1>
 8005064:	45d9      	cmp	r9, fp
 8005066:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800506a:	bf38      	it	cc
 800506c:	46d9      	movcc	r9, fp
 800506e:	3701      	adds	r7, #1
 8005070:	3518      	adds	r5, #24
 8005072:	e7a4      	b.n	8004fbe <ai_platform_network_process+0x19e>
 8005074:	f104 0010 	add.w	r0, r4, #16
 8005078:	2230      	movs	r2, #48	; 0x30
 800507a:	2111      	movs	r1, #17
 800507c:	f000 f8dc 	bl	8005238 <core_set_error>
 8005080:	46b3      	mov	fp, r6
 8005082:	e755      	b.n	8004f30 <ai_platform_network_process+0x110>
 8005084:	f104 0010 	add.w	r0, r4, #16
 8005088:	2221      	movs	r2, #33	; 0x21
 800508a:	2113      	movs	r1, #19
 800508c:	f000 f8d4 	bl	8005238 <core_set_error>
 8005090:	e74e      	b.n	8004f30 <ai_platform_network_process+0x110>
 8005092:	f104 0010 	add.w	r0, r4, #16
 8005096:	2217      	movs	r2, #23
 8005098:	2113      	movs	r1, #19
 800509a:	469b      	mov	fp, r3
 800509c:	f000 f8cc 	bl	8005238 <core_set_error>
 80050a0:	e746      	b.n	8004f30 <ai_platform_network_process+0x110>
 80050a2:	f104 0010 	add.w	r0, r4, #16
 80050a6:	2219      	movs	r2, #25
 80050a8:	2113      	movs	r1, #19
 80050aa:	f000 f8c5 	bl	8005238 <core_set_error>
 80050ae:	f04f 0b00 	mov.w	fp, #0
 80050b2:	e73d      	b.n	8004f30 <ai_platform_network_process+0x110>
 80050b4:	f104 0010 	add.w	r0, r4, #16
 80050b8:	2217      	movs	r2, #23
 80050ba:	2113      	movs	r1, #19
 80050bc:	f000 f8bc 	bl	8005238 <core_set_error>
 80050c0:	46d3      	mov	fp, sl
 80050c2:	e735      	b.n	8004f30 <ai_platform_network_process+0x110>
 80050c4:	a1c00100 	.word	0xa1c00100
 80050c8:	e0002000 	.word	0xe0002000
 80050cc:	40023008 	.word	0x40023008
 80050d0:	40023000 	.word	0x40023000
 80050d4:	f407a5c2 	.word	0xf407a5c2
 80050d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80050dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80050e0:	f8a4 9014 	strh.w	r9, [r4, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8099 	beq.w	800521c <ai_platform_network_process+0x3fc>
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80050ee:	f240 8093 	bls.w	8005218 <ai_platform_network_process+0x3f8>
 80050f2:	f105 070c 	add.w	r7, r5, #12
 80050f6:	8ae0      	ldrh	r0, [r4, #22]
 80050f8:	8aa3      	ldrh	r3, [r4, #20]
 80050fa:	4283      	cmp	r3, r0
 80050fc:	d977      	bls.n	80051ee <ai_platform_network_process+0x3ce>
 80050fe:	46a3      	mov	fp, r4
 8005100:	2d00      	cmp	r5, #0
 8005102:	d032      	beq.n	800516a <ai_platform_network_process+0x34a>
 8005104:	882b      	ldrh	r3, [r5, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d02f      	beq.n	800516a <ai_platform_network_process+0x34a>
 800510a:	686b      	ldr	r3, [r5, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d02c      	beq.n	800516a <ai_platform_network_process+0x34a>
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f04f 0800 	mov.w	r8, #0
 8005116:	b343      	cbz	r3, 800516a <ai_platform_network_process+0x34a>
 8005118:	68a9      	ldr	r1, [r5, #8]
 800511a:	699a      	ldr	r2, [r3, #24]
 800511c:	f8d1 a000 	ldr.w	sl, [r1]
 8005120:	6814      	ldr	r4, [r2, #0]
 8005122:	6890      	ldr	r0, [r2, #8]
 8005124:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005128:	eb0a 0609 	add.w	r6, sl, r9
 800512c:	00a4      	lsls	r4, r4, #2
 800512e:	6871      	ldr	r1, [r6, #4]
 8005130:	d45f      	bmi.n	80051f2 <ai_platform_network_process+0x3d2>
 8005132:	68d4      	ldr	r4, [r2, #12]
 8005134:	1b00      	subs	r0, r0, r4
 8005136:	4401      	add	r1, r0
 8005138:	6091      	str	r1, [r2, #8]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	6872      	ldr	r2, [r6, #4]
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005144:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005148:	440b      	add	r3, r1
 800514a:	4293      	cmp	r3, r2
 800514c:	bf24      	itt	cs
 800514e:	68f3      	ldrcs	r3, [r6, #12]
 8005150:	1ad3      	subcs	r3, r2, r3
 8005152:	6073      	str	r3, [r6, #4]
 8005154:	882b      	ldrh	r3, [r5, #0]
 8005156:	f108 0801 	add.w	r8, r8, #1
 800515a:	4598      	cmp	r8, r3
 800515c:	d205      	bcs.n	800516a <ai_platform_network_process+0x34a>
 800515e:	686b      	ldr	r3, [r5, #4]
 8005160:	b11b      	cbz	r3, 800516a <ai_platform_network_process+0x34a>
 8005162:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1d6      	bne.n	8005118 <ai_platform_network_process+0x2f8>
 800516a:	4658      	mov	r0, fp
 800516c:	f000 fd5a 	bl	8005c24 <ai_layers_forward_all>
 8005170:	2f00      	cmp	r7, #0
 8005172:	d032      	beq.n	80051da <ai_platform_network_process+0x3ba>
 8005174:	883b      	ldrh	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d02f      	beq.n	80051da <ai_platform_network_process+0x3ba>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	b36b      	cbz	r3, 80051da <ai_platform_network_process+0x3ba>
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	b358      	cbz	r0, 80051da <ai_platform_network_process+0x3ba>
 8005182:	f04f 0800 	mov.w	r8, #0
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6981      	ldr	r1, [r0, #24]
 800518a:	f8d3 a000 	ldr.w	sl, [r3]
 800518e:	680c      	ldr	r4, [r1, #0]
 8005190:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005194:	eb0a 0609 	add.w	r6, sl, r9
 8005198:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800519c:	00a4      	lsls	r4, r4, #2
 800519e:	eb0c 0302 	add.w	r3, ip, r2
 80051a2:	d42a      	bmi.n	80051fa <ai_platform_network_process+0x3da>
 80051a4:	f85a 2009 	ldr.w	r2, [sl, r9]
 80051a8:	4293      	cmp	r3, r2
 80051aa:	bf24      	itt	cs
 80051ac:	68f3      	ldrcs	r3, [r6, #12]
 80051ae:	1ad3      	subcs	r3, r2, r3
 80051b0:	6073      	str	r3, [r6, #4]
 80051b2:	6981      	ldr	r1, [r0, #24]
 80051b4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80051b8:	1b12      	subs	r2, r2, r4
 80051ba:	4413      	add	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]
 80051be:	6983      	ldr	r3, [r0, #24]
 80051c0:	6872      	ldr	r2, [r6, #4]
 80051c2:	60da      	str	r2, [r3, #12]
 80051c4:	883b      	ldrh	r3, [r7, #0]
 80051c6:	f108 0801 	add.w	r8, r8, #1
 80051ca:	4598      	cmp	r8, r3
 80051cc:	d205      	bcs.n	80051da <ai_platform_network_process+0x3ba>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	b11b      	cbz	r3, 80051da <ai_platform_network_process+0x3ba>
 80051d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d1d5      	bne.n	8005186 <ai_platform_network_process+0x366>
 80051da:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80051de:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80051e2:	3001      	adds	r0, #1
 80051e4:	b280      	uxth	r0, r0
 80051e6:	4283      	cmp	r3, r0
 80051e8:	f8ab 0016 	strh.w	r0, [fp, #22]
 80051ec:	d888      	bhi.n	8005100 <ai_platform_network_process+0x2e0>
 80051ee:	4683      	mov	fp, r0
 80051f0:	e69e      	b.n	8004f30 <ai_platform_network_process+0x110>
 80051f2:	68b2      	ldr	r2, [r6, #8]
 80051f4:	f000 fdf0 	bl	8005dd8 <memcpy>
 80051f8:	e7a2      	b.n	8005140 <ai_platform_network_process+0x320>
 80051fa:	6889      	ldr	r1, [r1, #8]
 80051fc:	4660      	mov	r0, ip
 80051fe:	f000 fdeb 	bl	8005dd8 <memcpy>
 8005202:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005206:	f85a 2009 	ldr.w	r2, [sl, r9]
 800520a:	440b      	add	r3, r1
 800520c:	4293      	cmp	r3, r2
 800520e:	bf24      	itt	cs
 8005210:	68f3      	ldrcs	r3, [r6, #12]
 8005212:	1ad3      	subcs	r3, r2, r3
 8005214:	6073      	str	r3, [r6, #4]
 8005216:	e7d5      	b.n	80051c4 <ai_platform_network_process+0x3a4>
 8005218:	2700      	movs	r7, #0
 800521a:	e76c      	b.n	80050f6 <ai_platform_network_process+0x2d6>
 800521c:	461d      	mov	r5, r3
 800521e:	461f      	mov	r7, r3
 8005220:	e769      	b.n	80050f6 <ai_platform_network_process+0x2d6>
 8005222:	f104 0010 	add.w	r0, r4, #16
 8005226:	2218      	movs	r2, #24
 8005228:	2113      	movs	r1, #19
 800522a:	f000 f805 	bl	8005238 <core_set_error>
 800522e:	f04f 0b00 	mov.w	fp, #0
 8005232:	e67d      	b.n	8004f30 <ai_platform_network_process+0x110>

08005234 <core_init>:
 8005234:	2001      	movs	r0, #1
 8005236:	4770      	bx	lr

08005238 <core_set_error>:
 8005238:	7803      	ldrb	r3, [r0, #0]
 800523a:	b933      	cbnz	r3, 800524a <core_set_error+0x12>
 800523c:	7001      	strb	r1, [r0, #0]
 800523e:	6803      	ldr	r3, [r0, #0]
 8005240:	f362 231f 	bfi	r3, r2, #8, #24
 8005244:	6003      	str	r3, [r0, #0]
 8005246:	2001      	movs	r0, #1
 8005248:	4770      	bx	lr
 800524a:	2000      	movs	r0, #0
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop

08005250 <ai_dict8_dot_array_f32>:
 8005250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005254:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005258:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800525c:	f000 80c0 	beq.w	80053e0 <ai_dict8_dot_array_f32+0x190>
 8005260:	f101 0408 	add.w	r4, r1, #8
 8005264:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005268:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80053e8 <ai_dict8_dot_array_f32+0x198>
 800526c:	eb04 0e09 	add.w	lr, r4, r9
 8005270:	f103 0520 	add.w	r5, r3, #32
 8005274:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8005278:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800527c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8005280:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8005284:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8005288:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800528c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8005290:	ed55 3a04 	vldr	s7, [r5, #-16]
 8005294:	ed55 4a03 	vldr	s9, [r5, #-12]
 8005298:	ed55 5a02 	vldr	s11, [r5, #-8]
 800529c:	ed55 6a01 	vldr	s13, [r5, #-4]
 80052a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80052a4:	edd6 7a00 	vldr	s15, [r6]
 80052a8:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 80052ac:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80052b0:	ee67 7a83 	vmul.f32	s15, s15, s6
 80052b4:	ed9a 3a00 	vldr	s6, [sl]
 80052b8:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80052bc:	eee3 7a05 	vfma.f32	s15, s6, s10
 80052c0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80052c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80052c8:	ed97 3a00 	vldr	s6, [r7]
 80052cc:	ed96 5a00 	vldr	s10, [r6]
 80052d0:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80052d4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80052d8:	eee3 7a04 	vfma.f32	s15, s6, s8
 80052dc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80052e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80052e4:	ed9a 3a00 	vldr	s6, [sl]
 80052e8:	ed96 4a00 	vldr	s8, [r6]
 80052ec:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80052f0:	eee5 7a06 	vfma.f32	s15, s10, s12
 80052f4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80052f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80052fc:	ed97 5a00 	vldr	s10, [r7]
 8005300:	ed96 6a00 	vldr	s12, [r6]
 8005304:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005308:	3408      	adds	r4, #8
 800530a:	45a6      	cmp	lr, r4
 800530c:	f105 0520 	add.w	r5, r5, #32
 8005310:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005314:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005318:	eee6 7a26 	vfma.f32	s15, s12, s13
 800531c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005320:	d1a8      	bne.n	8005274 <ai_dict8_dot_array_f32+0x24>
 8005322:	4449      	add	r1, r9
 8005324:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005328:	f01c 0c07 	ands.w	ip, ip, #7
 800532c:	d050      	beq.n	80053d0 <ai_dict8_dot_array_f32+0x180>
 800532e:	780c      	ldrb	r4, [r1, #0]
 8005330:	edd3 6a00 	vldr	s13, [r3]
 8005334:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005338:	edd4 7a00 	vldr	s15, [r4]
 800533c:	f1bc 0f01 	cmp.w	ip, #1
 8005340:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005344:	d044      	beq.n	80053d0 <ai_dict8_dot_array_f32+0x180>
 8005346:	784c      	ldrb	r4, [r1, #1]
 8005348:	edd3 6a01 	vldr	s13, [r3, #4]
 800534c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005350:	edd4 7a00 	vldr	s15, [r4]
 8005354:	f1bc 0f02 	cmp.w	ip, #2
 8005358:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800535c:	d038      	beq.n	80053d0 <ai_dict8_dot_array_f32+0x180>
 800535e:	788c      	ldrb	r4, [r1, #2]
 8005360:	edd3 6a02 	vldr	s13, [r3, #8]
 8005364:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005368:	edd4 7a00 	vldr	s15, [r4]
 800536c:	f1bc 0f03 	cmp.w	ip, #3
 8005370:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005374:	d02c      	beq.n	80053d0 <ai_dict8_dot_array_f32+0x180>
 8005376:	78cc      	ldrb	r4, [r1, #3]
 8005378:	edd3 6a03 	vldr	s13, [r3, #12]
 800537c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005380:	edd4 7a00 	vldr	s15, [r4]
 8005384:	f1bc 0f04 	cmp.w	ip, #4
 8005388:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800538c:	d020      	beq.n	80053d0 <ai_dict8_dot_array_f32+0x180>
 800538e:	790c      	ldrb	r4, [r1, #4]
 8005390:	edd3 6a04 	vldr	s13, [r3, #16]
 8005394:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005398:	edd4 7a00 	vldr	s15, [r4]
 800539c:	f1bc 0f05 	cmp.w	ip, #5
 80053a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053a4:	d014      	beq.n	80053d0 <ai_dict8_dot_array_f32+0x180>
 80053a6:	794c      	ldrb	r4, [r1, #5]
 80053a8:	edd3 6a05 	vldr	s13, [r3, #20]
 80053ac:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80053b0:	edd4 7a00 	vldr	s15, [r4]
 80053b4:	f1bc 0f06 	cmp.w	ip, #6
 80053b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053bc:	d008      	beq.n	80053d0 <ai_dict8_dot_array_f32+0x180>
 80053be:	7989      	ldrb	r1, [r1, #6]
 80053c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80053c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80053c8:	edd2 6a00 	vldr	s13, [r2]
 80053cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80053d0:	edd0 7a00 	vldr	s15, [r0]
 80053d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d8:	ed80 7a00 	vstr	s14, [r0]
 80053dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80053e8 <ai_dict8_dot_array_f32+0x198>
 80053e4:	e7a0      	b.n	8005328 <ai_dict8_dot_array_f32+0xd8>
 80053e6:	bf00      	nop
 80053e8:	00000000 	.word	0x00000000

080053ec <ai_dict4_dot_array_f32>:
 80053ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80053f2:	f027 0c01 	bic.w	ip, r7, #1
 80053f6:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80053fa:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80053fe:	f000 80ae 	beq.w	800555e <ai_dict4_dot_array_f32+0x172>
 8005402:	1d0d      	adds	r5, r1, #4
 8005404:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8005408:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005564 <ai_dict4_dot_array_f32+0x178>
 800540c:	eb05 0e09 	add.w	lr, r5, r9
 8005410:	f103 0420 	add.w	r4, r3, #32
 8005414:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8005418:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800541c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8005420:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8005424:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8005428:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800542c:	ed14 5a04 	vldr	s10, [r4, #-16]
 8005430:	ed54 5a03 	vldr	s11, [r4, #-12]
 8005434:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005438:	ed54 6a01 	vldr	s13, [r4, #-4]
 800543c:	f006 0a0f 	and.w	sl, r6, #15
 8005440:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005444:	edda 7a00 	vldr	s15, [sl]
 8005448:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800544c:	0936      	lsrs	r6, r6, #4
 800544e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005452:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005456:	ed96 3a00 	vldr	s6, [r6]
 800545a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800545e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005462:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005466:	f00b 0b0f 	and.w	fp, fp, #15
 800546a:	edd6 3a00 	vldr	s7, [r6]
 800546e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8005472:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005476:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800547a:	3504      	adds	r5, #4
 800547c:	ed9b 4a00 	vldr	s8, [fp]
 8005480:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8005484:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005488:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800548c:	f00a 0a0f 	and.w	sl, sl, #15
 8005490:	eddb 4a00 	vldr	s9, [fp]
 8005494:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005498:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800549c:	45ae      	cmp	lr, r5
 800549e:	ed9a 5a00 	vldr	s10, [sl]
 80054a2:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80054a6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80054aa:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80054ae:	f006 060f 	and.w	r6, r6, #15
 80054b2:	edda 5a00 	vldr	s11, [sl]
 80054b6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80054ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80054be:	f104 0420 	add.w	r4, r4, #32
 80054c2:	ed96 6a00 	vldr	s12, [r6]
 80054c6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80054ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054ce:	d1a1      	bne.n	8005414 <ai_dict4_dot_array_f32+0x28>
 80054d0:	4449      	add	r1, r9
 80054d2:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80054d6:	459c      	cmp	ip, r3
 80054d8:	d92d      	bls.n	8005536 <ai_dict4_dot_array_f32+0x14a>
 80054da:	f10c 0c07 	add.w	ip, ip, #7
 80054de:	f103 0508 	add.w	r5, r3, #8
 80054e2:	ebac 0c05 	sub.w	ip, ip, r5
 80054e6:	f02c 0407 	bic.w	r4, ip, #7
 80054ea:	f103 0810 	add.w	r8, r3, #16
 80054ee:	44a0      	add	r8, r4
 80054f0:	f101 3eff 	add.w	lr, r1, #4294967295
 80054f4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80054f8:	ed15 6a01 	vldr	s12, [r5, #-4]
 80054fc:	ed55 6a02 	vldr	s13, [r5, #-8]
 8005500:	f004 060f 	and.w	r6, r4, #15
 8005504:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005508:	0924      	lsrs	r4, r4, #4
 800550a:	edd6 7a00 	vldr	s15, [r6]
 800550e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005512:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005516:	ed94 6a00 	vldr	s12, [r4]
 800551a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800551e:	3508      	adds	r5, #8
 8005520:	45a8      	cmp	r8, r5
 8005522:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005526:	d1e5      	bne.n	80054f4 <ai_dict4_dot_array_f32+0x108>
 8005528:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800552c:	f10c 0c01 	add.w	ip, ip, #1
 8005530:	4461      	add	r1, ip
 8005532:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8005536:	07fc      	lsls	r4, r7, #31
 8005538:	d509      	bpl.n	800554e <ai_dict4_dot_array_f32+0x162>
 800553a:	7809      	ldrb	r1, [r1, #0]
 800553c:	edd3 7a00 	vldr	s15, [r3]
 8005540:	090b      	lsrs	r3, r1, #4
 8005542:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005546:	edd2 6a00 	vldr	s13, [r2]
 800554a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800554e:	edd0 7a00 	vldr	s15, [r0]
 8005552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005556:	ed80 7a00 	vstr	s14, [r0]
 800555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005564 <ai_dict4_dot_array_f32+0x178>
 8005562:	e7b8      	b.n	80054d6 <ai_dict4_dot_array_f32+0xea>
 8005564:	00000000 	.word	0x00000000

08005568 <forward_dense>:
 8005568:	6942      	ldr	r2, [r0, #20]
 800556a:	8813      	ldrh	r3, [r2, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 81ca 	beq.w	8005906 <forward_dense+0x39e>
 8005572:	6852      	ldr	r2, [r2, #4]
 8005574:	6850      	ldr	r0, [r2, #4]
 8005576:	b100      	cbz	r0, 800557a <forward_dense+0x12>
 8005578:	6800      	ldr	r0, [r0, #0]
 800557a:	2b01      	cmp	r3, #1
 800557c:	f240 81c0 	bls.w	8005900 <forward_dense+0x398>
 8005580:	6911      	ldr	r1, [r2, #16]
 8005582:	b101      	cbz	r1, 8005586 <forward_dense+0x1e>
 8005584:	6809      	ldr	r1, [r1, #0]
 8005586:	2b02      	cmp	r3, #2
 8005588:	f000 81bf 	beq.w	800590a <forward_dense+0x3a2>
 800558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005590:	ed2d 8b10 	vpush	{d8-d15}
 8005594:	69d3      	ldr	r3, [r2, #28]
 8005596:	b091      	sub	sp, #68	; 0x44
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 820b 	beq.w	80059b4 <forward_dense+0x44c>
 800559e:	681c      	ldr	r4, [r3, #0]
 80055a0:	9408      	str	r4, [sp, #32]
 80055a2:	f112 0418 	adds.w	r4, r2, #24
 80055a6:	f000 81df 	beq.w	8005968 <forward_dense+0x400>
 80055aa:	8b12      	ldrh	r2, [r2, #24]
 80055ac:	2a01      	cmp	r2, #1
 80055ae:	f240 81fe 	bls.w	80059ae <forward_dense+0x446>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 81da 	beq.w	800596c <forward_dense+0x404>
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	9306      	str	r3, [sp, #24]
 80055bc:	9b08      	ldr	r3, [sp, #32]
 80055be:	68cc      	ldr	r4, [r1, #12]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	68c5      	ldr	r5, [r0, #12]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80055ca:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80055ce:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 80055d2:	f3c2 5541 	ubfx	r5, r2, #21, #2
 80055d6:	fa4c f505 	asr.w	r5, ip, r5
 80055da:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80055de:	950b      	str	r5, [sp, #44]	; 0x2c
 80055e0:	2a04      	cmp	r2, #4
 80055e2:	fb07 f506 	mul.w	r5, r7, r6
 80055e6:	6864      	ldr	r4, [r4, #4]
 80055e8:	9507      	str	r5, [sp, #28]
 80055ea:	f000 81dd 	beq.w	80059a8 <forward_dense+0x440>
 80055ee:	2a08      	cmp	r2, #8
 80055f0:	f000 81da 	beq.w	80059a8 <forward_dense+0x440>
 80055f4:	f04f 0a00 	mov.w	sl, #0
 80055f8:	698a      	ldr	r2, [r1, #24]
 80055fa:	6981      	ldr	r1, [r0, #24]
 80055fc:	6890      	ldr	r0, [r2, #8]
 80055fe:	9a08      	ldr	r2, [sp, #32]
 8005600:	9004      	str	r0, [sp, #16]
 8005602:	6952      	ldr	r2, [r2, #20]
 8005604:	688f      	ldr	r7, [r1, #8]
 8005606:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800560a:	00a2      	lsls	r2, r4, #2
 800560c:	9209      	str	r2, [sp, #36]	; 0x24
 800560e:	1886      	adds	r6, r0, r2
 8005610:	9a07      	ldr	r2, [sp, #28]
 8005612:	2a00      	cmp	r2, #0
 8005614:	f000 81c3 	beq.w	800599e <forward_dense+0x436>
 8005618:	f1a8 0210 	sub.w	r2, r8, #16
 800561c:	0912      	lsrs	r2, r2, #4
 800561e:	3201      	adds	r2, #1
 8005620:	0192      	lsls	r2, r2, #6
 8005622:	920c      	str	r2, [sp, #48]	; 0x30
 8005624:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8005628:	920a      	str	r2, [sp, #40]	; 0x28
 800562a:	689d      	ldr	r5, [r3, #8]
 800562c:	9b06      	ldr	r3, [sp, #24]
 800562e:	eddf aad0 	vldr	s21, [pc, #832]	; 8005970 <forward_dense+0x408>
 8005632:	2200      	movs	r2, #0
 8005634:	9205      	str	r2, [sp, #20]
 8005636:	f008 020f 	and.w	r2, r8, #15
 800563a:	920d      	str	r2, [sp, #52]	; 0x34
 800563c:	2b00      	cmp	r3, #0
 800563e:	d043      	beq.n	80056c8 <forward_dense+0x160>
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	689c      	ldr	r4, [r3, #8]
 8005644:	9b04      	ldr	r3, [sp, #16]
 8005646:	f1ba 0f00 	cmp.w	sl, #0
 800564a:	d042      	beq.n	80056d2 <forward_dense+0x16a>
 800564c:	42b3      	cmp	r3, r6
 800564e:	d22a      	bcs.n	80056a6 <forward_dense+0x13e>
 8005650:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005652:	469b      	mov	fp, r3
 8005654:	ab0f      	add	r3, sp, #60	; 0x3c
 8005656:	9303      	str	r3, [sp, #12]
 8005658:	2a04      	cmp	r2, #4
 800565a:	4633      	mov	r3, r6
 800565c:	4646      	mov	r6, r8
 800565e:	4698      	mov	r8, r3
 8005660:	f000 8156 	beq.w	8005910 <forward_dense+0x3a8>
 8005664:	2c00      	cmp	r4, #0
 8005666:	f000 8185 	beq.w	8005974 <forward_dense+0x40c>
 800566a:	f8d4 c000 	ldr.w	ip, [r4]
 800566e:	9803      	ldr	r0, [sp, #12]
 8005670:	9600      	str	r6, [sp, #0]
 8005672:	463b      	mov	r3, r7
 8005674:	4629      	mov	r1, r5
 8005676:	4652      	mov	r2, sl
 8005678:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800567c:	f7ff fde8 	bl	8005250 <ai_dict8_dot_array_f32>
 8005680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005682:	f84b 3b04 	str.w	r3, [fp], #4
 8005686:	45c3      	cmp	fp, r8
 8005688:	f104 0404 	add.w	r4, r4, #4
 800568c:	444d      	add	r5, r9
 800568e:	d3e9      	bcc.n	8005664 <forward_dense+0xfc>
 8005690:	4643      	mov	r3, r8
 8005692:	46b0      	mov	r8, r6
 8005694:	461e      	mov	r6, r3
 8005696:	9a04      	ldr	r2, [sp, #16]
 8005698:	43d3      	mvns	r3, r2
 800569a:	4433      	add	r3, r6
 800569c:	f023 0303 	bic.w	r3, r3, #3
 80056a0:	3304      	adds	r3, #4
 80056a2:	18d3      	adds	r3, r2, r3
 80056a4:	9304      	str	r3, [sp, #16]
 80056a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056a8:	9b05      	ldr	r3, [sp, #20]
 80056aa:	4417      	add	r7, r2
 80056ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ae:	4416      	add	r6, r2
 80056b0:	9a07      	ldr	r2, [sp, #28]
 80056b2:	3301      	adds	r3, #1
 80056b4:	4293      	cmp	r3, r2
 80056b6:	9305      	str	r3, [sp, #20]
 80056b8:	f000 8171 	beq.w	800599e <forward_dense+0x436>
 80056bc:	9b08      	ldr	r3, [sp, #32]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	689d      	ldr	r5, [r3, #8]
 80056c2:	9b06      	ldr	r3, [sp, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1bb      	bne.n	8005640 <forward_dense+0xd8>
 80056c8:	461c      	mov	r4, r3
 80056ca:	9b04      	ldr	r3, [sp, #16]
 80056cc:	f1ba 0f00 	cmp.w	sl, #0
 80056d0:	d1bc      	bne.n	800564c <forward_dense+0xe4>
 80056d2:	42b3      	cmp	r3, r6
 80056d4:	d2e7      	bcs.n	80056a6 <forward_dense+0x13e>
 80056d6:	4618      	mov	r0, r3
 80056d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056da:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80056de:	eb07 0c03 	add.w	ip, r7, r3
 80056e2:	469e      	mov	lr, r3
 80056e4:	2c00      	cmp	r4, #0
 80056e6:	f000 80ff 	beq.w	80058e8 <forward_dense+0x380>
 80056ea:	f1b8 0f0f 	cmp.w	r8, #15
 80056ee:	edd4 fa00 	vldr	s31, [r4]
 80056f2:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8005970 <forward_dense+0x408>
 80056f6:	f104 0404 	add.w	r4, r4, #4
 80056fa:	f240 80fd 	bls.w	80058f8 <forward_dense+0x390>
 80056fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005702:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005706:	4641      	mov	r1, r8
 8005708:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800570c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005710:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8005714:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8005718:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800571c:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8005720:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8005724:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8005728:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800572c:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8005730:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8005734:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8005738:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800573c:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8005740:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8005744:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8005748:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800574c:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8005750:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8005754:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8005758:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800575c:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8005760:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8005764:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005768:	ed52 4a04 	vldr	s9, [r2, #-16]
 800576c:	ed12 5a03 	vldr	s10, [r2, #-12]
 8005770:	ed53 5a03 	vldr	s11, [r3, #-12]
 8005774:	ed12 6a02 	vldr	s12, [r2, #-8]
 8005778:	ed13 7a02 	vldr	s14, [r3, #-8]
 800577c:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8005780:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8005784:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005788:	3910      	subs	r1, #16
 800578a:	290f      	cmp	r1, #15
 800578c:	ed53 ea01 	vldr	s29, [r3, #-4]
 8005790:	ed12 ea01 	vldr	s28, [r2, #-4]
 8005794:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8005798:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800579c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80057a0:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80057a4:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80057a8:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80057ac:	eee9 7a89 	vfma.f32	s15, s19, s18
 80057b0:	eee8 7a88 	vfma.f32	s15, s17, s16
 80057b4:	eee0 7a20 	vfma.f32	s15, s0, s1
 80057b8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80057bc:	eee2 7a22 	vfma.f32	s15, s4, s5
 80057c0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80057c4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80057c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80057cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80057d0:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80057d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80057d8:	d896      	bhi.n	8005708 <forward_dense+0x1a0>
 80057da:	eb05 010e 	add.w	r1, r5, lr
 80057de:	465b      	mov	r3, fp
 80057e0:	4662      	mov	r2, ip
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d075      	beq.n	80058d2 <forward_dense+0x36a>
 80057e6:	ed91 7a00 	vldr	s14, [r1]
 80057ea:	edd2 7a00 	vldr	s15, [r2]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80057f4:	d06d      	beq.n	80058d2 <forward_dense+0x36a>
 80057f6:	ed91 7a01 	vldr	s14, [r1, #4]
 80057fa:	edd2 7a01 	vldr	s15, [r2, #4]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005804:	d065      	beq.n	80058d2 <forward_dense+0x36a>
 8005806:	ed91 7a02 	vldr	s14, [r1, #8]
 800580a:	edd2 7a02 	vldr	s15, [r2, #8]
 800580e:	2b03      	cmp	r3, #3
 8005810:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005814:	d05d      	beq.n	80058d2 <forward_dense+0x36a>
 8005816:	ed91 7a03 	vldr	s14, [r1, #12]
 800581a:	edd2 7a03 	vldr	s15, [r2, #12]
 800581e:	2b04      	cmp	r3, #4
 8005820:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005824:	d055      	beq.n	80058d2 <forward_dense+0x36a>
 8005826:	ed91 7a04 	vldr	s14, [r1, #16]
 800582a:	edd2 7a04 	vldr	s15, [r2, #16]
 800582e:	2b05      	cmp	r3, #5
 8005830:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005834:	d04d      	beq.n	80058d2 <forward_dense+0x36a>
 8005836:	ed91 7a05 	vldr	s14, [r1, #20]
 800583a:	edd2 7a05 	vldr	s15, [r2, #20]
 800583e:	2b06      	cmp	r3, #6
 8005840:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005844:	d045      	beq.n	80058d2 <forward_dense+0x36a>
 8005846:	ed91 7a06 	vldr	s14, [r1, #24]
 800584a:	edd2 7a06 	vldr	s15, [r2, #24]
 800584e:	2b07      	cmp	r3, #7
 8005850:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005854:	d03d      	beq.n	80058d2 <forward_dense+0x36a>
 8005856:	ed91 7a07 	vldr	s14, [r1, #28]
 800585a:	edd2 7a07 	vldr	s15, [r2, #28]
 800585e:	2b08      	cmp	r3, #8
 8005860:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005864:	d035      	beq.n	80058d2 <forward_dense+0x36a>
 8005866:	ed91 7a08 	vldr	s14, [r1, #32]
 800586a:	edd2 7a08 	vldr	s15, [r2, #32]
 800586e:	2b09      	cmp	r3, #9
 8005870:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005874:	d02d      	beq.n	80058d2 <forward_dense+0x36a>
 8005876:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800587a:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800587e:	2b0a      	cmp	r3, #10
 8005880:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005884:	d025      	beq.n	80058d2 <forward_dense+0x36a>
 8005886:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800588a:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800588e:	2b0b      	cmp	r3, #11
 8005890:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005894:	d01d      	beq.n	80058d2 <forward_dense+0x36a>
 8005896:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800589a:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80058a4:	d015      	beq.n	80058d2 <forward_dense+0x36a>
 80058a6:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80058aa:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80058ae:	2b0d      	cmp	r3, #13
 80058b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80058b4:	d00d      	beq.n	80058d2 <forward_dense+0x36a>
 80058b6:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80058ba:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80058be:	2b0e      	cmp	r3, #14
 80058c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80058c4:	d005      	beq.n	80058d2 <forward_dense+0x36a>
 80058c6:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80058ca:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80058ce:	eee7 6a27 	vfma.f32	s13, s14, s15
 80058d2:	444d      	add	r5, r9
 80058d4:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80058d8:	ece0 6a01 	vstmia	r0!, {s13}
 80058dc:	42b0      	cmp	r0, r6
 80058de:	f4bf aeda 	bcs.w	8005696 <forward_dense+0x12e>
 80058e2:	2c00      	cmp	r4, #0
 80058e4:	f47f af01 	bne.w	80056ea <forward_dense+0x182>
 80058e8:	f1b8 0f0f 	cmp.w	r8, #15
 80058ec:	eef0 fa6a 	vmov.f32	s31, s21
 80058f0:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005970 <forward_dense+0x408>
 80058f4:	f63f af03 	bhi.w	80056fe <forward_dense+0x196>
 80058f8:	4643      	mov	r3, r8
 80058fa:	4629      	mov	r1, r5
 80058fc:	463a      	mov	r2, r7
 80058fe:	e770      	b.n	80057e2 <forward_dense+0x27a>
 8005900:	2300      	movs	r3, #0
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	deff      	udf	#255	; 0xff
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	deff      	udf	#255	; 0xff
 800590a:	2300      	movs	r3, #0
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	deff      	udf	#255	; 0xff
 8005910:	b1ac      	cbz	r4, 800593e <forward_dense+0x3d6>
 8005912:	f8d4 c000 	ldr.w	ip, [r4]
 8005916:	9803      	ldr	r0, [sp, #12]
 8005918:	9600      	str	r6, [sp, #0]
 800591a:	463b      	mov	r3, r7
 800591c:	4629      	mov	r1, r5
 800591e:	4652      	mov	r2, sl
 8005920:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005924:	f7ff fd62 	bl	80053ec <ai_dict4_dot_array_f32>
 8005928:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800592a:	f84b 3b04 	str.w	r3, [fp], #4
 800592e:	45c3      	cmp	fp, r8
 8005930:	f104 0404 	add.w	r4, r4, #4
 8005934:	444d      	add	r5, r9
 8005936:	f4bf aeab 	bcs.w	8005690 <forward_dense+0x128>
 800593a:	2c00      	cmp	r4, #0
 800593c:	d1e9      	bne.n	8005912 <forward_dense+0x3aa>
 800593e:	4634      	mov	r4, r6
 8005940:	4646      	mov	r6, r8
 8005942:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005946:	9400      	str	r4, [sp, #0]
 8005948:	463b      	mov	r3, r7
 800594a:	4629      	mov	r1, r5
 800594c:	4652      	mov	r2, sl
 800594e:	4640      	mov	r0, r8
 8005950:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005954:	f7ff fd4a 	bl	80053ec <ai_dict4_dot_array_f32>
 8005958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800595a:	f84b 3b04 	str.w	r3, [fp], #4
 800595e:	45b3      	cmp	fp, r6
 8005960:	444d      	add	r5, r9
 8005962:	d3f0      	bcc.n	8005946 <forward_dense+0x3de>
 8005964:	46a0      	mov	r8, r4
 8005966:	e696      	b.n	8005696 <forward_dense+0x12e>
 8005968:	9406      	str	r4, [sp, #24]
 800596a:	e627      	b.n	80055bc <forward_dense+0x54>
 800596c:	9306      	str	r3, [sp, #24]
 800596e:	e625      	b.n	80055bc <forward_dense+0x54>
 8005970:	00000000 	.word	0x00000000
 8005974:	4634      	mov	r4, r6
 8005976:	4646      	mov	r6, r8
 8005978:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800597c:	9400      	str	r4, [sp, #0]
 800597e:	463b      	mov	r3, r7
 8005980:	4629      	mov	r1, r5
 8005982:	4652      	mov	r2, sl
 8005984:	4640      	mov	r0, r8
 8005986:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800598a:	f7ff fc61 	bl	8005250 <ai_dict8_dot_array_f32>
 800598e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005990:	f84b 3b04 	str.w	r3, [fp], #4
 8005994:	45b3      	cmp	fp, r6
 8005996:	444d      	add	r5, r9
 8005998:	d3f0      	bcc.n	800597c <forward_dense+0x414>
 800599a:	46a0      	mov	r8, r4
 800599c:	e67b      	b.n	8005696 <forward_dense+0x12e>
 800599e:	b011      	add	sp, #68	; 0x44
 80059a0:	ecbd 8b10 	vpop	{d8-d15}
 80059a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80059ac:	e624      	b.n	80055f8 <forward_dense+0x90>
 80059ae:	2300      	movs	r3, #0
 80059b0:	9306      	str	r3, [sp, #24]
 80059b2:	e603      	b.n	80055bc <forward_dense+0x54>
 80059b4:	9308      	str	r3, [sp, #32]
 80059b6:	e5f4      	b.n	80055a2 <forward_dense+0x3a>

080059b8 <nl_func_relu_generic_array_f32>:
 80059b8:	b430      	push	{r4, r5}
 80059ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80059be:	6880      	ldr	r0, [r0, #8]
 80059c0:	688c      	ldr	r4, [r1, #8]
 80059c2:	ed93 7a00 	vldr	s14, [r3]
 80059c6:	ed93 6a01 	vldr	s12, [r3, #4]
 80059ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80059ce:	3a01      	subs	r2, #1
 80059d0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80059d4:	0092      	lsls	r2, r2, #2
 80059d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059da:	4410      	add	r0, r2
 80059dc:	4422      	add	r2, r4
 80059de:	d421      	bmi.n	8005a24 <nl_func_relu_generic_array_f32+0x6c>
 80059e0:	42a2      	cmp	r2, r4
 80059e2:	d33d      	bcc.n	8005a60 <nl_func_relu_generic_array_f32+0xa8>
 80059e4:	1d13      	adds	r3, r2, #4
 80059e6:	1d02      	adds	r2, r0, #4
 80059e8:	e010      	b.n	8005a0c <nl_func_relu_generic_array_f32+0x54>
 80059ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80059f6:	dd01      	ble.n	80059fc <nl_func_relu_generic_array_f32+0x44>
 80059f8:	ee65 7a86 	vmul.f32	s15, s11, s12
 80059fc:	ed62 7a01 	vstmdb	r2!, {s15}
 8005a00:	6888      	ldr	r0, [r1, #8]
 8005a02:	f1a3 0408 	sub.w	r4, r3, #8
 8005a06:	4284      	cmp	r4, r0
 8005a08:	462b      	mov	r3, r5
 8005a0a:	d329      	bcc.n	8005a60 <nl_func_relu_generic_array_f32+0xa8>
 8005a0c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005a10:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a18:	f1a3 0504 	sub.w	r5, r3, #4
 8005a1c:	dce5      	bgt.n	80059ea <nl_func_relu_generic_array_f32+0x32>
 8005a1e:	eef0 7a66 	vmov.f32	s15, s13
 8005a22:	e7eb      	b.n	80059fc <nl_func_relu_generic_array_f32+0x44>
 8005a24:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2c:	d01a      	beq.n	8005a64 <nl_func_relu_generic_array_f32+0xac>
 8005a2e:	42a2      	cmp	r2, r4
 8005a30:	d316      	bcc.n	8005a60 <nl_func_relu_generic_array_f32+0xa8>
 8005a32:	1d13      	adds	r3, r2, #4
 8005a34:	1d02      	adds	r2, r0, #4
 8005a36:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005a3a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a42:	f1a3 0408 	sub.w	r4, r3, #8
 8005a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a4a:	f1a3 0004 	sub.w	r0, r3, #4
 8005a4e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005a52:	4623      	mov	r3, r4
 8005a54:	d51e      	bpl.n	8005a94 <nl_func_relu_generic_array_f32+0xdc>
 8005a56:	ed62 6a01 	vstmdb	r2!, {s13}
 8005a5a:	688b      	ldr	r3, [r1, #8]
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	d91e      	bls.n	8005a9e <nl_func_relu_generic_array_f32+0xe6>
 8005a60:	bc30      	pop	{r4, r5}
 8005a62:	4770      	bx	lr
 8005a64:	42a2      	cmp	r2, r4
 8005a66:	d3fb      	bcc.n	8005a60 <nl_func_relu_generic_array_f32+0xa8>
 8005a68:	1d13      	adds	r3, r2, #4
 8005a6a:	2500      	movs	r5, #0
 8005a6c:	1d02      	adds	r2, r0, #4
 8005a6e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a76:	f1a3 0408 	sub.w	r4, r3, #8
 8005a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7e:	f1a3 0004 	sub.w	r0, r3, #4
 8005a82:	4623      	mov	r3, r4
 8005a84:	d80d      	bhi.n	8005aa2 <nl_func_relu_generic_array_f32+0xea>
 8005a86:	ed62 7a01 	vstmdb	r2!, {s15}
 8005a8a:	688b      	ldr	r3, [r1, #8]
 8005a8c:	42a3      	cmp	r3, r4
 8005a8e:	d8e7      	bhi.n	8005a60 <nl_func_relu_generic_array_f32+0xa8>
 8005a90:	4603      	mov	r3, r0
 8005a92:	e7ec      	b.n	8005a6e <nl_func_relu_generic_array_f32+0xb6>
 8005a94:	ed62 7a01 	vstmdb	r2!, {s15}
 8005a98:	688c      	ldr	r4, [r1, #8]
 8005a9a:	429c      	cmp	r4, r3
 8005a9c:	d8e0      	bhi.n	8005a60 <nl_func_relu_generic_array_f32+0xa8>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	e7c9      	b.n	8005a36 <nl_func_relu_generic_array_f32+0x7e>
 8005aa2:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005aa6:	688c      	ldr	r4, [r1, #8]
 8005aa8:	429c      	cmp	r4, r3
 8005aaa:	d8d9      	bhi.n	8005a60 <nl_func_relu_generic_array_f32+0xa8>
 8005aac:	4603      	mov	r3, r0
 8005aae:	e7de      	b.n	8005a6e <nl_func_relu_generic_array_f32+0xb6>

08005ab0 <forward_relu>:
 8005ab0:	6942      	ldr	r2, [r0, #20]
 8005ab2:	8813      	ldrh	r3, [r2, #0]
 8005ab4:	b33b      	cbz	r3, 8005b06 <forward_relu+0x56>
 8005ab6:	b470      	push	{r4, r5, r6}
 8005ab8:	6852      	ldr	r2, [r2, #4]
 8005aba:	6856      	ldr	r6, [r2, #4]
 8005abc:	b106      	cbz	r6, 8005ac0 <forward_relu+0x10>
 8005abe:	6836      	ldr	r6, [r6, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d91d      	bls.n	8005b00 <forward_relu+0x50>
 8005ac4:	6913      	ldr	r3, [r2, #16]
 8005ac6:	b103      	cbz	r3, 8005aca <forward_relu+0x1a>
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6982      	ldr	r2, [r0, #24]
 8005acc:	68b4      	ldr	r4, [r6, #8]
 8005ace:	6998      	ldr	r0, [r3, #24]
 8005ad0:	69b1      	ldr	r1, [r6, #24]
 8005ad2:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8005ad6:	2a00      	cmp	r2, #0
 8005ad8:	d041      	beq.n	8005b5e <forward_relu+0xae>
 8005ada:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8005ade:	2d01      	cmp	r5, #1
 8005ae0:	d013      	beq.n	8005b0a <forward_relu+0x5a>
 8005ae2:	2c00      	cmp	r4, #0
 8005ae4:	d06f      	beq.n	8005bc6 <forward_relu+0x116>
 8005ae6:	68f6      	ldr	r6, [r6, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005aee:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005af2:	42a6      	cmp	r6, r4
 8005af4:	fb05 f202 	mul.w	r2, r5, r2
 8005af8:	d1f9      	bne.n	8005aee <forward_relu+0x3e>
 8005afa:	bc70      	pop	{r4, r5, r6}
 8005afc:	f7ff bf5c 	b.w	80059b8 <nl_func_relu_generic_array_f32>
 8005b00:	2300      	movs	r3, #0
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	deff      	udf	#255	; 0xff
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	deff      	udf	#255	; 0xff
 8005b0a:	6880      	ldr	r0, [r0, #8]
 8005b0c:	688a      	ldr	r2, [r1, #8]
 8005b0e:	ed93 7a00 	vldr	s14, [r3]
 8005b12:	b184      	cbz	r4, 8005b36 <forward_relu+0x86>
 8005b14:	68f6      	ldr	r6, [r6, #12]
 8005b16:	462b      	mov	r3, r5
 8005b18:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005b1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b20:	42a6      	cmp	r6, r4
 8005b22:	fb05 f303 	mul.w	r3, r5, r3
 8005b26:	d1f9      	bne.n	8005b1c <forward_relu+0x6c>
 8005b28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	18d2      	adds	r2, r2, r3
 8005b32:	4418      	add	r0, r3
 8005b34:	d23d      	bcs.n	8005bb2 <forward_relu+0x102>
 8005b36:	1d13      	adds	r3, r2, #4
 8005b38:	2500      	movs	r5, #0
 8005b3a:	1d02      	adds	r2, r0, #4
 8005b3c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b48:	f1a3 0004 	sub.w	r0, r3, #4
 8005b4c:	d833      	bhi.n	8005bb6 <forward_relu+0x106>
 8005b4e:	ed62 7a01 	vstmdb	r2!, {s15}
 8005b52:	688c      	ldr	r4, [r1, #8]
 8005b54:	3b08      	subs	r3, #8
 8005b56:	429c      	cmp	r4, r3
 8005b58:	d82b      	bhi.n	8005bb2 <forward_relu+0x102>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	e7ee      	b.n	8005b3c <forward_relu+0x8c>
 8005b5e:	6880      	ldr	r0, [r0, #8]
 8005b60:	688b      	ldr	r3, [r1, #8]
 8005b62:	b184      	cbz	r4, 8005b86 <forward_relu+0xd6>
 8005b64:	68f6      	ldr	r6, [r6, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005b6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b70:	42a6      	cmp	r6, r4
 8005b72:	fb05 f202 	mul.w	r2, r5, r2
 8005b76:	d1f9      	bne.n	8005b6c <forward_relu+0xbc>
 8005b78:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005b7c:	3a01      	subs	r2, #1
 8005b7e:	0092      	lsls	r2, r2, #2
 8005b80:	189b      	adds	r3, r3, r2
 8005b82:	4410      	add	r0, r2
 8005b84:	d215      	bcs.n	8005bb2 <forward_relu+0x102>
 8005b86:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005bcc <forward_relu+0x11c>
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	3004      	adds	r0, #4
 8005b8e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005b92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9a:	bfb8      	it	lt
 8005b9c:	eef0 7a47 	vmovlt.f32	s15, s14
 8005ba0:	ed60 7a01 	vstmdb	r0!, {s15}
 8005ba4:	688c      	ldr	r4, [r1, #8]
 8005ba6:	f1a3 0208 	sub.w	r2, r3, #8
 8005baa:	4294      	cmp	r4, r2
 8005bac:	f1a3 0304 	sub.w	r3, r3, #4
 8005bb0:	d9ed      	bls.n	8005b8e <forward_relu+0xde>
 8005bb2:	bc70      	pop	{r4, r5, r6}
 8005bb4:	4770      	bx	lr
 8005bb6:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005bba:	688c      	ldr	r4, [r1, #8]
 8005bbc:	3b08      	subs	r3, #8
 8005bbe:	429c      	cmp	r4, r3
 8005bc0:	d8f7      	bhi.n	8005bb2 <forward_relu+0x102>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	e7ba      	b.n	8005b3c <forward_relu+0x8c>
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	e797      	b.n	8005afa <forward_relu+0x4a>
 8005bca:	bf00      	nop
 8005bcc:	00000000 	.word	0x00000000

08005bd0 <ai_check_custom_types>:
 8005bd0:	4b13      	ldr	r3, [pc, #76]	; (8005c20 <ai_check_custom_types+0x50>)
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	9301      	str	r3, [sp, #4]
 8005bd8:	b118      	cbz	r0, 8005be2 <ai_check_custom_types+0x12>
 8005bda:	7803      	ldrb	r3, [r0, #0]
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d002      	beq.n	8005be6 <ai_check_custom_types+0x16>
 8005be0:	2000      	movs	r0, #0
 8005be2:	b002      	add	sp, #8
 8005be4:	4770      	bx	lr
 8005be6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <ai_check_custom_types+0x28>
 8005bee:	2001      	movs	r0, #1
 8005bf0:	f080 0001 	eor.w	r0, r0, #1
 8005bf4:	b002      	add	sp, #8
 8005bf6:	4770      	bx	lr
 8005bf8:	7842      	ldrb	r2, [r0, #1]
 8005bfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	f100 0001 	add.w	r0, r0, #1
 8005c04:	d1f3      	bne.n	8005bee <ai_check_custom_types+0x1e>
 8005c06:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005c0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d1ed      	bne.n	8005bee <ai_check_custom_types+0x1e>
 8005c12:	7842      	ldrb	r2, [r0, #1]
 8005c14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d1e8      	bne.n	8005bee <ai_check_custom_types+0x1e>
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e7e7      	b.n	8005bf0 <ai_check_custom_types+0x20>
 8005c20:	08008bdc 	.word	0x08008bdc

08005c24 <ai_layers_forward_all>:
 8005c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c26:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8005c28:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	b31e      	cbz	r6, 8005c76 <ai_layers_forward_all+0x52>
 8005c2e:	b1cd      	cbz	r5, 8005c64 <ai_layers_forward_all+0x40>
 8005c30:	6545      	str	r5, [r0, #84]	; 0x54
 8005c32:	4629      	mov	r1, r5
 8005c34:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005c36:	2001      	movs	r0, #1
 8005c38:	47b0      	blx	r6
 8005c3a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005c3c:	2700      	movs	r7, #0
 8005c3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005c40:	2002      	movs	r0, #2
 8005c42:	47b0      	blx	r6
 8005c44:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005c46:	692b      	ldr	r3, [r5, #16]
 8005c48:	4628      	mov	r0, r5
 8005c4a:	4798      	blx	r3
 8005c4c:	68eb      	ldr	r3, [r5, #12]
 8005c4e:	429d      	cmp	r5, r3
 8005c50:	f04f 0003 	mov.w	r0, #3
 8005c54:	4619      	mov	r1, r3
 8005c56:	d006      	beq.n	8005c66 <ai_layers_forward_all+0x42>
 8005c58:	6563      	str	r3, [r4, #84]	; 0x54
 8005c5a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005c5c:	47b0      	blx	r6
 8005c5e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005c60:	2900      	cmp	r1, #0
 8005c62:	d1ec      	bne.n	8005c3e <ai_layers_forward_all+0x1a>
 8005c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c66:	2100      	movs	r1, #0
 8005c68:	6567      	str	r7, [r4, #84]	; 0x54
 8005c6a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005c6c:	47b0      	blx	r6
 8005c6e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005c70:	2900      	cmp	r1, #0
 8005c72:	d1e4      	bne.n	8005c3e <ai_layers_forward_all+0x1a>
 8005c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	d0f4      	beq.n	8005c64 <ai_layers_forward_all+0x40>
 8005c7a:	6545      	str	r5, [r0, #84]	; 0x54
 8005c7c:	692b      	ldr	r3, [r5, #16]
 8005c7e:	4628      	mov	r0, r5
 8005c80:	4798      	blx	r3
 8005c82:	68eb      	ldr	r3, [r5, #12]
 8005c84:	42ab      	cmp	r3, r5
 8005c86:	d004      	beq.n	8005c92 <ai_layers_forward_all+0x6e>
 8005c88:	6563      	str	r3, [r4, #84]	; 0x54
 8005c8a:	461d      	mov	r5, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1f5      	bne.n	8005c7c <ai_layers_forward_all+0x58>
 8005c90:	e7e8      	b.n	8005c64 <ai_layers_forward_all+0x40>
 8005c92:	2300      	movs	r3, #0
 8005c94:	6563      	str	r3, [r4, #84]	; 0x54
 8005c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c98 <ai_array_to_buffer_fmt>:
 8005c98:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d01f      	beq.n	8005ce0 <ai_array_to_buffer_fmt+0x48>
 8005ca0:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <ai_array_to_buffer_fmt+0x7c>)
 8005ca2:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00a      	beq.n	8005cc0 <ai_array_to_buffer_fmt+0x28>
 8005caa:	dc0d      	bgt.n	8005cc8 <ai_array_to_buffer_fmt+0x30>
 8005cac:	4a1a      	ldr	r2, [pc, #104]	; (8005d18 <ai_array_to_buffer_fmt+0x80>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d006      	beq.n	8005cc0 <ai_array_to_buffer_fmt+0x28>
 8005cb2:	dd1d      	ble.n	8005cf0 <ai_array_to_buffer_fmt+0x58>
 8005cb4:	4a19      	ldr	r2, [pc, #100]	; (8005d1c <ai_array_to_buffer_fmt+0x84>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d002      	beq.n	8005cc0 <ai_array_to_buffer_fmt+0x28>
 8005cba:	320f      	adds	r2, #15
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10d      	bne.n	8005cdc <ai_array_to_buffer_fmt+0x44>
 8005cc0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005cc4:	4318      	orrs	r0, r3
 8005cc6:	4770      	bx	lr
 8005cc8:	4a15      	ldr	r2, [pc, #84]	; (8005d20 <ai_array_to_buffer_fmt+0x88>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d0f8      	beq.n	8005cc0 <ai_array_to_buffer_fmt+0x28>
 8005cce:	dd18      	ble.n	8005d02 <ai_array_to_buffer_fmt+0x6a>
 8005cd0:	4a14      	ldr	r2, [pc, #80]	; (8005d24 <ai_array_to_buffer_fmt+0x8c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d0f4      	beq.n	8005cc0 <ai_array_to_buffer_fmt+0x28>
 8005cd6:	4a14      	ldr	r2, [pc, #80]	; (8005d28 <ai_array_to_buffer_fmt+0x90>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d0f1      	beq.n	8005cc0 <ai_array_to_buffer_fmt+0x28>
 8005cdc:	2340      	movs	r3, #64	; 0x40
 8005cde:	e7ef      	b.n	8005cc0 <ai_array_to_buffer_fmt+0x28>
 8005ce0:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <ai_array_to_buffer_fmt+0x94>)
 8005ce2:	4003      	ands	r3, r0
 8005ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ce8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005cec:	4318      	orrs	r0, r3
 8005cee:	4770      	bx	lr
 8005cf0:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d0e3      	beq.n	8005cc0 <ai_array_to_buffer_fmt+0x28>
 8005cf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d0df      	beq.n	8005cc0 <ai_array_to_buffer_fmt+0x28>
 8005d00:	e7ec      	b.n	8005cdc <ai_array_to_buffer_fmt+0x44>
 8005d02:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d0da      	beq.n	8005cc0 <ai_array_to_buffer_fmt+0x28>
 8005d0a:	3207      	adds	r2, #7
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d0d7      	beq.n	8005cc0 <ai_array_to_buffer_fmt+0x28>
 8005d10:	e7e4      	b.n	8005cdc <ai_array_to_buffer_fmt+0x44>
 8005d12:	bf00      	nop
 8005d14:	00840040 	.word	0x00840040
 8005d18:	00040447 	.word	0x00040447
 8005d1c:	00040840 	.word	0x00040840
 8005d20:	00840840 	.word	0x00840840
 8005d24:	0084084f 	.word	0x0084084f
 8005d28:	01821040 	.word	0x01821040
 8005d2c:	00803fff 	.word	0x00803fff

08005d30 <ai_array_get_byte_size>:
 8005d30:	b1c1      	cbz	r1, 8005d64 <ai_array_get_byte_size+0x34>
 8005d32:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005d36:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005d3a:	4413      	add	r3, r2
 8005d3c:	fb01 f103 	mul.w	r1, r1, r3
 8005d40:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8005d44:	3107      	adds	r1, #7
 8005d46:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8005d4a:	f021 0107 	bic.w	r1, r1, #7
 8005d4e:	2804      	cmp	r0, #4
 8005d50:	fa21 f102 	lsr.w	r1, r1, r2
 8005d54:	d008      	beq.n	8005d68 <ai_array_get_byte_size+0x38>
 8005d56:	2808      	cmp	r0, #8
 8005d58:	d101      	bne.n	8005d5e <ai_array_get_byte_size+0x2e>
 8005d5a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8005d5e:	3107      	adds	r1, #7
 8005d60:	08c8      	lsrs	r0, r1, #3
 8005d62:	4770      	bx	lr
 8005d64:	4608      	mov	r0, r1
 8005d66:	4770      	bx	lr
 8005d68:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8005d6c:	3107      	adds	r1, #7
 8005d6e:	08c8      	lsrs	r0, r1, #3
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop

08005d74 <__errno>:
 8005d74:	4b01      	ldr	r3, [pc, #4]	; (8005d7c <__errno+0x8>)
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	200005e4 	.word	0x200005e4

08005d80 <__libc_init_array>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	4d0d      	ldr	r5, [pc, #52]	; (8005db8 <__libc_init_array+0x38>)
 8005d84:	4c0d      	ldr	r4, [pc, #52]	; (8005dbc <__libc_init_array+0x3c>)
 8005d86:	1b64      	subs	r4, r4, r5
 8005d88:	10a4      	asrs	r4, r4, #2
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	42a6      	cmp	r6, r4
 8005d8e:	d109      	bne.n	8005da4 <__libc_init_array+0x24>
 8005d90:	4d0b      	ldr	r5, [pc, #44]	; (8005dc0 <__libc_init_array+0x40>)
 8005d92:	4c0c      	ldr	r4, [pc, #48]	; (8005dc4 <__libc_init_array+0x44>)
 8005d94:	f002 feb4 	bl	8008b00 <_init>
 8005d98:	1b64      	subs	r4, r4, r5
 8005d9a:	10a4      	asrs	r4, r4, #2
 8005d9c:	2600      	movs	r6, #0
 8005d9e:	42a6      	cmp	r6, r4
 8005da0:	d105      	bne.n	8005dae <__libc_init_array+0x2e>
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da8:	4798      	blx	r3
 8005daa:	3601      	adds	r6, #1
 8005dac:	e7ee      	b.n	8005d8c <__libc_init_array+0xc>
 8005dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db2:	4798      	blx	r3
 8005db4:	3601      	adds	r6, #1
 8005db6:	e7f2      	b.n	8005d9e <__libc_init_array+0x1e>
 8005db8:	0800a054 	.word	0x0800a054
 8005dbc:	0800a054 	.word	0x0800a054
 8005dc0:	0800a054 	.word	0x0800a054
 8005dc4:	0800a058 	.word	0x0800a058

08005dc8 <malloc>:
 8005dc8:	4b02      	ldr	r3, [pc, #8]	; (8005dd4 <malloc+0xc>)
 8005dca:	4601      	mov	r1, r0
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	f000 b869 	b.w	8005ea4 <_malloc_r>
 8005dd2:	bf00      	nop
 8005dd4:	200005e4 	.word	0x200005e4

08005dd8 <memcpy>:
 8005dd8:	440a      	add	r2, r1
 8005dda:	4291      	cmp	r1, r2
 8005ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005de0:	d100      	bne.n	8005de4 <memcpy+0xc>
 8005de2:	4770      	bx	lr
 8005de4:	b510      	push	{r4, lr}
 8005de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dee:	4291      	cmp	r1, r2
 8005df0:	d1f9      	bne.n	8005de6 <memcpy+0xe>
 8005df2:	bd10      	pop	{r4, pc}

08005df4 <memset>:
 8005df4:	4402      	add	r2, r0
 8005df6:	4603      	mov	r3, r0
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d100      	bne.n	8005dfe <memset+0xa>
 8005dfc:	4770      	bx	lr
 8005dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005e02:	e7f9      	b.n	8005df8 <memset+0x4>

08005e04 <_free_r>:
 8005e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e06:	2900      	cmp	r1, #0
 8005e08:	d048      	beq.n	8005e9c <_free_r+0x98>
 8005e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e0e:	9001      	str	r0, [sp, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f1a1 0404 	sub.w	r4, r1, #4
 8005e16:	bfb8      	it	lt
 8005e18:	18e4      	addlt	r4, r4, r3
 8005e1a:	f001 fbb5 	bl	8007588 <__malloc_lock>
 8005e1e:	4a20      	ldr	r2, [pc, #128]	; (8005ea0 <_free_r+0x9c>)
 8005e20:	9801      	ldr	r0, [sp, #4]
 8005e22:	6813      	ldr	r3, [r2, #0]
 8005e24:	4615      	mov	r5, r2
 8005e26:	b933      	cbnz	r3, 8005e36 <_free_r+0x32>
 8005e28:	6063      	str	r3, [r4, #4]
 8005e2a:	6014      	str	r4, [r2, #0]
 8005e2c:	b003      	add	sp, #12
 8005e2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e32:	f001 bbaf 	b.w	8007594 <__malloc_unlock>
 8005e36:	42a3      	cmp	r3, r4
 8005e38:	d90b      	bls.n	8005e52 <_free_r+0x4e>
 8005e3a:	6821      	ldr	r1, [r4, #0]
 8005e3c:	1862      	adds	r2, r4, r1
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	bf04      	itt	eq
 8005e42:	681a      	ldreq	r2, [r3, #0]
 8005e44:	685b      	ldreq	r3, [r3, #4]
 8005e46:	6063      	str	r3, [r4, #4]
 8005e48:	bf04      	itt	eq
 8005e4a:	1852      	addeq	r2, r2, r1
 8005e4c:	6022      	streq	r2, [r4, #0]
 8005e4e:	602c      	str	r4, [r5, #0]
 8005e50:	e7ec      	b.n	8005e2c <_free_r+0x28>
 8005e52:	461a      	mov	r2, r3
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	b10b      	cbz	r3, 8005e5c <_free_r+0x58>
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	d9fa      	bls.n	8005e52 <_free_r+0x4e>
 8005e5c:	6811      	ldr	r1, [r2, #0]
 8005e5e:	1855      	adds	r5, r2, r1
 8005e60:	42a5      	cmp	r5, r4
 8005e62:	d10b      	bne.n	8005e7c <_free_r+0x78>
 8005e64:	6824      	ldr	r4, [r4, #0]
 8005e66:	4421      	add	r1, r4
 8005e68:	1854      	adds	r4, r2, r1
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	6011      	str	r1, [r2, #0]
 8005e6e:	d1dd      	bne.n	8005e2c <_free_r+0x28>
 8005e70:	681c      	ldr	r4, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	6053      	str	r3, [r2, #4]
 8005e76:	4421      	add	r1, r4
 8005e78:	6011      	str	r1, [r2, #0]
 8005e7a:	e7d7      	b.n	8005e2c <_free_r+0x28>
 8005e7c:	d902      	bls.n	8005e84 <_free_r+0x80>
 8005e7e:	230c      	movs	r3, #12
 8005e80:	6003      	str	r3, [r0, #0]
 8005e82:	e7d3      	b.n	8005e2c <_free_r+0x28>
 8005e84:	6825      	ldr	r5, [r4, #0]
 8005e86:	1961      	adds	r1, r4, r5
 8005e88:	428b      	cmp	r3, r1
 8005e8a:	bf04      	itt	eq
 8005e8c:	6819      	ldreq	r1, [r3, #0]
 8005e8e:	685b      	ldreq	r3, [r3, #4]
 8005e90:	6063      	str	r3, [r4, #4]
 8005e92:	bf04      	itt	eq
 8005e94:	1949      	addeq	r1, r1, r5
 8005e96:	6021      	streq	r1, [r4, #0]
 8005e98:	6054      	str	r4, [r2, #4]
 8005e9a:	e7c7      	b.n	8005e2c <_free_r+0x28>
 8005e9c:	b003      	add	sp, #12
 8005e9e:	bd30      	pop	{r4, r5, pc}
 8005ea0:	20000850 	.word	0x20000850

08005ea4 <_malloc_r>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	1ccd      	adds	r5, r1, #3
 8005ea8:	f025 0503 	bic.w	r5, r5, #3
 8005eac:	3508      	adds	r5, #8
 8005eae:	2d0c      	cmp	r5, #12
 8005eb0:	bf38      	it	cc
 8005eb2:	250c      	movcc	r5, #12
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	db01      	blt.n	8005ebe <_malloc_r+0x1a>
 8005eba:	42a9      	cmp	r1, r5
 8005ebc:	d903      	bls.n	8005ec6 <_malloc_r+0x22>
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	6033      	str	r3, [r6, #0]
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec6:	f001 fb5f 	bl	8007588 <__malloc_lock>
 8005eca:	4921      	ldr	r1, [pc, #132]	; (8005f50 <_malloc_r+0xac>)
 8005ecc:	680a      	ldr	r2, [r1, #0]
 8005ece:	4614      	mov	r4, r2
 8005ed0:	b99c      	cbnz	r4, 8005efa <_malloc_r+0x56>
 8005ed2:	4f20      	ldr	r7, [pc, #128]	; (8005f54 <_malloc_r+0xb0>)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	b923      	cbnz	r3, 8005ee2 <_malloc_r+0x3e>
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4630      	mov	r0, r6
 8005edc:	f000 fca6 	bl	800682c <_sbrk_r>
 8005ee0:	6038      	str	r0, [r7, #0]
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f000 fca1 	bl	800682c <_sbrk_r>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	d123      	bne.n	8005f36 <_malloc_r+0x92>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	6033      	str	r3, [r6, #0]
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f001 fb4e 	bl	8007594 <__malloc_unlock>
 8005ef8:	e7e3      	b.n	8005ec2 <_malloc_r+0x1e>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	1b5b      	subs	r3, r3, r5
 8005efe:	d417      	bmi.n	8005f30 <_malloc_r+0x8c>
 8005f00:	2b0b      	cmp	r3, #11
 8005f02:	d903      	bls.n	8005f0c <_malloc_r+0x68>
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	441c      	add	r4, r3
 8005f08:	6025      	str	r5, [r4, #0]
 8005f0a:	e004      	b.n	8005f16 <_malloc_r+0x72>
 8005f0c:	6863      	ldr	r3, [r4, #4]
 8005f0e:	42a2      	cmp	r2, r4
 8005f10:	bf0c      	ite	eq
 8005f12:	600b      	streq	r3, [r1, #0]
 8005f14:	6053      	strne	r3, [r2, #4]
 8005f16:	4630      	mov	r0, r6
 8005f18:	f001 fb3c 	bl	8007594 <__malloc_unlock>
 8005f1c:	f104 000b 	add.w	r0, r4, #11
 8005f20:	1d23      	adds	r3, r4, #4
 8005f22:	f020 0007 	bic.w	r0, r0, #7
 8005f26:	1ac2      	subs	r2, r0, r3
 8005f28:	d0cc      	beq.n	8005ec4 <_malloc_r+0x20>
 8005f2a:	1a1b      	subs	r3, r3, r0
 8005f2c:	50a3      	str	r3, [r4, r2]
 8005f2e:	e7c9      	b.n	8005ec4 <_malloc_r+0x20>
 8005f30:	4622      	mov	r2, r4
 8005f32:	6864      	ldr	r4, [r4, #4]
 8005f34:	e7cc      	b.n	8005ed0 <_malloc_r+0x2c>
 8005f36:	1cc4      	adds	r4, r0, #3
 8005f38:	f024 0403 	bic.w	r4, r4, #3
 8005f3c:	42a0      	cmp	r0, r4
 8005f3e:	d0e3      	beq.n	8005f08 <_malloc_r+0x64>
 8005f40:	1a21      	subs	r1, r4, r0
 8005f42:	4630      	mov	r0, r6
 8005f44:	f000 fc72 	bl	800682c <_sbrk_r>
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d1dd      	bne.n	8005f08 <_malloc_r+0x64>
 8005f4c:	e7cf      	b.n	8005eee <_malloc_r+0x4a>
 8005f4e:	bf00      	nop
 8005f50:	20000850 	.word	0x20000850
 8005f54:	20000854 	.word	0x20000854

08005f58 <__cvt>:
 8005f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f5c:	ec55 4b10 	vmov	r4, r5, d0
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	460e      	mov	r6, r1
 8005f64:	4619      	mov	r1, r3
 8005f66:	462b      	mov	r3, r5
 8005f68:	bfbb      	ittet	lt
 8005f6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f6e:	461d      	movlt	r5, r3
 8005f70:	2300      	movge	r3, #0
 8005f72:	232d      	movlt	r3, #45	; 0x2d
 8005f74:	700b      	strb	r3, [r1, #0]
 8005f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f7c:	4691      	mov	r9, r2
 8005f7e:	f023 0820 	bic.w	r8, r3, #32
 8005f82:	bfbc      	itt	lt
 8005f84:	4622      	movlt	r2, r4
 8005f86:	4614      	movlt	r4, r2
 8005f88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f8c:	d005      	beq.n	8005f9a <__cvt+0x42>
 8005f8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f92:	d100      	bne.n	8005f96 <__cvt+0x3e>
 8005f94:	3601      	adds	r6, #1
 8005f96:	2102      	movs	r1, #2
 8005f98:	e000      	b.n	8005f9c <__cvt+0x44>
 8005f9a:	2103      	movs	r1, #3
 8005f9c:	ab03      	add	r3, sp, #12
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	ab02      	add	r3, sp, #8
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	ec45 4b10 	vmov	d0, r4, r5
 8005fa8:	4653      	mov	r3, sl
 8005faa:	4632      	mov	r2, r6
 8005fac:	f000 fcfc 	bl	80069a8 <_dtoa_r>
 8005fb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	d102      	bne.n	8005fbe <__cvt+0x66>
 8005fb8:	f019 0f01 	tst.w	r9, #1
 8005fbc:	d022      	beq.n	8006004 <__cvt+0xac>
 8005fbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fc2:	eb07 0906 	add.w	r9, r7, r6
 8005fc6:	d110      	bne.n	8005fea <__cvt+0x92>
 8005fc8:	783b      	ldrb	r3, [r7, #0]
 8005fca:	2b30      	cmp	r3, #48	; 0x30
 8005fcc:	d10a      	bne.n	8005fe4 <__cvt+0x8c>
 8005fce:	2200      	movs	r2, #0
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	f7fa fd8f 	bl	8000af8 <__aeabi_dcmpeq>
 8005fda:	b918      	cbnz	r0, 8005fe4 <__cvt+0x8c>
 8005fdc:	f1c6 0601 	rsb	r6, r6, #1
 8005fe0:	f8ca 6000 	str.w	r6, [sl]
 8005fe4:	f8da 3000 	ldr.w	r3, [sl]
 8005fe8:	4499      	add	r9, r3
 8005fea:	2200      	movs	r2, #0
 8005fec:	2300      	movs	r3, #0
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	f7fa fd81 	bl	8000af8 <__aeabi_dcmpeq>
 8005ff6:	b108      	cbz	r0, 8005ffc <__cvt+0xa4>
 8005ff8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ffc:	2230      	movs	r2, #48	; 0x30
 8005ffe:	9b03      	ldr	r3, [sp, #12]
 8006000:	454b      	cmp	r3, r9
 8006002:	d307      	bcc.n	8006014 <__cvt+0xbc>
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006008:	1bdb      	subs	r3, r3, r7
 800600a:	4638      	mov	r0, r7
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	b004      	add	sp, #16
 8006010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006014:	1c59      	adds	r1, r3, #1
 8006016:	9103      	str	r1, [sp, #12]
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	e7f0      	b.n	8005ffe <__cvt+0xa6>

0800601c <__exponent>:
 800601c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800601e:	4603      	mov	r3, r0
 8006020:	2900      	cmp	r1, #0
 8006022:	bfb8      	it	lt
 8006024:	4249      	neglt	r1, r1
 8006026:	f803 2b02 	strb.w	r2, [r3], #2
 800602a:	bfb4      	ite	lt
 800602c:	222d      	movlt	r2, #45	; 0x2d
 800602e:	222b      	movge	r2, #43	; 0x2b
 8006030:	2909      	cmp	r1, #9
 8006032:	7042      	strb	r2, [r0, #1]
 8006034:	dd2a      	ble.n	800608c <__exponent+0x70>
 8006036:	f10d 0407 	add.w	r4, sp, #7
 800603a:	46a4      	mov	ip, r4
 800603c:	270a      	movs	r7, #10
 800603e:	46a6      	mov	lr, r4
 8006040:	460a      	mov	r2, r1
 8006042:	fb91 f6f7 	sdiv	r6, r1, r7
 8006046:	fb07 1516 	mls	r5, r7, r6, r1
 800604a:	3530      	adds	r5, #48	; 0x30
 800604c:	2a63      	cmp	r2, #99	; 0x63
 800604e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006052:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006056:	4631      	mov	r1, r6
 8006058:	dcf1      	bgt.n	800603e <__exponent+0x22>
 800605a:	3130      	adds	r1, #48	; 0x30
 800605c:	f1ae 0502 	sub.w	r5, lr, #2
 8006060:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006064:	1c44      	adds	r4, r0, #1
 8006066:	4629      	mov	r1, r5
 8006068:	4561      	cmp	r1, ip
 800606a:	d30a      	bcc.n	8006082 <__exponent+0x66>
 800606c:	f10d 0209 	add.w	r2, sp, #9
 8006070:	eba2 020e 	sub.w	r2, r2, lr
 8006074:	4565      	cmp	r5, ip
 8006076:	bf88      	it	hi
 8006078:	2200      	movhi	r2, #0
 800607a:	4413      	add	r3, r2
 800607c:	1a18      	subs	r0, r3, r0
 800607e:	b003      	add	sp, #12
 8006080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006086:	f804 2f01 	strb.w	r2, [r4, #1]!
 800608a:	e7ed      	b.n	8006068 <__exponent+0x4c>
 800608c:	2330      	movs	r3, #48	; 0x30
 800608e:	3130      	adds	r1, #48	; 0x30
 8006090:	7083      	strb	r3, [r0, #2]
 8006092:	70c1      	strb	r1, [r0, #3]
 8006094:	1d03      	adds	r3, r0, #4
 8006096:	e7f1      	b.n	800607c <__exponent+0x60>

08006098 <_printf_float>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	ed2d 8b02 	vpush	{d8}
 80060a0:	b08d      	sub	sp, #52	; 0x34
 80060a2:	460c      	mov	r4, r1
 80060a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80060a8:	4616      	mov	r6, r2
 80060aa:	461f      	mov	r7, r3
 80060ac:	4605      	mov	r5, r0
 80060ae:	f001 fa67 	bl	8007580 <_localeconv_r>
 80060b2:	f8d0 a000 	ldr.w	sl, [r0]
 80060b6:	4650      	mov	r0, sl
 80060b8:	f7fa f8a2 	bl	8000200 <strlen>
 80060bc:	2300      	movs	r3, #0
 80060be:	930a      	str	r3, [sp, #40]	; 0x28
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	f8d8 3000 	ldr.w	r3, [r8]
 80060c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060cc:	3307      	adds	r3, #7
 80060ce:	f023 0307 	bic.w	r3, r3, #7
 80060d2:	f103 0208 	add.w	r2, r3, #8
 80060d6:	f8c8 2000 	str.w	r2, [r8]
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80060e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060ea:	9307      	str	r3, [sp, #28]
 80060ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80060f0:	ee08 0a10 	vmov	s16, r0
 80060f4:	4b9f      	ldr	r3, [pc, #636]	; (8006374 <_printf_float+0x2dc>)
 80060f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060fa:	f04f 32ff 	mov.w	r2, #4294967295
 80060fe:	f7fa fd2d 	bl	8000b5c <__aeabi_dcmpun>
 8006102:	bb88      	cbnz	r0, 8006168 <_printf_float+0xd0>
 8006104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006108:	4b9a      	ldr	r3, [pc, #616]	; (8006374 <_printf_float+0x2dc>)
 800610a:	f04f 32ff 	mov.w	r2, #4294967295
 800610e:	f7fa fd07 	bl	8000b20 <__aeabi_dcmple>
 8006112:	bb48      	cbnz	r0, 8006168 <_printf_float+0xd0>
 8006114:	2200      	movs	r2, #0
 8006116:	2300      	movs	r3, #0
 8006118:	4640      	mov	r0, r8
 800611a:	4649      	mov	r1, r9
 800611c:	f7fa fcf6 	bl	8000b0c <__aeabi_dcmplt>
 8006120:	b110      	cbz	r0, 8006128 <_printf_float+0x90>
 8006122:	232d      	movs	r3, #45	; 0x2d
 8006124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006128:	4b93      	ldr	r3, [pc, #588]	; (8006378 <_printf_float+0x2e0>)
 800612a:	4894      	ldr	r0, [pc, #592]	; (800637c <_printf_float+0x2e4>)
 800612c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006130:	bf94      	ite	ls
 8006132:	4698      	movls	r8, r3
 8006134:	4680      	movhi	r8, r0
 8006136:	2303      	movs	r3, #3
 8006138:	6123      	str	r3, [r4, #16]
 800613a:	9b05      	ldr	r3, [sp, #20]
 800613c:	f023 0204 	bic.w	r2, r3, #4
 8006140:	6022      	str	r2, [r4, #0]
 8006142:	f04f 0900 	mov.w	r9, #0
 8006146:	9700      	str	r7, [sp, #0]
 8006148:	4633      	mov	r3, r6
 800614a:	aa0b      	add	r2, sp, #44	; 0x2c
 800614c:	4621      	mov	r1, r4
 800614e:	4628      	mov	r0, r5
 8006150:	f000 f9d8 	bl	8006504 <_printf_common>
 8006154:	3001      	adds	r0, #1
 8006156:	f040 8090 	bne.w	800627a <_printf_float+0x1e2>
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	b00d      	add	sp, #52	; 0x34
 8006160:	ecbd 8b02 	vpop	{d8}
 8006164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006168:	4642      	mov	r2, r8
 800616a:	464b      	mov	r3, r9
 800616c:	4640      	mov	r0, r8
 800616e:	4649      	mov	r1, r9
 8006170:	f7fa fcf4 	bl	8000b5c <__aeabi_dcmpun>
 8006174:	b140      	cbz	r0, 8006188 <_printf_float+0xf0>
 8006176:	464b      	mov	r3, r9
 8006178:	2b00      	cmp	r3, #0
 800617a:	bfbc      	itt	lt
 800617c:	232d      	movlt	r3, #45	; 0x2d
 800617e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006182:	487f      	ldr	r0, [pc, #508]	; (8006380 <_printf_float+0x2e8>)
 8006184:	4b7f      	ldr	r3, [pc, #508]	; (8006384 <_printf_float+0x2ec>)
 8006186:	e7d1      	b.n	800612c <_printf_float+0x94>
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800618e:	9206      	str	r2, [sp, #24]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	d13f      	bne.n	8006214 <_printf_float+0x17c>
 8006194:	2306      	movs	r3, #6
 8006196:	6063      	str	r3, [r4, #4]
 8006198:	9b05      	ldr	r3, [sp, #20]
 800619a:	6861      	ldr	r1, [r4, #4]
 800619c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061a0:	2300      	movs	r3, #0
 80061a2:	9303      	str	r3, [sp, #12]
 80061a4:	ab0a      	add	r3, sp, #40	; 0x28
 80061a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80061aa:	ab09      	add	r3, sp, #36	; 0x24
 80061ac:	ec49 8b10 	vmov	d0, r8, r9
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	6022      	str	r2, [r4, #0]
 80061b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061b8:	4628      	mov	r0, r5
 80061ba:	f7ff fecd 	bl	8005f58 <__cvt>
 80061be:	9b06      	ldr	r3, [sp, #24]
 80061c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061c2:	2b47      	cmp	r3, #71	; 0x47
 80061c4:	4680      	mov	r8, r0
 80061c6:	d108      	bne.n	80061da <_printf_float+0x142>
 80061c8:	1cc8      	adds	r0, r1, #3
 80061ca:	db02      	blt.n	80061d2 <_printf_float+0x13a>
 80061cc:	6863      	ldr	r3, [r4, #4]
 80061ce:	4299      	cmp	r1, r3
 80061d0:	dd41      	ble.n	8006256 <_printf_float+0x1be>
 80061d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80061d6:	fa5f fb8b 	uxtb.w	fp, fp
 80061da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061de:	d820      	bhi.n	8006222 <_printf_float+0x18a>
 80061e0:	3901      	subs	r1, #1
 80061e2:	465a      	mov	r2, fp
 80061e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061e8:	9109      	str	r1, [sp, #36]	; 0x24
 80061ea:	f7ff ff17 	bl	800601c <__exponent>
 80061ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061f0:	1813      	adds	r3, r2, r0
 80061f2:	2a01      	cmp	r2, #1
 80061f4:	4681      	mov	r9, r0
 80061f6:	6123      	str	r3, [r4, #16]
 80061f8:	dc02      	bgt.n	8006200 <_printf_float+0x168>
 80061fa:	6822      	ldr	r2, [r4, #0]
 80061fc:	07d2      	lsls	r2, r2, #31
 80061fe:	d501      	bpl.n	8006204 <_printf_float+0x16c>
 8006200:	3301      	adds	r3, #1
 8006202:	6123      	str	r3, [r4, #16]
 8006204:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006208:	2b00      	cmp	r3, #0
 800620a:	d09c      	beq.n	8006146 <_printf_float+0xae>
 800620c:	232d      	movs	r3, #45	; 0x2d
 800620e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006212:	e798      	b.n	8006146 <_printf_float+0xae>
 8006214:	9a06      	ldr	r2, [sp, #24]
 8006216:	2a47      	cmp	r2, #71	; 0x47
 8006218:	d1be      	bne.n	8006198 <_printf_float+0x100>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1bc      	bne.n	8006198 <_printf_float+0x100>
 800621e:	2301      	movs	r3, #1
 8006220:	e7b9      	b.n	8006196 <_printf_float+0xfe>
 8006222:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006226:	d118      	bne.n	800625a <_printf_float+0x1c2>
 8006228:	2900      	cmp	r1, #0
 800622a:	6863      	ldr	r3, [r4, #4]
 800622c:	dd0b      	ble.n	8006246 <_printf_float+0x1ae>
 800622e:	6121      	str	r1, [r4, #16]
 8006230:	b913      	cbnz	r3, 8006238 <_printf_float+0x1a0>
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	07d0      	lsls	r0, r2, #31
 8006236:	d502      	bpl.n	800623e <_printf_float+0x1a6>
 8006238:	3301      	adds	r3, #1
 800623a:	440b      	add	r3, r1
 800623c:	6123      	str	r3, [r4, #16]
 800623e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006240:	f04f 0900 	mov.w	r9, #0
 8006244:	e7de      	b.n	8006204 <_printf_float+0x16c>
 8006246:	b913      	cbnz	r3, 800624e <_printf_float+0x1b6>
 8006248:	6822      	ldr	r2, [r4, #0]
 800624a:	07d2      	lsls	r2, r2, #31
 800624c:	d501      	bpl.n	8006252 <_printf_float+0x1ba>
 800624e:	3302      	adds	r3, #2
 8006250:	e7f4      	b.n	800623c <_printf_float+0x1a4>
 8006252:	2301      	movs	r3, #1
 8006254:	e7f2      	b.n	800623c <_printf_float+0x1a4>
 8006256:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800625a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800625c:	4299      	cmp	r1, r3
 800625e:	db05      	blt.n	800626c <_printf_float+0x1d4>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	6121      	str	r1, [r4, #16]
 8006264:	07d8      	lsls	r0, r3, #31
 8006266:	d5ea      	bpl.n	800623e <_printf_float+0x1a6>
 8006268:	1c4b      	adds	r3, r1, #1
 800626a:	e7e7      	b.n	800623c <_printf_float+0x1a4>
 800626c:	2900      	cmp	r1, #0
 800626e:	bfd4      	ite	le
 8006270:	f1c1 0202 	rsble	r2, r1, #2
 8006274:	2201      	movgt	r2, #1
 8006276:	4413      	add	r3, r2
 8006278:	e7e0      	b.n	800623c <_printf_float+0x1a4>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	055a      	lsls	r2, r3, #21
 800627e:	d407      	bmi.n	8006290 <_printf_float+0x1f8>
 8006280:	6923      	ldr	r3, [r4, #16]
 8006282:	4642      	mov	r2, r8
 8006284:	4631      	mov	r1, r6
 8006286:	4628      	mov	r0, r5
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	d12c      	bne.n	80062e8 <_printf_float+0x250>
 800628e:	e764      	b.n	800615a <_printf_float+0xc2>
 8006290:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006294:	f240 80e0 	bls.w	8006458 <_printf_float+0x3c0>
 8006298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800629c:	2200      	movs	r2, #0
 800629e:	2300      	movs	r3, #0
 80062a0:	f7fa fc2a 	bl	8000af8 <__aeabi_dcmpeq>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d034      	beq.n	8006312 <_printf_float+0x27a>
 80062a8:	4a37      	ldr	r2, [pc, #220]	; (8006388 <_printf_float+0x2f0>)
 80062aa:	2301      	movs	r3, #1
 80062ac:	4631      	mov	r1, r6
 80062ae:	4628      	mov	r0, r5
 80062b0:	47b8      	blx	r7
 80062b2:	3001      	adds	r0, #1
 80062b4:	f43f af51 	beq.w	800615a <_printf_float+0xc2>
 80062b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062bc:	429a      	cmp	r2, r3
 80062be:	db02      	blt.n	80062c6 <_printf_float+0x22e>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	07d8      	lsls	r0, r3, #31
 80062c4:	d510      	bpl.n	80062e8 <_printf_float+0x250>
 80062c6:	ee18 3a10 	vmov	r3, s16
 80062ca:	4652      	mov	r2, sl
 80062cc:	4631      	mov	r1, r6
 80062ce:	4628      	mov	r0, r5
 80062d0:	47b8      	blx	r7
 80062d2:	3001      	adds	r0, #1
 80062d4:	f43f af41 	beq.w	800615a <_printf_float+0xc2>
 80062d8:	f04f 0800 	mov.w	r8, #0
 80062dc:	f104 091a 	add.w	r9, r4, #26
 80062e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e2:	3b01      	subs	r3, #1
 80062e4:	4543      	cmp	r3, r8
 80062e6:	dc09      	bgt.n	80062fc <_printf_float+0x264>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	079b      	lsls	r3, r3, #30
 80062ec:	f100 8105 	bmi.w	80064fa <_printf_float+0x462>
 80062f0:	68e0      	ldr	r0, [r4, #12]
 80062f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062f4:	4298      	cmp	r0, r3
 80062f6:	bfb8      	it	lt
 80062f8:	4618      	movlt	r0, r3
 80062fa:	e730      	b.n	800615e <_printf_float+0xc6>
 80062fc:	2301      	movs	r3, #1
 80062fe:	464a      	mov	r2, r9
 8006300:	4631      	mov	r1, r6
 8006302:	4628      	mov	r0, r5
 8006304:	47b8      	blx	r7
 8006306:	3001      	adds	r0, #1
 8006308:	f43f af27 	beq.w	800615a <_printf_float+0xc2>
 800630c:	f108 0801 	add.w	r8, r8, #1
 8006310:	e7e6      	b.n	80062e0 <_printf_float+0x248>
 8006312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006314:	2b00      	cmp	r3, #0
 8006316:	dc39      	bgt.n	800638c <_printf_float+0x2f4>
 8006318:	4a1b      	ldr	r2, [pc, #108]	; (8006388 <_printf_float+0x2f0>)
 800631a:	2301      	movs	r3, #1
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	f43f af19 	beq.w	800615a <_printf_float+0xc2>
 8006328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800632c:	4313      	orrs	r3, r2
 800632e:	d102      	bne.n	8006336 <_printf_float+0x29e>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	07d9      	lsls	r1, r3, #31
 8006334:	d5d8      	bpl.n	80062e8 <_printf_float+0x250>
 8006336:	ee18 3a10 	vmov	r3, s16
 800633a:	4652      	mov	r2, sl
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	f43f af09 	beq.w	800615a <_printf_float+0xc2>
 8006348:	f04f 0900 	mov.w	r9, #0
 800634c:	f104 0a1a 	add.w	sl, r4, #26
 8006350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006352:	425b      	negs	r3, r3
 8006354:	454b      	cmp	r3, r9
 8006356:	dc01      	bgt.n	800635c <_printf_float+0x2c4>
 8006358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635a:	e792      	b.n	8006282 <_printf_float+0x1ea>
 800635c:	2301      	movs	r3, #1
 800635e:	4652      	mov	r2, sl
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	f43f aef7 	beq.w	800615a <_printf_float+0xc2>
 800636c:	f109 0901 	add.w	r9, r9, #1
 8006370:	e7ee      	b.n	8006350 <_printf_float+0x2b8>
 8006372:	bf00      	nop
 8006374:	7fefffff 	.word	0x7fefffff
 8006378:	08009c70 	.word	0x08009c70
 800637c:	08009c74 	.word	0x08009c74
 8006380:	08009c7c 	.word	0x08009c7c
 8006384:	08009c78 	.word	0x08009c78
 8006388:	08009c80 	.word	0x08009c80
 800638c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800638e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006390:	429a      	cmp	r2, r3
 8006392:	bfa8      	it	ge
 8006394:	461a      	movge	r2, r3
 8006396:	2a00      	cmp	r2, #0
 8006398:	4691      	mov	r9, r2
 800639a:	dc37      	bgt.n	800640c <_printf_float+0x374>
 800639c:	f04f 0b00 	mov.w	fp, #0
 80063a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063a4:	f104 021a 	add.w	r2, r4, #26
 80063a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063aa:	9305      	str	r3, [sp, #20]
 80063ac:	eba3 0309 	sub.w	r3, r3, r9
 80063b0:	455b      	cmp	r3, fp
 80063b2:	dc33      	bgt.n	800641c <_printf_float+0x384>
 80063b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063b8:	429a      	cmp	r2, r3
 80063ba:	db3b      	blt.n	8006434 <_printf_float+0x39c>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	07da      	lsls	r2, r3, #31
 80063c0:	d438      	bmi.n	8006434 <_printf_float+0x39c>
 80063c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063c4:	9b05      	ldr	r3, [sp, #20]
 80063c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	eba2 0901 	sub.w	r9, r2, r1
 80063ce:	4599      	cmp	r9, r3
 80063d0:	bfa8      	it	ge
 80063d2:	4699      	movge	r9, r3
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	dc35      	bgt.n	8006446 <_printf_float+0x3ae>
 80063da:	f04f 0800 	mov.w	r8, #0
 80063de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063e2:	f104 0a1a 	add.w	sl, r4, #26
 80063e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	eba3 0309 	sub.w	r3, r3, r9
 80063f0:	4543      	cmp	r3, r8
 80063f2:	f77f af79 	ble.w	80062e8 <_printf_float+0x250>
 80063f6:	2301      	movs	r3, #1
 80063f8:	4652      	mov	r2, sl
 80063fa:	4631      	mov	r1, r6
 80063fc:	4628      	mov	r0, r5
 80063fe:	47b8      	blx	r7
 8006400:	3001      	adds	r0, #1
 8006402:	f43f aeaa 	beq.w	800615a <_printf_float+0xc2>
 8006406:	f108 0801 	add.w	r8, r8, #1
 800640a:	e7ec      	b.n	80063e6 <_printf_float+0x34e>
 800640c:	4613      	mov	r3, r2
 800640e:	4631      	mov	r1, r6
 8006410:	4642      	mov	r2, r8
 8006412:	4628      	mov	r0, r5
 8006414:	47b8      	blx	r7
 8006416:	3001      	adds	r0, #1
 8006418:	d1c0      	bne.n	800639c <_printf_float+0x304>
 800641a:	e69e      	b.n	800615a <_printf_float+0xc2>
 800641c:	2301      	movs	r3, #1
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	9205      	str	r2, [sp, #20]
 8006424:	47b8      	blx	r7
 8006426:	3001      	adds	r0, #1
 8006428:	f43f ae97 	beq.w	800615a <_printf_float+0xc2>
 800642c:	9a05      	ldr	r2, [sp, #20]
 800642e:	f10b 0b01 	add.w	fp, fp, #1
 8006432:	e7b9      	b.n	80063a8 <_printf_float+0x310>
 8006434:	ee18 3a10 	vmov	r3, s16
 8006438:	4652      	mov	r2, sl
 800643a:	4631      	mov	r1, r6
 800643c:	4628      	mov	r0, r5
 800643e:	47b8      	blx	r7
 8006440:	3001      	adds	r0, #1
 8006442:	d1be      	bne.n	80063c2 <_printf_float+0x32a>
 8006444:	e689      	b.n	800615a <_printf_float+0xc2>
 8006446:	9a05      	ldr	r2, [sp, #20]
 8006448:	464b      	mov	r3, r9
 800644a:	4442      	add	r2, r8
 800644c:	4631      	mov	r1, r6
 800644e:	4628      	mov	r0, r5
 8006450:	47b8      	blx	r7
 8006452:	3001      	adds	r0, #1
 8006454:	d1c1      	bne.n	80063da <_printf_float+0x342>
 8006456:	e680      	b.n	800615a <_printf_float+0xc2>
 8006458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800645a:	2a01      	cmp	r2, #1
 800645c:	dc01      	bgt.n	8006462 <_printf_float+0x3ca>
 800645e:	07db      	lsls	r3, r3, #31
 8006460:	d538      	bpl.n	80064d4 <_printf_float+0x43c>
 8006462:	2301      	movs	r3, #1
 8006464:	4642      	mov	r2, r8
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	f43f ae74 	beq.w	800615a <_printf_float+0xc2>
 8006472:	ee18 3a10 	vmov	r3, s16
 8006476:	4652      	mov	r2, sl
 8006478:	4631      	mov	r1, r6
 800647a:	4628      	mov	r0, r5
 800647c:	47b8      	blx	r7
 800647e:	3001      	adds	r0, #1
 8006480:	f43f ae6b 	beq.w	800615a <_printf_float+0xc2>
 8006484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006488:	2200      	movs	r2, #0
 800648a:	2300      	movs	r3, #0
 800648c:	f7fa fb34 	bl	8000af8 <__aeabi_dcmpeq>
 8006490:	b9d8      	cbnz	r0, 80064ca <_printf_float+0x432>
 8006492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006494:	f108 0201 	add.w	r2, r8, #1
 8006498:	3b01      	subs	r3, #1
 800649a:	4631      	mov	r1, r6
 800649c:	4628      	mov	r0, r5
 800649e:	47b8      	blx	r7
 80064a0:	3001      	adds	r0, #1
 80064a2:	d10e      	bne.n	80064c2 <_printf_float+0x42a>
 80064a4:	e659      	b.n	800615a <_printf_float+0xc2>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4652      	mov	r2, sl
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	f43f ae52 	beq.w	800615a <_printf_float+0xc2>
 80064b6:	f108 0801 	add.w	r8, r8, #1
 80064ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064bc:	3b01      	subs	r3, #1
 80064be:	4543      	cmp	r3, r8
 80064c0:	dcf1      	bgt.n	80064a6 <_printf_float+0x40e>
 80064c2:	464b      	mov	r3, r9
 80064c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064c8:	e6dc      	b.n	8006284 <_printf_float+0x1ec>
 80064ca:	f04f 0800 	mov.w	r8, #0
 80064ce:	f104 0a1a 	add.w	sl, r4, #26
 80064d2:	e7f2      	b.n	80064ba <_printf_float+0x422>
 80064d4:	2301      	movs	r3, #1
 80064d6:	4642      	mov	r2, r8
 80064d8:	e7df      	b.n	800649a <_printf_float+0x402>
 80064da:	2301      	movs	r3, #1
 80064dc:	464a      	mov	r2, r9
 80064de:	4631      	mov	r1, r6
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b8      	blx	r7
 80064e4:	3001      	adds	r0, #1
 80064e6:	f43f ae38 	beq.w	800615a <_printf_float+0xc2>
 80064ea:	f108 0801 	add.w	r8, r8, #1
 80064ee:	68e3      	ldr	r3, [r4, #12]
 80064f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064f2:	1a5b      	subs	r3, r3, r1
 80064f4:	4543      	cmp	r3, r8
 80064f6:	dcf0      	bgt.n	80064da <_printf_float+0x442>
 80064f8:	e6fa      	b.n	80062f0 <_printf_float+0x258>
 80064fa:	f04f 0800 	mov.w	r8, #0
 80064fe:	f104 0919 	add.w	r9, r4, #25
 8006502:	e7f4      	b.n	80064ee <_printf_float+0x456>

08006504 <_printf_common>:
 8006504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006508:	4616      	mov	r6, r2
 800650a:	4699      	mov	r9, r3
 800650c:	688a      	ldr	r2, [r1, #8]
 800650e:	690b      	ldr	r3, [r1, #16]
 8006510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006514:	4293      	cmp	r3, r2
 8006516:	bfb8      	it	lt
 8006518:	4613      	movlt	r3, r2
 800651a:	6033      	str	r3, [r6, #0]
 800651c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006520:	4607      	mov	r7, r0
 8006522:	460c      	mov	r4, r1
 8006524:	b10a      	cbz	r2, 800652a <_printf_common+0x26>
 8006526:	3301      	adds	r3, #1
 8006528:	6033      	str	r3, [r6, #0]
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	0699      	lsls	r1, r3, #26
 800652e:	bf42      	ittt	mi
 8006530:	6833      	ldrmi	r3, [r6, #0]
 8006532:	3302      	addmi	r3, #2
 8006534:	6033      	strmi	r3, [r6, #0]
 8006536:	6825      	ldr	r5, [r4, #0]
 8006538:	f015 0506 	ands.w	r5, r5, #6
 800653c:	d106      	bne.n	800654c <_printf_common+0x48>
 800653e:	f104 0a19 	add.w	sl, r4, #25
 8006542:	68e3      	ldr	r3, [r4, #12]
 8006544:	6832      	ldr	r2, [r6, #0]
 8006546:	1a9b      	subs	r3, r3, r2
 8006548:	42ab      	cmp	r3, r5
 800654a:	dc26      	bgt.n	800659a <_printf_common+0x96>
 800654c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006550:	1e13      	subs	r3, r2, #0
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	bf18      	it	ne
 8006556:	2301      	movne	r3, #1
 8006558:	0692      	lsls	r2, r2, #26
 800655a:	d42b      	bmi.n	80065b4 <_printf_common+0xb0>
 800655c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006560:	4649      	mov	r1, r9
 8006562:	4638      	mov	r0, r7
 8006564:	47c0      	blx	r8
 8006566:	3001      	adds	r0, #1
 8006568:	d01e      	beq.n	80065a8 <_printf_common+0xa4>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	68e5      	ldr	r5, [r4, #12]
 800656e:	6832      	ldr	r2, [r6, #0]
 8006570:	f003 0306 	and.w	r3, r3, #6
 8006574:	2b04      	cmp	r3, #4
 8006576:	bf08      	it	eq
 8006578:	1aad      	subeq	r5, r5, r2
 800657a:	68a3      	ldr	r3, [r4, #8]
 800657c:	6922      	ldr	r2, [r4, #16]
 800657e:	bf0c      	ite	eq
 8006580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006584:	2500      	movne	r5, #0
 8006586:	4293      	cmp	r3, r2
 8006588:	bfc4      	itt	gt
 800658a:	1a9b      	subgt	r3, r3, r2
 800658c:	18ed      	addgt	r5, r5, r3
 800658e:	2600      	movs	r6, #0
 8006590:	341a      	adds	r4, #26
 8006592:	42b5      	cmp	r5, r6
 8006594:	d11a      	bne.n	80065cc <_printf_common+0xc8>
 8006596:	2000      	movs	r0, #0
 8006598:	e008      	b.n	80065ac <_printf_common+0xa8>
 800659a:	2301      	movs	r3, #1
 800659c:	4652      	mov	r2, sl
 800659e:	4649      	mov	r1, r9
 80065a0:	4638      	mov	r0, r7
 80065a2:	47c0      	blx	r8
 80065a4:	3001      	adds	r0, #1
 80065a6:	d103      	bne.n	80065b0 <_printf_common+0xac>
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b0:	3501      	adds	r5, #1
 80065b2:	e7c6      	b.n	8006542 <_printf_common+0x3e>
 80065b4:	18e1      	adds	r1, r4, r3
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	2030      	movs	r0, #48	; 0x30
 80065ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065be:	4422      	add	r2, r4
 80065c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065c8:	3302      	adds	r3, #2
 80065ca:	e7c7      	b.n	800655c <_printf_common+0x58>
 80065cc:	2301      	movs	r3, #1
 80065ce:	4622      	mov	r2, r4
 80065d0:	4649      	mov	r1, r9
 80065d2:	4638      	mov	r0, r7
 80065d4:	47c0      	blx	r8
 80065d6:	3001      	adds	r0, #1
 80065d8:	d0e6      	beq.n	80065a8 <_printf_common+0xa4>
 80065da:	3601      	adds	r6, #1
 80065dc:	e7d9      	b.n	8006592 <_printf_common+0x8e>
	...

080065e0 <_printf_i>:
 80065e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e4:	460c      	mov	r4, r1
 80065e6:	4691      	mov	r9, r2
 80065e8:	7e27      	ldrb	r7, [r4, #24]
 80065ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065ec:	2f78      	cmp	r7, #120	; 0x78
 80065ee:	4680      	mov	r8, r0
 80065f0:	469a      	mov	sl, r3
 80065f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065f6:	d807      	bhi.n	8006608 <_printf_i+0x28>
 80065f8:	2f62      	cmp	r7, #98	; 0x62
 80065fa:	d80a      	bhi.n	8006612 <_printf_i+0x32>
 80065fc:	2f00      	cmp	r7, #0
 80065fe:	f000 80d8 	beq.w	80067b2 <_printf_i+0x1d2>
 8006602:	2f58      	cmp	r7, #88	; 0x58
 8006604:	f000 80a3 	beq.w	800674e <_printf_i+0x16e>
 8006608:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800660c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006610:	e03a      	b.n	8006688 <_printf_i+0xa8>
 8006612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006616:	2b15      	cmp	r3, #21
 8006618:	d8f6      	bhi.n	8006608 <_printf_i+0x28>
 800661a:	a001      	add	r0, pc, #4	; (adr r0, 8006620 <_printf_i+0x40>)
 800661c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006620:	08006679 	.word	0x08006679
 8006624:	0800668d 	.word	0x0800668d
 8006628:	08006609 	.word	0x08006609
 800662c:	08006609 	.word	0x08006609
 8006630:	08006609 	.word	0x08006609
 8006634:	08006609 	.word	0x08006609
 8006638:	0800668d 	.word	0x0800668d
 800663c:	08006609 	.word	0x08006609
 8006640:	08006609 	.word	0x08006609
 8006644:	08006609 	.word	0x08006609
 8006648:	08006609 	.word	0x08006609
 800664c:	08006799 	.word	0x08006799
 8006650:	080066bd 	.word	0x080066bd
 8006654:	0800677b 	.word	0x0800677b
 8006658:	08006609 	.word	0x08006609
 800665c:	08006609 	.word	0x08006609
 8006660:	080067bb 	.word	0x080067bb
 8006664:	08006609 	.word	0x08006609
 8006668:	080066bd 	.word	0x080066bd
 800666c:	08006609 	.word	0x08006609
 8006670:	08006609 	.word	0x08006609
 8006674:	08006783 	.word	0x08006783
 8006678:	680b      	ldr	r3, [r1, #0]
 800667a:	1d1a      	adds	r2, r3, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	600a      	str	r2, [r1, #0]
 8006680:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006688:	2301      	movs	r3, #1
 800668a:	e0a3      	b.n	80067d4 <_printf_i+0x1f4>
 800668c:	6825      	ldr	r5, [r4, #0]
 800668e:	6808      	ldr	r0, [r1, #0]
 8006690:	062e      	lsls	r6, r5, #24
 8006692:	f100 0304 	add.w	r3, r0, #4
 8006696:	d50a      	bpl.n	80066ae <_printf_i+0xce>
 8006698:	6805      	ldr	r5, [r0, #0]
 800669a:	600b      	str	r3, [r1, #0]
 800669c:	2d00      	cmp	r5, #0
 800669e:	da03      	bge.n	80066a8 <_printf_i+0xc8>
 80066a0:	232d      	movs	r3, #45	; 0x2d
 80066a2:	426d      	negs	r5, r5
 80066a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a8:	485e      	ldr	r0, [pc, #376]	; (8006824 <_printf_i+0x244>)
 80066aa:	230a      	movs	r3, #10
 80066ac:	e019      	b.n	80066e2 <_printf_i+0x102>
 80066ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80066b2:	6805      	ldr	r5, [r0, #0]
 80066b4:	600b      	str	r3, [r1, #0]
 80066b6:	bf18      	it	ne
 80066b8:	b22d      	sxthne	r5, r5
 80066ba:	e7ef      	b.n	800669c <_printf_i+0xbc>
 80066bc:	680b      	ldr	r3, [r1, #0]
 80066be:	6825      	ldr	r5, [r4, #0]
 80066c0:	1d18      	adds	r0, r3, #4
 80066c2:	6008      	str	r0, [r1, #0]
 80066c4:	0628      	lsls	r0, r5, #24
 80066c6:	d501      	bpl.n	80066cc <_printf_i+0xec>
 80066c8:	681d      	ldr	r5, [r3, #0]
 80066ca:	e002      	b.n	80066d2 <_printf_i+0xf2>
 80066cc:	0669      	lsls	r1, r5, #25
 80066ce:	d5fb      	bpl.n	80066c8 <_printf_i+0xe8>
 80066d0:	881d      	ldrh	r5, [r3, #0]
 80066d2:	4854      	ldr	r0, [pc, #336]	; (8006824 <_printf_i+0x244>)
 80066d4:	2f6f      	cmp	r7, #111	; 0x6f
 80066d6:	bf0c      	ite	eq
 80066d8:	2308      	moveq	r3, #8
 80066da:	230a      	movne	r3, #10
 80066dc:	2100      	movs	r1, #0
 80066de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066e2:	6866      	ldr	r6, [r4, #4]
 80066e4:	60a6      	str	r6, [r4, #8]
 80066e6:	2e00      	cmp	r6, #0
 80066e8:	bfa2      	ittt	ge
 80066ea:	6821      	ldrge	r1, [r4, #0]
 80066ec:	f021 0104 	bicge.w	r1, r1, #4
 80066f0:	6021      	strge	r1, [r4, #0]
 80066f2:	b90d      	cbnz	r5, 80066f8 <_printf_i+0x118>
 80066f4:	2e00      	cmp	r6, #0
 80066f6:	d04d      	beq.n	8006794 <_printf_i+0x1b4>
 80066f8:	4616      	mov	r6, r2
 80066fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80066fe:	fb03 5711 	mls	r7, r3, r1, r5
 8006702:	5dc7      	ldrb	r7, [r0, r7]
 8006704:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006708:	462f      	mov	r7, r5
 800670a:	42bb      	cmp	r3, r7
 800670c:	460d      	mov	r5, r1
 800670e:	d9f4      	bls.n	80066fa <_printf_i+0x11a>
 8006710:	2b08      	cmp	r3, #8
 8006712:	d10b      	bne.n	800672c <_printf_i+0x14c>
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	07df      	lsls	r7, r3, #31
 8006718:	d508      	bpl.n	800672c <_printf_i+0x14c>
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	6861      	ldr	r1, [r4, #4]
 800671e:	4299      	cmp	r1, r3
 8006720:	bfde      	ittt	le
 8006722:	2330      	movle	r3, #48	; 0x30
 8006724:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006728:	f106 36ff 	addle.w	r6, r6, #4294967295
 800672c:	1b92      	subs	r2, r2, r6
 800672e:	6122      	str	r2, [r4, #16]
 8006730:	f8cd a000 	str.w	sl, [sp]
 8006734:	464b      	mov	r3, r9
 8006736:	aa03      	add	r2, sp, #12
 8006738:	4621      	mov	r1, r4
 800673a:	4640      	mov	r0, r8
 800673c:	f7ff fee2 	bl	8006504 <_printf_common>
 8006740:	3001      	adds	r0, #1
 8006742:	d14c      	bne.n	80067de <_printf_i+0x1fe>
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	b004      	add	sp, #16
 800674a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674e:	4835      	ldr	r0, [pc, #212]	; (8006824 <_printf_i+0x244>)
 8006750:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	680e      	ldr	r6, [r1, #0]
 8006758:	061f      	lsls	r7, r3, #24
 800675a:	f856 5b04 	ldr.w	r5, [r6], #4
 800675e:	600e      	str	r6, [r1, #0]
 8006760:	d514      	bpl.n	800678c <_printf_i+0x1ac>
 8006762:	07d9      	lsls	r1, r3, #31
 8006764:	bf44      	itt	mi
 8006766:	f043 0320 	orrmi.w	r3, r3, #32
 800676a:	6023      	strmi	r3, [r4, #0]
 800676c:	b91d      	cbnz	r5, 8006776 <_printf_i+0x196>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	f023 0320 	bic.w	r3, r3, #32
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	2310      	movs	r3, #16
 8006778:	e7b0      	b.n	80066dc <_printf_i+0xfc>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f043 0320 	orr.w	r3, r3, #32
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	2378      	movs	r3, #120	; 0x78
 8006784:	4828      	ldr	r0, [pc, #160]	; (8006828 <_printf_i+0x248>)
 8006786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800678a:	e7e3      	b.n	8006754 <_printf_i+0x174>
 800678c:	065e      	lsls	r6, r3, #25
 800678e:	bf48      	it	mi
 8006790:	b2ad      	uxthmi	r5, r5
 8006792:	e7e6      	b.n	8006762 <_printf_i+0x182>
 8006794:	4616      	mov	r6, r2
 8006796:	e7bb      	b.n	8006710 <_printf_i+0x130>
 8006798:	680b      	ldr	r3, [r1, #0]
 800679a:	6826      	ldr	r6, [r4, #0]
 800679c:	6960      	ldr	r0, [r4, #20]
 800679e:	1d1d      	adds	r5, r3, #4
 80067a0:	600d      	str	r5, [r1, #0]
 80067a2:	0635      	lsls	r5, r6, #24
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	d501      	bpl.n	80067ac <_printf_i+0x1cc>
 80067a8:	6018      	str	r0, [r3, #0]
 80067aa:	e002      	b.n	80067b2 <_printf_i+0x1d2>
 80067ac:	0671      	lsls	r1, r6, #25
 80067ae:	d5fb      	bpl.n	80067a8 <_printf_i+0x1c8>
 80067b0:	8018      	strh	r0, [r3, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	4616      	mov	r6, r2
 80067b8:	e7ba      	b.n	8006730 <_printf_i+0x150>
 80067ba:	680b      	ldr	r3, [r1, #0]
 80067bc:	1d1a      	adds	r2, r3, #4
 80067be:	600a      	str	r2, [r1, #0]
 80067c0:	681e      	ldr	r6, [r3, #0]
 80067c2:	6862      	ldr	r2, [r4, #4]
 80067c4:	2100      	movs	r1, #0
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7f9 fd22 	bl	8000210 <memchr>
 80067cc:	b108      	cbz	r0, 80067d2 <_printf_i+0x1f2>
 80067ce:	1b80      	subs	r0, r0, r6
 80067d0:	6060      	str	r0, [r4, #4]
 80067d2:	6863      	ldr	r3, [r4, #4]
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	2300      	movs	r3, #0
 80067d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067dc:	e7a8      	b.n	8006730 <_printf_i+0x150>
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	4632      	mov	r2, r6
 80067e2:	4649      	mov	r1, r9
 80067e4:	4640      	mov	r0, r8
 80067e6:	47d0      	blx	sl
 80067e8:	3001      	adds	r0, #1
 80067ea:	d0ab      	beq.n	8006744 <_printf_i+0x164>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	079b      	lsls	r3, r3, #30
 80067f0:	d413      	bmi.n	800681a <_printf_i+0x23a>
 80067f2:	68e0      	ldr	r0, [r4, #12]
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	4298      	cmp	r0, r3
 80067f8:	bfb8      	it	lt
 80067fa:	4618      	movlt	r0, r3
 80067fc:	e7a4      	b.n	8006748 <_printf_i+0x168>
 80067fe:	2301      	movs	r3, #1
 8006800:	4632      	mov	r2, r6
 8006802:	4649      	mov	r1, r9
 8006804:	4640      	mov	r0, r8
 8006806:	47d0      	blx	sl
 8006808:	3001      	adds	r0, #1
 800680a:	d09b      	beq.n	8006744 <_printf_i+0x164>
 800680c:	3501      	adds	r5, #1
 800680e:	68e3      	ldr	r3, [r4, #12]
 8006810:	9903      	ldr	r1, [sp, #12]
 8006812:	1a5b      	subs	r3, r3, r1
 8006814:	42ab      	cmp	r3, r5
 8006816:	dcf2      	bgt.n	80067fe <_printf_i+0x21e>
 8006818:	e7eb      	b.n	80067f2 <_printf_i+0x212>
 800681a:	2500      	movs	r5, #0
 800681c:	f104 0619 	add.w	r6, r4, #25
 8006820:	e7f5      	b.n	800680e <_printf_i+0x22e>
 8006822:	bf00      	nop
 8006824:	08009c82 	.word	0x08009c82
 8006828:	08009c93 	.word	0x08009c93

0800682c <_sbrk_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	4d06      	ldr	r5, [pc, #24]	; (8006848 <_sbrk_r+0x1c>)
 8006830:	2300      	movs	r3, #0
 8006832:	4604      	mov	r4, r0
 8006834:	4608      	mov	r0, r1
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	f7fa ffa8 	bl	800178c <_sbrk>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_sbrk_r+0x1a>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	b103      	cbz	r3, 8006846 <_sbrk_r+0x1a>
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	2000095c 	.word	0x2000095c

0800684c <siprintf>:
 800684c:	b40e      	push	{r1, r2, r3}
 800684e:	b500      	push	{lr}
 8006850:	b09c      	sub	sp, #112	; 0x70
 8006852:	ab1d      	add	r3, sp, #116	; 0x74
 8006854:	9002      	str	r0, [sp, #8]
 8006856:	9006      	str	r0, [sp, #24]
 8006858:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800685c:	4809      	ldr	r0, [pc, #36]	; (8006884 <siprintf+0x38>)
 800685e:	9107      	str	r1, [sp, #28]
 8006860:	9104      	str	r1, [sp, #16]
 8006862:	4909      	ldr	r1, [pc, #36]	; (8006888 <siprintf+0x3c>)
 8006864:	f853 2b04 	ldr.w	r2, [r3], #4
 8006868:	9105      	str	r1, [sp, #20]
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	a902      	add	r1, sp, #8
 8006870:	f001 faa4 	bl	8007dbc <_svfiprintf_r>
 8006874:	9b02      	ldr	r3, [sp, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	b01c      	add	sp, #112	; 0x70
 800687c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006880:	b003      	add	sp, #12
 8006882:	4770      	bx	lr
 8006884:	200005e4 	.word	0x200005e4
 8006888:	ffff0208 	.word	0xffff0208

0800688c <quorem>:
 800688c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	6903      	ldr	r3, [r0, #16]
 8006892:	690c      	ldr	r4, [r1, #16]
 8006894:	42a3      	cmp	r3, r4
 8006896:	4607      	mov	r7, r0
 8006898:	f2c0 8081 	blt.w	800699e <quorem+0x112>
 800689c:	3c01      	subs	r4, #1
 800689e:	f101 0814 	add.w	r8, r1, #20
 80068a2:	f100 0514 	add.w	r5, r0, #20
 80068a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068b4:	3301      	adds	r3, #1
 80068b6:	429a      	cmp	r2, r3
 80068b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80068c4:	d331      	bcc.n	800692a <quorem+0x9e>
 80068c6:	f04f 0e00 	mov.w	lr, #0
 80068ca:	4640      	mov	r0, r8
 80068cc:	46ac      	mov	ip, r5
 80068ce:	46f2      	mov	sl, lr
 80068d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80068d4:	b293      	uxth	r3, r2
 80068d6:	fb06 e303 	mla	r3, r6, r3, lr
 80068da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80068de:	b29b      	uxth	r3, r3
 80068e0:	ebaa 0303 	sub.w	r3, sl, r3
 80068e4:	0c12      	lsrs	r2, r2, #16
 80068e6:	f8dc a000 	ldr.w	sl, [ip]
 80068ea:	fb06 e202 	mla	r2, r6, r2, lr
 80068ee:	fa13 f38a 	uxtah	r3, r3, sl
 80068f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068f6:	fa1f fa82 	uxth.w	sl, r2
 80068fa:	f8dc 2000 	ldr.w	r2, [ip]
 80068fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006902:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006906:	b29b      	uxth	r3, r3
 8006908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800690c:	4581      	cmp	r9, r0
 800690e:	f84c 3b04 	str.w	r3, [ip], #4
 8006912:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006916:	d2db      	bcs.n	80068d0 <quorem+0x44>
 8006918:	f855 300b 	ldr.w	r3, [r5, fp]
 800691c:	b92b      	cbnz	r3, 800692a <quorem+0x9e>
 800691e:	9b01      	ldr	r3, [sp, #4]
 8006920:	3b04      	subs	r3, #4
 8006922:	429d      	cmp	r5, r3
 8006924:	461a      	mov	r2, r3
 8006926:	d32e      	bcc.n	8006986 <quorem+0xfa>
 8006928:	613c      	str	r4, [r7, #16]
 800692a:	4638      	mov	r0, r7
 800692c:	f001 f8b6 	bl	8007a9c <__mcmp>
 8006930:	2800      	cmp	r0, #0
 8006932:	db24      	blt.n	800697e <quorem+0xf2>
 8006934:	3601      	adds	r6, #1
 8006936:	4628      	mov	r0, r5
 8006938:	f04f 0c00 	mov.w	ip, #0
 800693c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006940:	f8d0 e000 	ldr.w	lr, [r0]
 8006944:	b293      	uxth	r3, r2
 8006946:	ebac 0303 	sub.w	r3, ip, r3
 800694a:	0c12      	lsrs	r2, r2, #16
 800694c:	fa13 f38e 	uxtah	r3, r3, lr
 8006950:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006958:	b29b      	uxth	r3, r3
 800695a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800695e:	45c1      	cmp	r9, r8
 8006960:	f840 3b04 	str.w	r3, [r0], #4
 8006964:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006968:	d2e8      	bcs.n	800693c <quorem+0xb0>
 800696a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800696e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006972:	b922      	cbnz	r2, 800697e <quorem+0xf2>
 8006974:	3b04      	subs	r3, #4
 8006976:	429d      	cmp	r5, r3
 8006978:	461a      	mov	r2, r3
 800697a:	d30a      	bcc.n	8006992 <quorem+0x106>
 800697c:	613c      	str	r4, [r7, #16]
 800697e:	4630      	mov	r0, r6
 8006980:	b003      	add	sp, #12
 8006982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006986:	6812      	ldr	r2, [r2, #0]
 8006988:	3b04      	subs	r3, #4
 800698a:	2a00      	cmp	r2, #0
 800698c:	d1cc      	bne.n	8006928 <quorem+0x9c>
 800698e:	3c01      	subs	r4, #1
 8006990:	e7c7      	b.n	8006922 <quorem+0x96>
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	3b04      	subs	r3, #4
 8006996:	2a00      	cmp	r2, #0
 8006998:	d1f0      	bne.n	800697c <quorem+0xf0>
 800699a:	3c01      	subs	r4, #1
 800699c:	e7eb      	b.n	8006976 <quorem+0xea>
 800699e:	2000      	movs	r0, #0
 80069a0:	e7ee      	b.n	8006980 <quorem+0xf4>
 80069a2:	0000      	movs	r0, r0
 80069a4:	0000      	movs	r0, r0
	...

080069a8 <_dtoa_r>:
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	ed2d 8b02 	vpush	{d8}
 80069b0:	ec57 6b10 	vmov	r6, r7, d0
 80069b4:	b095      	sub	sp, #84	; 0x54
 80069b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80069b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069bc:	9105      	str	r1, [sp, #20]
 80069be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80069c2:	4604      	mov	r4, r0
 80069c4:	9209      	str	r2, [sp, #36]	; 0x24
 80069c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80069c8:	b975      	cbnz	r5, 80069e8 <_dtoa_r+0x40>
 80069ca:	2010      	movs	r0, #16
 80069cc:	f7ff f9fc 	bl	8005dc8 <malloc>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6260      	str	r0, [r4, #36]	; 0x24
 80069d4:	b920      	cbnz	r0, 80069e0 <_dtoa_r+0x38>
 80069d6:	4bb2      	ldr	r3, [pc, #712]	; (8006ca0 <_dtoa_r+0x2f8>)
 80069d8:	21ea      	movs	r1, #234	; 0xea
 80069da:	48b2      	ldr	r0, [pc, #712]	; (8006ca4 <_dtoa_r+0x2fc>)
 80069dc:	f001 faee 	bl	8007fbc <__assert_func>
 80069e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069e4:	6005      	str	r5, [r0, #0]
 80069e6:	60c5      	str	r5, [r0, #12]
 80069e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069ea:	6819      	ldr	r1, [r3, #0]
 80069ec:	b151      	cbz	r1, 8006a04 <_dtoa_r+0x5c>
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	604a      	str	r2, [r1, #4]
 80069f2:	2301      	movs	r3, #1
 80069f4:	4093      	lsls	r3, r2
 80069f6:	608b      	str	r3, [r1, #8]
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 fe11 	bl	8007620 <_Bfree>
 80069fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	1e3b      	subs	r3, r7, #0
 8006a06:	bfb9      	ittee	lt
 8006a08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a0c:	9303      	strlt	r3, [sp, #12]
 8006a0e:	2300      	movge	r3, #0
 8006a10:	f8c8 3000 	strge.w	r3, [r8]
 8006a14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006a18:	4ba3      	ldr	r3, [pc, #652]	; (8006ca8 <_dtoa_r+0x300>)
 8006a1a:	bfbc      	itt	lt
 8006a1c:	2201      	movlt	r2, #1
 8006a1e:	f8c8 2000 	strlt.w	r2, [r8]
 8006a22:	ea33 0309 	bics.w	r3, r3, r9
 8006a26:	d11b      	bne.n	8006a60 <_dtoa_r+0xb8>
 8006a28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a34:	4333      	orrs	r3, r6
 8006a36:	f000 857a 	beq.w	800752e <_dtoa_r+0xb86>
 8006a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a3c:	b963      	cbnz	r3, 8006a58 <_dtoa_r+0xb0>
 8006a3e:	4b9b      	ldr	r3, [pc, #620]	; (8006cac <_dtoa_r+0x304>)
 8006a40:	e024      	b.n	8006a8c <_dtoa_r+0xe4>
 8006a42:	4b9b      	ldr	r3, [pc, #620]	; (8006cb0 <_dtoa_r+0x308>)
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	9800      	ldr	r0, [sp, #0]
 8006a4e:	b015      	add	sp, #84	; 0x54
 8006a50:	ecbd 8b02 	vpop	{d8}
 8006a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a58:	4b94      	ldr	r3, [pc, #592]	; (8006cac <_dtoa_r+0x304>)
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	3303      	adds	r3, #3
 8006a5e:	e7f3      	b.n	8006a48 <_dtoa_r+0xa0>
 8006a60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a64:	2200      	movs	r2, #0
 8006a66:	ec51 0b17 	vmov	r0, r1, d7
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006a70:	f7fa f842 	bl	8000af8 <__aeabi_dcmpeq>
 8006a74:	4680      	mov	r8, r0
 8006a76:	b158      	cbz	r0, 8006a90 <_dtoa_r+0xe8>
 8006a78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8551 	beq.w	8007528 <_dtoa_r+0xb80>
 8006a86:	488b      	ldr	r0, [pc, #556]	; (8006cb4 <_dtoa_r+0x30c>)
 8006a88:	6018      	str	r0, [r3, #0]
 8006a8a:	1e43      	subs	r3, r0, #1
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	e7dd      	b.n	8006a4c <_dtoa_r+0xa4>
 8006a90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006a94:	aa12      	add	r2, sp, #72	; 0x48
 8006a96:	a913      	add	r1, sp, #76	; 0x4c
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f001 f8a3 	bl	8007be4 <__d2b>
 8006a9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006aa2:	4683      	mov	fp, r0
 8006aa4:	2d00      	cmp	r5, #0
 8006aa6:	d07c      	beq.n	8006ba2 <_dtoa_r+0x1fa>
 8006aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aaa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ab2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006ab6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006aba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ac2:	4b7d      	ldr	r3, [pc, #500]	; (8006cb8 <_dtoa_r+0x310>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	4639      	mov	r1, r7
 8006aca:	f7f9 fbf5 	bl	80002b8 <__aeabi_dsub>
 8006ace:	a36e      	add	r3, pc, #440	; (adr r3, 8006c88 <_dtoa_r+0x2e0>)
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f7f9 fda8 	bl	8000628 <__aeabi_dmul>
 8006ad8:	a36d      	add	r3, pc, #436	; (adr r3, 8006c90 <_dtoa_r+0x2e8>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f7f9 fbed 	bl	80002bc <__adddf3>
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	460f      	mov	r7, r1
 8006ae8:	f7f9 fd34 	bl	8000554 <__aeabi_i2d>
 8006aec:	a36a      	add	r3, pc, #424	; (adr r3, 8006c98 <_dtoa_r+0x2f0>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fd99 	bl	8000628 <__aeabi_dmul>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4630      	mov	r0, r6
 8006afc:	4639      	mov	r1, r7
 8006afe:	f7f9 fbdd 	bl	80002bc <__adddf3>
 8006b02:	4606      	mov	r6, r0
 8006b04:	460f      	mov	r7, r1
 8006b06:	f7fa f83f 	bl	8000b88 <__aeabi_d2iz>
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4682      	mov	sl, r0
 8006b0e:	2300      	movs	r3, #0
 8006b10:	4630      	mov	r0, r6
 8006b12:	4639      	mov	r1, r7
 8006b14:	f7f9 fffa 	bl	8000b0c <__aeabi_dcmplt>
 8006b18:	b148      	cbz	r0, 8006b2e <_dtoa_r+0x186>
 8006b1a:	4650      	mov	r0, sl
 8006b1c:	f7f9 fd1a 	bl	8000554 <__aeabi_i2d>
 8006b20:	4632      	mov	r2, r6
 8006b22:	463b      	mov	r3, r7
 8006b24:	f7f9 ffe8 	bl	8000af8 <__aeabi_dcmpeq>
 8006b28:	b908      	cbnz	r0, 8006b2e <_dtoa_r+0x186>
 8006b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b2e:	f1ba 0f16 	cmp.w	sl, #22
 8006b32:	d854      	bhi.n	8006bde <_dtoa_r+0x236>
 8006b34:	4b61      	ldr	r3, [pc, #388]	; (8006cbc <_dtoa_r+0x314>)
 8006b36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b42:	f7f9 ffe3 	bl	8000b0c <__aeabi_dcmplt>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d04b      	beq.n	8006be2 <_dtoa_r+0x23a>
 8006b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b4e:	2300      	movs	r3, #0
 8006b50:	930e      	str	r3, [sp, #56]	; 0x38
 8006b52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b54:	1b5d      	subs	r5, r3, r5
 8006b56:	1e6b      	subs	r3, r5, #1
 8006b58:	9304      	str	r3, [sp, #16]
 8006b5a:	bf43      	ittte	mi
 8006b5c:	2300      	movmi	r3, #0
 8006b5e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006b62:	9304      	strmi	r3, [sp, #16]
 8006b64:	f04f 0800 	movpl.w	r8, #0
 8006b68:	f1ba 0f00 	cmp.w	sl, #0
 8006b6c:	db3b      	blt.n	8006be6 <_dtoa_r+0x23e>
 8006b6e:	9b04      	ldr	r3, [sp, #16]
 8006b70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006b74:	4453      	add	r3, sl
 8006b76:	9304      	str	r3, [sp, #16]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	9306      	str	r3, [sp, #24]
 8006b7c:	9b05      	ldr	r3, [sp, #20]
 8006b7e:	2b09      	cmp	r3, #9
 8006b80:	d869      	bhi.n	8006c56 <_dtoa_r+0x2ae>
 8006b82:	2b05      	cmp	r3, #5
 8006b84:	bfc4      	itt	gt
 8006b86:	3b04      	subgt	r3, #4
 8006b88:	9305      	strgt	r3, [sp, #20]
 8006b8a:	9b05      	ldr	r3, [sp, #20]
 8006b8c:	f1a3 0302 	sub.w	r3, r3, #2
 8006b90:	bfcc      	ite	gt
 8006b92:	2500      	movgt	r5, #0
 8006b94:	2501      	movle	r5, #1
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d869      	bhi.n	8006c6e <_dtoa_r+0x2c6>
 8006b9a:	e8df f003 	tbb	[pc, r3]
 8006b9e:	4e2c      	.short	0x4e2c
 8006ba0:	5a4c      	.short	0x5a4c
 8006ba2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006ba6:	441d      	add	r5, r3
 8006ba8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bac:	2b20      	cmp	r3, #32
 8006bae:	bfc1      	itttt	gt
 8006bb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006bb8:	fa09 f303 	lslgt.w	r3, r9, r3
 8006bbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006bc0:	bfda      	itte	le
 8006bc2:	f1c3 0320 	rsble	r3, r3, #32
 8006bc6:	fa06 f003 	lslle.w	r0, r6, r3
 8006bca:	4318      	orrgt	r0, r3
 8006bcc:	f7f9 fcb2 	bl	8000534 <__aeabi_ui2d>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006bd8:	3d01      	subs	r5, #1
 8006bda:	9310      	str	r3, [sp, #64]	; 0x40
 8006bdc:	e771      	b.n	8006ac2 <_dtoa_r+0x11a>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e7b6      	b.n	8006b50 <_dtoa_r+0x1a8>
 8006be2:	900e      	str	r0, [sp, #56]	; 0x38
 8006be4:	e7b5      	b.n	8006b52 <_dtoa_r+0x1aa>
 8006be6:	f1ca 0300 	rsb	r3, sl, #0
 8006bea:	9306      	str	r3, [sp, #24]
 8006bec:	2300      	movs	r3, #0
 8006bee:	eba8 080a 	sub.w	r8, r8, sl
 8006bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8006bf4:	e7c2      	b.n	8006b7c <_dtoa_r+0x1d4>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9308      	str	r3, [sp, #32]
 8006bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dc39      	bgt.n	8006c74 <_dtoa_r+0x2cc>
 8006c00:	f04f 0901 	mov.w	r9, #1
 8006c04:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c08:	464b      	mov	r3, r9
 8006c0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006c0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c10:	2200      	movs	r2, #0
 8006c12:	6042      	str	r2, [r0, #4]
 8006c14:	2204      	movs	r2, #4
 8006c16:	f102 0614 	add.w	r6, r2, #20
 8006c1a:	429e      	cmp	r6, r3
 8006c1c:	6841      	ldr	r1, [r0, #4]
 8006c1e:	d92f      	bls.n	8006c80 <_dtoa_r+0x2d8>
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fcbd 	bl	80075a0 <_Balloc>
 8006c26:	9000      	str	r0, [sp, #0]
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d14b      	bne.n	8006cc4 <_dtoa_r+0x31c>
 8006c2c:	4b24      	ldr	r3, [pc, #144]	; (8006cc0 <_dtoa_r+0x318>)
 8006c2e:	4602      	mov	r2, r0
 8006c30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006c34:	e6d1      	b.n	80069da <_dtoa_r+0x32>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e7de      	b.n	8006bf8 <_dtoa_r+0x250>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9308      	str	r3, [sp, #32]
 8006c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c40:	eb0a 0903 	add.w	r9, sl, r3
 8006c44:	f109 0301 	add.w	r3, r9, #1
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	9301      	str	r3, [sp, #4]
 8006c4c:	bfb8      	it	lt
 8006c4e:	2301      	movlt	r3, #1
 8006c50:	e7dd      	b.n	8006c0e <_dtoa_r+0x266>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e7f2      	b.n	8006c3c <_dtoa_r+0x294>
 8006c56:	2501      	movs	r5, #1
 8006c58:	2300      	movs	r3, #0
 8006c5a:	9305      	str	r3, [sp, #20]
 8006c5c:	9508      	str	r5, [sp, #32]
 8006c5e:	f04f 39ff 	mov.w	r9, #4294967295
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c68:	2312      	movs	r3, #18
 8006c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c6c:	e7cf      	b.n	8006c0e <_dtoa_r+0x266>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	9308      	str	r3, [sp, #32]
 8006c72:	e7f4      	b.n	8006c5e <_dtoa_r+0x2b6>
 8006c74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006c78:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	e7c6      	b.n	8006c0e <_dtoa_r+0x266>
 8006c80:	3101      	adds	r1, #1
 8006c82:	6041      	str	r1, [r0, #4]
 8006c84:	0052      	lsls	r2, r2, #1
 8006c86:	e7c6      	b.n	8006c16 <_dtoa_r+0x26e>
 8006c88:	636f4361 	.word	0x636f4361
 8006c8c:	3fd287a7 	.word	0x3fd287a7
 8006c90:	8b60c8b3 	.word	0x8b60c8b3
 8006c94:	3fc68a28 	.word	0x3fc68a28
 8006c98:	509f79fb 	.word	0x509f79fb
 8006c9c:	3fd34413 	.word	0x3fd34413
 8006ca0:	08009cb1 	.word	0x08009cb1
 8006ca4:	08009cc8 	.word	0x08009cc8
 8006ca8:	7ff00000 	.word	0x7ff00000
 8006cac:	08009cad 	.word	0x08009cad
 8006cb0:	08009ca4 	.word	0x08009ca4
 8006cb4:	08009c81 	.word	0x08009c81
 8006cb8:	3ff80000 	.word	0x3ff80000
 8006cbc:	08009dc0 	.word	0x08009dc0
 8006cc0:	08009d27 	.word	0x08009d27
 8006cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cc6:	9a00      	ldr	r2, [sp, #0]
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	9b01      	ldr	r3, [sp, #4]
 8006ccc:	2b0e      	cmp	r3, #14
 8006cce:	f200 80ad 	bhi.w	8006e2c <_dtoa_r+0x484>
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	f000 80aa 	beq.w	8006e2c <_dtoa_r+0x484>
 8006cd8:	f1ba 0f00 	cmp.w	sl, #0
 8006cdc:	dd36      	ble.n	8006d4c <_dtoa_r+0x3a4>
 8006cde:	4ac3      	ldr	r2, [pc, #780]	; (8006fec <_dtoa_r+0x644>)
 8006ce0:	f00a 030f 	and.w	r3, sl, #15
 8006ce4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ce8:	ed93 7b00 	vldr	d7, [r3]
 8006cec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006cf0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006cf4:	eeb0 8a47 	vmov.f32	s16, s14
 8006cf8:	eef0 8a67 	vmov.f32	s17, s15
 8006cfc:	d016      	beq.n	8006d2c <_dtoa_r+0x384>
 8006cfe:	4bbc      	ldr	r3, [pc, #752]	; (8006ff0 <_dtoa_r+0x648>)
 8006d00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d08:	f7f9 fdb8 	bl	800087c <__aeabi_ddiv>
 8006d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d10:	f007 070f 	and.w	r7, r7, #15
 8006d14:	2503      	movs	r5, #3
 8006d16:	4eb6      	ldr	r6, [pc, #728]	; (8006ff0 <_dtoa_r+0x648>)
 8006d18:	b957      	cbnz	r7, 8006d30 <_dtoa_r+0x388>
 8006d1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d1e:	ec53 2b18 	vmov	r2, r3, d8
 8006d22:	f7f9 fdab 	bl	800087c <__aeabi_ddiv>
 8006d26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d2a:	e029      	b.n	8006d80 <_dtoa_r+0x3d8>
 8006d2c:	2502      	movs	r5, #2
 8006d2e:	e7f2      	b.n	8006d16 <_dtoa_r+0x36e>
 8006d30:	07f9      	lsls	r1, r7, #31
 8006d32:	d508      	bpl.n	8006d46 <_dtoa_r+0x39e>
 8006d34:	ec51 0b18 	vmov	r0, r1, d8
 8006d38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d3c:	f7f9 fc74 	bl	8000628 <__aeabi_dmul>
 8006d40:	ec41 0b18 	vmov	d8, r0, r1
 8006d44:	3501      	adds	r5, #1
 8006d46:	107f      	asrs	r7, r7, #1
 8006d48:	3608      	adds	r6, #8
 8006d4a:	e7e5      	b.n	8006d18 <_dtoa_r+0x370>
 8006d4c:	f000 80a6 	beq.w	8006e9c <_dtoa_r+0x4f4>
 8006d50:	f1ca 0600 	rsb	r6, sl, #0
 8006d54:	4ba5      	ldr	r3, [pc, #660]	; (8006fec <_dtoa_r+0x644>)
 8006d56:	4fa6      	ldr	r7, [pc, #664]	; (8006ff0 <_dtoa_r+0x648>)
 8006d58:	f006 020f 	and.w	r2, r6, #15
 8006d5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d68:	f7f9 fc5e 	bl	8000628 <__aeabi_dmul>
 8006d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d70:	1136      	asrs	r6, r6, #4
 8006d72:	2300      	movs	r3, #0
 8006d74:	2502      	movs	r5, #2
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	f040 8085 	bne.w	8006e86 <_dtoa_r+0x4de>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1d2      	bne.n	8006d26 <_dtoa_r+0x37e>
 8006d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 808c 	beq.w	8006ea0 <_dtoa_r+0x4f8>
 8006d88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d8c:	4b99      	ldr	r3, [pc, #612]	; (8006ff4 <_dtoa_r+0x64c>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	4630      	mov	r0, r6
 8006d92:	4639      	mov	r1, r7
 8006d94:	f7f9 feba 	bl	8000b0c <__aeabi_dcmplt>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f000 8081 	beq.w	8006ea0 <_dtoa_r+0x4f8>
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d07d      	beq.n	8006ea0 <_dtoa_r+0x4f8>
 8006da4:	f1b9 0f00 	cmp.w	r9, #0
 8006da8:	dd3c      	ble.n	8006e24 <_dtoa_r+0x47c>
 8006daa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006dae:	9307      	str	r3, [sp, #28]
 8006db0:	2200      	movs	r2, #0
 8006db2:	4b91      	ldr	r3, [pc, #580]	; (8006ff8 <_dtoa_r+0x650>)
 8006db4:	4630      	mov	r0, r6
 8006db6:	4639      	mov	r1, r7
 8006db8:	f7f9 fc36 	bl	8000628 <__aeabi_dmul>
 8006dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dc0:	3501      	adds	r5, #1
 8006dc2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006dc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f7f9 fbc2 	bl	8000554 <__aeabi_i2d>
 8006dd0:	4632      	mov	r2, r6
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	f7f9 fc28 	bl	8000628 <__aeabi_dmul>
 8006dd8:	4b88      	ldr	r3, [pc, #544]	; (8006ffc <_dtoa_r+0x654>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f7f9 fa6e 	bl	80002bc <__adddf3>
 8006de0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006de8:	9303      	str	r3, [sp, #12]
 8006dea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d15c      	bne.n	8006eaa <_dtoa_r+0x502>
 8006df0:	4b83      	ldr	r3, [pc, #524]	; (8007000 <_dtoa_r+0x658>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	4630      	mov	r0, r6
 8006df6:	4639      	mov	r1, r7
 8006df8:	f7f9 fa5e 	bl	80002b8 <__aeabi_dsub>
 8006dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e00:	4606      	mov	r6, r0
 8006e02:	460f      	mov	r7, r1
 8006e04:	f7f9 fea0 	bl	8000b48 <__aeabi_dcmpgt>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	f040 8296 	bne.w	800733a <_dtoa_r+0x992>
 8006e0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e12:	4630      	mov	r0, r6
 8006e14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e18:	4639      	mov	r1, r7
 8006e1a:	f7f9 fe77 	bl	8000b0c <__aeabi_dcmplt>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	f040 8288 	bne.w	8007334 <_dtoa_r+0x98c>
 8006e24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f2c0 8158 	blt.w	80070e4 <_dtoa_r+0x73c>
 8006e34:	f1ba 0f0e 	cmp.w	sl, #14
 8006e38:	f300 8154 	bgt.w	80070e4 <_dtoa_r+0x73c>
 8006e3c:	4b6b      	ldr	r3, [pc, #428]	; (8006fec <_dtoa_r+0x644>)
 8006e3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006e42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f280 80e3 	bge.w	8007014 <_dtoa_r+0x66c>
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f300 80df 	bgt.w	8007014 <_dtoa_r+0x66c>
 8006e56:	f040 826d 	bne.w	8007334 <_dtoa_r+0x98c>
 8006e5a:	4b69      	ldr	r3, [pc, #420]	; (8007000 <_dtoa_r+0x658>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	4640      	mov	r0, r8
 8006e60:	4649      	mov	r1, r9
 8006e62:	f7f9 fbe1 	bl	8000628 <__aeabi_dmul>
 8006e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e6a:	f7f9 fe63 	bl	8000b34 <__aeabi_dcmpge>
 8006e6e:	9e01      	ldr	r6, [sp, #4]
 8006e70:	4637      	mov	r7, r6
 8006e72:	2800      	cmp	r0, #0
 8006e74:	f040 8243 	bne.w	80072fe <_dtoa_r+0x956>
 8006e78:	9d00      	ldr	r5, [sp, #0]
 8006e7a:	2331      	movs	r3, #49	; 0x31
 8006e7c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e80:	f10a 0a01 	add.w	sl, sl, #1
 8006e84:	e23f      	b.n	8007306 <_dtoa_r+0x95e>
 8006e86:	07f2      	lsls	r2, r6, #31
 8006e88:	d505      	bpl.n	8006e96 <_dtoa_r+0x4ee>
 8006e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e8e:	f7f9 fbcb 	bl	8000628 <__aeabi_dmul>
 8006e92:	3501      	adds	r5, #1
 8006e94:	2301      	movs	r3, #1
 8006e96:	1076      	asrs	r6, r6, #1
 8006e98:	3708      	adds	r7, #8
 8006e9a:	e76c      	b.n	8006d76 <_dtoa_r+0x3ce>
 8006e9c:	2502      	movs	r5, #2
 8006e9e:	e76f      	b.n	8006d80 <_dtoa_r+0x3d8>
 8006ea0:	9b01      	ldr	r3, [sp, #4]
 8006ea2:	f8cd a01c 	str.w	sl, [sp, #28]
 8006ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ea8:	e78d      	b.n	8006dc6 <_dtoa_r+0x41e>
 8006eaa:	9900      	ldr	r1, [sp, #0]
 8006eac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eb0:	4b4e      	ldr	r3, [pc, #312]	; (8006fec <_dtoa_r+0x644>)
 8006eb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006eb6:	4401      	add	r1, r0
 8006eb8:	9102      	str	r1, [sp, #8]
 8006eba:	9908      	ldr	r1, [sp, #32]
 8006ebc:	eeb0 8a47 	vmov.f32	s16, s14
 8006ec0:	eef0 8a67 	vmov.f32	s17, s15
 8006ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ec8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ecc:	2900      	cmp	r1, #0
 8006ece:	d045      	beq.n	8006f5c <_dtoa_r+0x5b4>
 8006ed0:	494c      	ldr	r1, [pc, #304]	; (8007004 <_dtoa_r+0x65c>)
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	f7f9 fcd2 	bl	800087c <__aeabi_ddiv>
 8006ed8:	ec53 2b18 	vmov	r2, r3, d8
 8006edc:	f7f9 f9ec 	bl	80002b8 <__aeabi_dsub>
 8006ee0:	9d00      	ldr	r5, [sp, #0]
 8006ee2:	ec41 0b18 	vmov	d8, r0, r1
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f7f9 fe4d 	bl	8000b88 <__aeabi_d2iz>
 8006eee:	900c      	str	r0, [sp, #48]	; 0x30
 8006ef0:	f7f9 fb30 	bl	8000554 <__aeabi_i2d>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4630      	mov	r0, r6
 8006efa:	4639      	mov	r1, r7
 8006efc:	f7f9 f9dc 	bl	80002b8 <__aeabi_dsub>
 8006f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f02:	3330      	adds	r3, #48	; 0x30
 8006f04:	f805 3b01 	strb.w	r3, [r5], #1
 8006f08:	ec53 2b18 	vmov	r2, r3, d8
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	460f      	mov	r7, r1
 8006f10:	f7f9 fdfc 	bl	8000b0c <__aeabi_dcmplt>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d165      	bne.n	8006fe4 <_dtoa_r+0x63c>
 8006f18:	4632      	mov	r2, r6
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	4935      	ldr	r1, [pc, #212]	; (8006ff4 <_dtoa_r+0x64c>)
 8006f1e:	2000      	movs	r0, #0
 8006f20:	f7f9 f9ca 	bl	80002b8 <__aeabi_dsub>
 8006f24:	ec53 2b18 	vmov	r2, r3, d8
 8006f28:	f7f9 fdf0 	bl	8000b0c <__aeabi_dcmplt>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	f040 80b9 	bne.w	80070a4 <_dtoa_r+0x6fc>
 8006f32:	9b02      	ldr	r3, [sp, #8]
 8006f34:	429d      	cmp	r5, r3
 8006f36:	f43f af75 	beq.w	8006e24 <_dtoa_r+0x47c>
 8006f3a:	4b2f      	ldr	r3, [pc, #188]	; (8006ff8 <_dtoa_r+0x650>)
 8006f3c:	ec51 0b18 	vmov	r0, r1, d8
 8006f40:	2200      	movs	r2, #0
 8006f42:	f7f9 fb71 	bl	8000628 <__aeabi_dmul>
 8006f46:	4b2c      	ldr	r3, [pc, #176]	; (8006ff8 <_dtoa_r+0x650>)
 8006f48:	ec41 0b18 	vmov	d8, r0, r1
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4630      	mov	r0, r6
 8006f50:	4639      	mov	r1, r7
 8006f52:	f7f9 fb69 	bl	8000628 <__aeabi_dmul>
 8006f56:	4606      	mov	r6, r0
 8006f58:	460f      	mov	r7, r1
 8006f5a:	e7c4      	b.n	8006ee6 <_dtoa_r+0x53e>
 8006f5c:	ec51 0b17 	vmov	r0, r1, d7
 8006f60:	f7f9 fb62 	bl	8000628 <__aeabi_dmul>
 8006f64:	9b02      	ldr	r3, [sp, #8]
 8006f66:	9d00      	ldr	r5, [sp, #0]
 8006f68:	930c      	str	r3, [sp, #48]	; 0x30
 8006f6a:	ec41 0b18 	vmov	d8, r0, r1
 8006f6e:	4639      	mov	r1, r7
 8006f70:	4630      	mov	r0, r6
 8006f72:	f7f9 fe09 	bl	8000b88 <__aeabi_d2iz>
 8006f76:	9011      	str	r0, [sp, #68]	; 0x44
 8006f78:	f7f9 faec 	bl	8000554 <__aeabi_i2d>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4630      	mov	r0, r6
 8006f82:	4639      	mov	r1, r7
 8006f84:	f7f9 f998 	bl	80002b8 <__aeabi_dsub>
 8006f88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f8a:	3330      	adds	r3, #48	; 0x30
 8006f8c:	f805 3b01 	strb.w	r3, [r5], #1
 8006f90:	9b02      	ldr	r3, [sp, #8]
 8006f92:	429d      	cmp	r5, r3
 8006f94:	4606      	mov	r6, r0
 8006f96:	460f      	mov	r7, r1
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	d134      	bne.n	8007008 <_dtoa_r+0x660>
 8006f9e:	4b19      	ldr	r3, [pc, #100]	; (8007004 <_dtoa_r+0x65c>)
 8006fa0:	ec51 0b18 	vmov	r0, r1, d8
 8006fa4:	f7f9 f98a 	bl	80002bc <__adddf3>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4630      	mov	r0, r6
 8006fae:	4639      	mov	r1, r7
 8006fb0:	f7f9 fdca 	bl	8000b48 <__aeabi_dcmpgt>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d175      	bne.n	80070a4 <_dtoa_r+0x6fc>
 8006fb8:	ec53 2b18 	vmov	r2, r3, d8
 8006fbc:	4911      	ldr	r1, [pc, #68]	; (8007004 <_dtoa_r+0x65c>)
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	f7f9 f97a 	bl	80002b8 <__aeabi_dsub>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 fd9e 	bl	8000b0c <__aeabi_dcmplt>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	f43f af27 	beq.w	8006e24 <_dtoa_r+0x47c>
 8006fd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fd8:	1e6b      	subs	r3, r5, #1
 8006fda:	930c      	str	r3, [sp, #48]	; 0x30
 8006fdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fe0:	2b30      	cmp	r3, #48	; 0x30
 8006fe2:	d0f8      	beq.n	8006fd6 <_dtoa_r+0x62e>
 8006fe4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006fe8:	e04a      	b.n	8007080 <_dtoa_r+0x6d8>
 8006fea:	bf00      	nop
 8006fec:	08009dc0 	.word	0x08009dc0
 8006ff0:	08009d98 	.word	0x08009d98
 8006ff4:	3ff00000 	.word	0x3ff00000
 8006ff8:	40240000 	.word	0x40240000
 8006ffc:	401c0000 	.word	0x401c0000
 8007000:	40140000 	.word	0x40140000
 8007004:	3fe00000 	.word	0x3fe00000
 8007008:	4baf      	ldr	r3, [pc, #700]	; (80072c8 <_dtoa_r+0x920>)
 800700a:	f7f9 fb0d 	bl	8000628 <__aeabi_dmul>
 800700e:	4606      	mov	r6, r0
 8007010:	460f      	mov	r7, r1
 8007012:	e7ac      	b.n	8006f6e <_dtoa_r+0x5c6>
 8007014:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007018:	9d00      	ldr	r5, [sp, #0]
 800701a:	4642      	mov	r2, r8
 800701c:	464b      	mov	r3, r9
 800701e:	4630      	mov	r0, r6
 8007020:	4639      	mov	r1, r7
 8007022:	f7f9 fc2b 	bl	800087c <__aeabi_ddiv>
 8007026:	f7f9 fdaf 	bl	8000b88 <__aeabi_d2iz>
 800702a:	9002      	str	r0, [sp, #8]
 800702c:	f7f9 fa92 	bl	8000554 <__aeabi_i2d>
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	f7f9 faf8 	bl	8000628 <__aeabi_dmul>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4630      	mov	r0, r6
 800703e:	4639      	mov	r1, r7
 8007040:	f7f9 f93a 	bl	80002b8 <__aeabi_dsub>
 8007044:	9e02      	ldr	r6, [sp, #8]
 8007046:	9f01      	ldr	r7, [sp, #4]
 8007048:	3630      	adds	r6, #48	; 0x30
 800704a:	f805 6b01 	strb.w	r6, [r5], #1
 800704e:	9e00      	ldr	r6, [sp, #0]
 8007050:	1bae      	subs	r6, r5, r6
 8007052:	42b7      	cmp	r7, r6
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	d137      	bne.n	80070ca <_dtoa_r+0x722>
 800705a:	f7f9 f92f 	bl	80002bc <__adddf3>
 800705e:	4642      	mov	r2, r8
 8007060:	464b      	mov	r3, r9
 8007062:	4606      	mov	r6, r0
 8007064:	460f      	mov	r7, r1
 8007066:	f7f9 fd6f 	bl	8000b48 <__aeabi_dcmpgt>
 800706a:	b9c8      	cbnz	r0, 80070a0 <_dtoa_r+0x6f8>
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	4630      	mov	r0, r6
 8007072:	4639      	mov	r1, r7
 8007074:	f7f9 fd40 	bl	8000af8 <__aeabi_dcmpeq>
 8007078:	b110      	cbz	r0, 8007080 <_dtoa_r+0x6d8>
 800707a:	9b02      	ldr	r3, [sp, #8]
 800707c:	07d9      	lsls	r1, r3, #31
 800707e:	d40f      	bmi.n	80070a0 <_dtoa_r+0x6f8>
 8007080:	4620      	mov	r0, r4
 8007082:	4659      	mov	r1, fp
 8007084:	f000 facc 	bl	8007620 <_Bfree>
 8007088:	2300      	movs	r3, #0
 800708a:	702b      	strb	r3, [r5, #0]
 800708c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800708e:	f10a 0001 	add.w	r0, sl, #1
 8007092:	6018      	str	r0, [r3, #0]
 8007094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007096:	2b00      	cmp	r3, #0
 8007098:	f43f acd8 	beq.w	8006a4c <_dtoa_r+0xa4>
 800709c:	601d      	str	r5, [r3, #0]
 800709e:	e4d5      	b.n	8006a4c <_dtoa_r+0xa4>
 80070a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80070a4:	462b      	mov	r3, r5
 80070a6:	461d      	mov	r5, r3
 80070a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ac:	2a39      	cmp	r2, #57	; 0x39
 80070ae:	d108      	bne.n	80070c2 <_dtoa_r+0x71a>
 80070b0:	9a00      	ldr	r2, [sp, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d1f7      	bne.n	80070a6 <_dtoa_r+0x6fe>
 80070b6:	9a07      	ldr	r2, [sp, #28]
 80070b8:	9900      	ldr	r1, [sp, #0]
 80070ba:	3201      	adds	r2, #1
 80070bc:	9207      	str	r2, [sp, #28]
 80070be:	2230      	movs	r2, #48	; 0x30
 80070c0:	700a      	strb	r2, [r1, #0]
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	3201      	adds	r2, #1
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	e78c      	b.n	8006fe4 <_dtoa_r+0x63c>
 80070ca:	4b7f      	ldr	r3, [pc, #508]	; (80072c8 <_dtoa_r+0x920>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	f7f9 faab 	bl	8000628 <__aeabi_dmul>
 80070d2:	2200      	movs	r2, #0
 80070d4:	2300      	movs	r3, #0
 80070d6:	4606      	mov	r6, r0
 80070d8:	460f      	mov	r7, r1
 80070da:	f7f9 fd0d 	bl	8000af8 <__aeabi_dcmpeq>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d09b      	beq.n	800701a <_dtoa_r+0x672>
 80070e2:	e7cd      	b.n	8007080 <_dtoa_r+0x6d8>
 80070e4:	9a08      	ldr	r2, [sp, #32]
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	f000 80c4 	beq.w	8007274 <_dtoa_r+0x8cc>
 80070ec:	9a05      	ldr	r2, [sp, #20]
 80070ee:	2a01      	cmp	r2, #1
 80070f0:	f300 80a8 	bgt.w	8007244 <_dtoa_r+0x89c>
 80070f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	f000 80a0 	beq.w	800723c <_dtoa_r+0x894>
 80070fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007100:	9e06      	ldr	r6, [sp, #24]
 8007102:	4645      	mov	r5, r8
 8007104:	9a04      	ldr	r2, [sp, #16]
 8007106:	2101      	movs	r1, #1
 8007108:	441a      	add	r2, r3
 800710a:	4620      	mov	r0, r4
 800710c:	4498      	add	r8, r3
 800710e:	9204      	str	r2, [sp, #16]
 8007110:	f000 fb42 	bl	8007798 <__i2b>
 8007114:	4607      	mov	r7, r0
 8007116:	2d00      	cmp	r5, #0
 8007118:	dd0b      	ble.n	8007132 <_dtoa_r+0x78a>
 800711a:	9b04      	ldr	r3, [sp, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	dd08      	ble.n	8007132 <_dtoa_r+0x78a>
 8007120:	42ab      	cmp	r3, r5
 8007122:	9a04      	ldr	r2, [sp, #16]
 8007124:	bfa8      	it	ge
 8007126:	462b      	movge	r3, r5
 8007128:	eba8 0803 	sub.w	r8, r8, r3
 800712c:	1aed      	subs	r5, r5, r3
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	9304      	str	r3, [sp, #16]
 8007132:	9b06      	ldr	r3, [sp, #24]
 8007134:	b1fb      	cbz	r3, 8007176 <_dtoa_r+0x7ce>
 8007136:	9b08      	ldr	r3, [sp, #32]
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 809f 	beq.w	800727c <_dtoa_r+0x8d4>
 800713e:	2e00      	cmp	r6, #0
 8007140:	dd11      	ble.n	8007166 <_dtoa_r+0x7be>
 8007142:	4639      	mov	r1, r7
 8007144:	4632      	mov	r2, r6
 8007146:	4620      	mov	r0, r4
 8007148:	f000 fbe2 	bl	8007910 <__pow5mult>
 800714c:	465a      	mov	r2, fp
 800714e:	4601      	mov	r1, r0
 8007150:	4607      	mov	r7, r0
 8007152:	4620      	mov	r0, r4
 8007154:	f000 fb36 	bl	80077c4 <__multiply>
 8007158:	4659      	mov	r1, fp
 800715a:	9007      	str	r0, [sp, #28]
 800715c:	4620      	mov	r0, r4
 800715e:	f000 fa5f 	bl	8007620 <_Bfree>
 8007162:	9b07      	ldr	r3, [sp, #28]
 8007164:	469b      	mov	fp, r3
 8007166:	9b06      	ldr	r3, [sp, #24]
 8007168:	1b9a      	subs	r2, r3, r6
 800716a:	d004      	beq.n	8007176 <_dtoa_r+0x7ce>
 800716c:	4659      	mov	r1, fp
 800716e:	4620      	mov	r0, r4
 8007170:	f000 fbce 	bl	8007910 <__pow5mult>
 8007174:	4683      	mov	fp, r0
 8007176:	2101      	movs	r1, #1
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fb0d 	bl	8007798 <__i2b>
 800717e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007180:	2b00      	cmp	r3, #0
 8007182:	4606      	mov	r6, r0
 8007184:	dd7c      	ble.n	8007280 <_dtoa_r+0x8d8>
 8007186:	461a      	mov	r2, r3
 8007188:	4601      	mov	r1, r0
 800718a:	4620      	mov	r0, r4
 800718c:	f000 fbc0 	bl	8007910 <__pow5mult>
 8007190:	9b05      	ldr	r3, [sp, #20]
 8007192:	2b01      	cmp	r3, #1
 8007194:	4606      	mov	r6, r0
 8007196:	dd76      	ble.n	8007286 <_dtoa_r+0x8de>
 8007198:	2300      	movs	r3, #0
 800719a:	9306      	str	r3, [sp, #24]
 800719c:	6933      	ldr	r3, [r6, #16]
 800719e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071a2:	6918      	ldr	r0, [r3, #16]
 80071a4:	f000 faa8 	bl	80076f8 <__hi0bits>
 80071a8:	f1c0 0020 	rsb	r0, r0, #32
 80071ac:	9b04      	ldr	r3, [sp, #16]
 80071ae:	4418      	add	r0, r3
 80071b0:	f010 001f 	ands.w	r0, r0, #31
 80071b4:	f000 8086 	beq.w	80072c4 <_dtoa_r+0x91c>
 80071b8:	f1c0 0320 	rsb	r3, r0, #32
 80071bc:	2b04      	cmp	r3, #4
 80071be:	dd7f      	ble.n	80072c0 <_dtoa_r+0x918>
 80071c0:	f1c0 001c 	rsb	r0, r0, #28
 80071c4:	9b04      	ldr	r3, [sp, #16]
 80071c6:	4403      	add	r3, r0
 80071c8:	4480      	add	r8, r0
 80071ca:	4405      	add	r5, r0
 80071cc:	9304      	str	r3, [sp, #16]
 80071ce:	f1b8 0f00 	cmp.w	r8, #0
 80071d2:	dd05      	ble.n	80071e0 <_dtoa_r+0x838>
 80071d4:	4659      	mov	r1, fp
 80071d6:	4642      	mov	r2, r8
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 fbf3 	bl	80079c4 <__lshift>
 80071de:	4683      	mov	fp, r0
 80071e0:	9b04      	ldr	r3, [sp, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	dd05      	ble.n	80071f2 <_dtoa_r+0x84a>
 80071e6:	4631      	mov	r1, r6
 80071e8:	461a      	mov	r2, r3
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 fbea 	bl	80079c4 <__lshift>
 80071f0:	4606      	mov	r6, r0
 80071f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d069      	beq.n	80072cc <_dtoa_r+0x924>
 80071f8:	4631      	mov	r1, r6
 80071fa:	4658      	mov	r0, fp
 80071fc:	f000 fc4e 	bl	8007a9c <__mcmp>
 8007200:	2800      	cmp	r0, #0
 8007202:	da63      	bge.n	80072cc <_dtoa_r+0x924>
 8007204:	2300      	movs	r3, #0
 8007206:	4659      	mov	r1, fp
 8007208:	220a      	movs	r2, #10
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fa2a 	bl	8007664 <__multadd>
 8007210:	9b08      	ldr	r3, [sp, #32]
 8007212:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007216:	4683      	mov	fp, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 818f 	beq.w	800753c <_dtoa_r+0xb94>
 800721e:	4639      	mov	r1, r7
 8007220:	2300      	movs	r3, #0
 8007222:	220a      	movs	r2, #10
 8007224:	4620      	mov	r0, r4
 8007226:	f000 fa1d 	bl	8007664 <__multadd>
 800722a:	f1b9 0f00 	cmp.w	r9, #0
 800722e:	4607      	mov	r7, r0
 8007230:	f300 808e 	bgt.w	8007350 <_dtoa_r+0x9a8>
 8007234:	9b05      	ldr	r3, [sp, #20]
 8007236:	2b02      	cmp	r3, #2
 8007238:	dc50      	bgt.n	80072dc <_dtoa_r+0x934>
 800723a:	e089      	b.n	8007350 <_dtoa_r+0x9a8>
 800723c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800723e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007242:	e75d      	b.n	8007100 <_dtoa_r+0x758>
 8007244:	9b01      	ldr	r3, [sp, #4]
 8007246:	1e5e      	subs	r6, r3, #1
 8007248:	9b06      	ldr	r3, [sp, #24]
 800724a:	42b3      	cmp	r3, r6
 800724c:	bfbf      	itttt	lt
 800724e:	9b06      	ldrlt	r3, [sp, #24]
 8007250:	9606      	strlt	r6, [sp, #24]
 8007252:	1af2      	sublt	r2, r6, r3
 8007254:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007256:	bfb6      	itet	lt
 8007258:	189b      	addlt	r3, r3, r2
 800725a:	1b9e      	subge	r6, r3, r6
 800725c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800725e:	9b01      	ldr	r3, [sp, #4]
 8007260:	bfb8      	it	lt
 8007262:	2600      	movlt	r6, #0
 8007264:	2b00      	cmp	r3, #0
 8007266:	bfb5      	itete	lt
 8007268:	eba8 0503 	sublt.w	r5, r8, r3
 800726c:	9b01      	ldrge	r3, [sp, #4]
 800726e:	2300      	movlt	r3, #0
 8007270:	4645      	movge	r5, r8
 8007272:	e747      	b.n	8007104 <_dtoa_r+0x75c>
 8007274:	9e06      	ldr	r6, [sp, #24]
 8007276:	9f08      	ldr	r7, [sp, #32]
 8007278:	4645      	mov	r5, r8
 800727a:	e74c      	b.n	8007116 <_dtoa_r+0x76e>
 800727c:	9a06      	ldr	r2, [sp, #24]
 800727e:	e775      	b.n	800716c <_dtoa_r+0x7c4>
 8007280:	9b05      	ldr	r3, [sp, #20]
 8007282:	2b01      	cmp	r3, #1
 8007284:	dc18      	bgt.n	80072b8 <_dtoa_r+0x910>
 8007286:	9b02      	ldr	r3, [sp, #8]
 8007288:	b9b3      	cbnz	r3, 80072b8 <_dtoa_r+0x910>
 800728a:	9b03      	ldr	r3, [sp, #12]
 800728c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007290:	b9a3      	cbnz	r3, 80072bc <_dtoa_r+0x914>
 8007292:	9b03      	ldr	r3, [sp, #12]
 8007294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007298:	0d1b      	lsrs	r3, r3, #20
 800729a:	051b      	lsls	r3, r3, #20
 800729c:	b12b      	cbz	r3, 80072aa <_dtoa_r+0x902>
 800729e:	9b04      	ldr	r3, [sp, #16]
 80072a0:	3301      	adds	r3, #1
 80072a2:	9304      	str	r3, [sp, #16]
 80072a4:	f108 0801 	add.w	r8, r8, #1
 80072a8:	2301      	movs	r3, #1
 80072aa:	9306      	str	r3, [sp, #24]
 80072ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f47f af74 	bne.w	800719c <_dtoa_r+0x7f4>
 80072b4:	2001      	movs	r0, #1
 80072b6:	e779      	b.n	80071ac <_dtoa_r+0x804>
 80072b8:	2300      	movs	r3, #0
 80072ba:	e7f6      	b.n	80072aa <_dtoa_r+0x902>
 80072bc:	9b02      	ldr	r3, [sp, #8]
 80072be:	e7f4      	b.n	80072aa <_dtoa_r+0x902>
 80072c0:	d085      	beq.n	80071ce <_dtoa_r+0x826>
 80072c2:	4618      	mov	r0, r3
 80072c4:	301c      	adds	r0, #28
 80072c6:	e77d      	b.n	80071c4 <_dtoa_r+0x81c>
 80072c8:	40240000 	.word	0x40240000
 80072cc:	9b01      	ldr	r3, [sp, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	dc38      	bgt.n	8007344 <_dtoa_r+0x99c>
 80072d2:	9b05      	ldr	r3, [sp, #20]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	dd35      	ble.n	8007344 <_dtoa_r+0x99c>
 80072d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80072dc:	f1b9 0f00 	cmp.w	r9, #0
 80072e0:	d10d      	bne.n	80072fe <_dtoa_r+0x956>
 80072e2:	4631      	mov	r1, r6
 80072e4:	464b      	mov	r3, r9
 80072e6:	2205      	movs	r2, #5
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 f9bb 	bl	8007664 <__multadd>
 80072ee:	4601      	mov	r1, r0
 80072f0:	4606      	mov	r6, r0
 80072f2:	4658      	mov	r0, fp
 80072f4:	f000 fbd2 	bl	8007a9c <__mcmp>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	f73f adbd 	bgt.w	8006e78 <_dtoa_r+0x4d0>
 80072fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007300:	9d00      	ldr	r5, [sp, #0]
 8007302:	ea6f 0a03 	mvn.w	sl, r3
 8007306:	f04f 0800 	mov.w	r8, #0
 800730a:	4631      	mov	r1, r6
 800730c:	4620      	mov	r0, r4
 800730e:	f000 f987 	bl	8007620 <_Bfree>
 8007312:	2f00      	cmp	r7, #0
 8007314:	f43f aeb4 	beq.w	8007080 <_dtoa_r+0x6d8>
 8007318:	f1b8 0f00 	cmp.w	r8, #0
 800731c:	d005      	beq.n	800732a <_dtoa_r+0x982>
 800731e:	45b8      	cmp	r8, r7
 8007320:	d003      	beq.n	800732a <_dtoa_r+0x982>
 8007322:	4641      	mov	r1, r8
 8007324:	4620      	mov	r0, r4
 8007326:	f000 f97b 	bl	8007620 <_Bfree>
 800732a:	4639      	mov	r1, r7
 800732c:	4620      	mov	r0, r4
 800732e:	f000 f977 	bl	8007620 <_Bfree>
 8007332:	e6a5      	b.n	8007080 <_dtoa_r+0x6d8>
 8007334:	2600      	movs	r6, #0
 8007336:	4637      	mov	r7, r6
 8007338:	e7e1      	b.n	80072fe <_dtoa_r+0x956>
 800733a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800733c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007340:	4637      	mov	r7, r6
 8007342:	e599      	b.n	8006e78 <_dtoa_r+0x4d0>
 8007344:	9b08      	ldr	r3, [sp, #32]
 8007346:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 80fd 	beq.w	800754a <_dtoa_r+0xba2>
 8007350:	2d00      	cmp	r5, #0
 8007352:	dd05      	ble.n	8007360 <_dtoa_r+0x9b8>
 8007354:	4639      	mov	r1, r7
 8007356:	462a      	mov	r2, r5
 8007358:	4620      	mov	r0, r4
 800735a:	f000 fb33 	bl	80079c4 <__lshift>
 800735e:	4607      	mov	r7, r0
 8007360:	9b06      	ldr	r3, [sp, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d05c      	beq.n	8007420 <_dtoa_r+0xa78>
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	4620      	mov	r0, r4
 800736a:	f000 f919 	bl	80075a0 <_Balloc>
 800736e:	4605      	mov	r5, r0
 8007370:	b928      	cbnz	r0, 800737e <_dtoa_r+0x9d6>
 8007372:	4b80      	ldr	r3, [pc, #512]	; (8007574 <_dtoa_r+0xbcc>)
 8007374:	4602      	mov	r2, r0
 8007376:	f240 21ea 	movw	r1, #746	; 0x2ea
 800737a:	f7ff bb2e 	b.w	80069da <_dtoa_r+0x32>
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	3202      	adds	r2, #2
 8007382:	0092      	lsls	r2, r2, #2
 8007384:	f107 010c 	add.w	r1, r7, #12
 8007388:	300c      	adds	r0, #12
 800738a:	f7fe fd25 	bl	8005dd8 <memcpy>
 800738e:	2201      	movs	r2, #1
 8007390:	4629      	mov	r1, r5
 8007392:	4620      	mov	r0, r4
 8007394:	f000 fb16 	bl	80079c4 <__lshift>
 8007398:	9b00      	ldr	r3, [sp, #0]
 800739a:	3301      	adds	r3, #1
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	9b00      	ldr	r3, [sp, #0]
 80073a0:	444b      	add	r3, r9
 80073a2:	9307      	str	r3, [sp, #28]
 80073a4:	9b02      	ldr	r3, [sp, #8]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	46b8      	mov	r8, r7
 80073ac:	9306      	str	r3, [sp, #24]
 80073ae:	4607      	mov	r7, r0
 80073b0:	9b01      	ldr	r3, [sp, #4]
 80073b2:	4631      	mov	r1, r6
 80073b4:	3b01      	subs	r3, #1
 80073b6:	4658      	mov	r0, fp
 80073b8:	9302      	str	r3, [sp, #8]
 80073ba:	f7ff fa67 	bl	800688c <quorem>
 80073be:	4603      	mov	r3, r0
 80073c0:	3330      	adds	r3, #48	; 0x30
 80073c2:	9004      	str	r0, [sp, #16]
 80073c4:	4641      	mov	r1, r8
 80073c6:	4658      	mov	r0, fp
 80073c8:	9308      	str	r3, [sp, #32]
 80073ca:	f000 fb67 	bl	8007a9c <__mcmp>
 80073ce:	463a      	mov	r2, r7
 80073d0:	4681      	mov	r9, r0
 80073d2:	4631      	mov	r1, r6
 80073d4:	4620      	mov	r0, r4
 80073d6:	f000 fb7d 	bl	8007ad4 <__mdiff>
 80073da:	68c2      	ldr	r2, [r0, #12]
 80073dc:	9b08      	ldr	r3, [sp, #32]
 80073de:	4605      	mov	r5, r0
 80073e0:	bb02      	cbnz	r2, 8007424 <_dtoa_r+0xa7c>
 80073e2:	4601      	mov	r1, r0
 80073e4:	4658      	mov	r0, fp
 80073e6:	f000 fb59 	bl	8007a9c <__mcmp>
 80073ea:	9b08      	ldr	r3, [sp, #32]
 80073ec:	4602      	mov	r2, r0
 80073ee:	4629      	mov	r1, r5
 80073f0:	4620      	mov	r0, r4
 80073f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80073f6:	f000 f913 	bl	8007620 <_Bfree>
 80073fa:	9b05      	ldr	r3, [sp, #20]
 80073fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073fe:	9d01      	ldr	r5, [sp, #4]
 8007400:	ea43 0102 	orr.w	r1, r3, r2
 8007404:	9b06      	ldr	r3, [sp, #24]
 8007406:	430b      	orrs	r3, r1
 8007408:	9b08      	ldr	r3, [sp, #32]
 800740a:	d10d      	bne.n	8007428 <_dtoa_r+0xa80>
 800740c:	2b39      	cmp	r3, #57	; 0x39
 800740e:	d029      	beq.n	8007464 <_dtoa_r+0xabc>
 8007410:	f1b9 0f00 	cmp.w	r9, #0
 8007414:	dd01      	ble.n	800741a <_dtoa_r+0xa72>
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	3331      	adds	r3, #49	; 0x31
 800741a:	9a02      	ldr	r2, [sp, #8]
 800741c:	7013      	strb	r3, [r2, #0]
 800741e:	e774      	b.n	800730a <_dtoa_r+0x962>
 8007420:	4638      	mov	r0, r7
 8007422:	e7b9      	b.n	8007398 <_dtoa_r+0x9f0>
 8007424:	2201      	movs	r2, #1
 8007426:	e7e2      	b.n	80073ee <_dtoa_r+0xa46>
 8007428:	f1b9 0f00 	cmp.w	r9, #0
 800742c:	db06      	blt.n	800743c <_dtoa_r+0xa94>
 800742e:	9905      	ldr	r1, [sp, #20]
 8007430:	ea41 0909 	orr.w	r9, r1, r9
 8007434:	9906      	ldr	r1, [sp, #24]
 8007436:	ea59 0101 	orrs.w	r1, r9, r1
 800743a:	d120      	bne.n	800747e <_dtoa_r+0xad6>
 800743c:	2a00      	cmp	r2, #0
 800743e:	ddec      	ble.n	800741a <_dtoa_r+0xa72>
 8007440:	4659      	mov	r1, fp
 8007442:	2201      	movs	r2, #1
 8007444:	4620      	mov	r0, r4
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	f000 fabc 	bl	80079c4 <__lshift>
 800744c:	4631      	mov	r1, r6
 800744e:	4683      	mov	fp, r0
 8007450:	f000 fb24 	bl	8007a9c <__mcmp>
 8007454:	2800      	cmp	r0, #0
 8007456:	9b01      	ldr	r3, [sp, #4]
 8007458:	dc02      	bgt.n	8007460 <_dtoa_r+0xab8>
 800745a:	d1de      	bne.n	800741a <_dtoa_r+0xa72>
 800745c:	07da      	lsls	r2, r3, #31
 800745e:	d5dc      	bpl.n	800741a <_dtoa_r+0xa72>
 8007460:	2b39      	cmp	r3, #57	; 0x39
 8007462:	d1d8      	bne.n	8007416 <_dtoa_r+0xa6e>
 8007464:	9a02      	ldr	r2, [sp, #8]
 8007466:	2339      	movs	r3, #57	; 0x39
 8007468:	7013      	strb	r3, [r2, #0]
 800746a:	462b      	mov	r3, r5
 800746c:	461d      	mov	r5, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007474:	2a39      	cmp	r2, #57	; 0x39
 8007476:	d050      	beq.n	800751a <_dtoa_r+0xb72>
 8007478:	3201      	adds	r2, #1
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	e745      	b.n	800730a <_dtoa_r+0x962>
 800747e:	2a00      	cmp	r2, #0
 8007480:	dd03      	ble.n	800748a <_dtoa_r+0xae2>
 8007482:	2b39      	cmp	r3, #57	; 0x39
 8007484:	d0ee      	beq.n	8007464 <_dtoa_r+0xabc>
 8007486:	3301      	adds	r3, #1
 8007488:	e7c7      	b.n	800741a <_dtoa_r+0xa72>
 800748a:	9a01      	ldr	r2, [sp, #4]
 800748c:	9907      	ldr	r1, [sp, #28]
 800748e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007492:	428a      	cmp	r2, r1
 8007494:	d02a      	beq.n	80074ec <_dtoa_r+0xb44>
 8007496:	4659      	mov	r1, fp
 8007498:	2300      	movs	r3, #0
 800749a:	220a      	movs	r2, #10
 800749c:	4620      	mov	r0, r4
 800749e:	f000 f8e1 	bl	8007664 <__multadd>
 80074a2:	45b8      	cmp	r8, r7
 80074a4:	4683      	mov	fp, r0
 80074a6:	f04f 0300 	mov.w	r3, #0
 80074aa:	f04f 020a 	mov.w	r2, #10
 80074ae:	4641      	mov	r1, r8
 80074b0:	4620      	mov	r0, r4
 80074b2:	d107      	bne.n	80074c4 <_dtoa_r+0xb1c>
 80074b4:	f000 f8d6 	bl	8007664 <__multadd>
 80074b8:	4680      	mov	r8, r0
 80074ba:	4607      	mov	r7, r0
 80074bc:	9b01      	ldr	r3, [sp, #4]
 80074be:	3301      	adds	r3, #1
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	e775      	b.n	80073b0 <_dtoa_r+0xa08>
 80074c4:	f000 f8ce 	bl	8007664 <__multadd>
 80074c8:	4639      	mov	r1, r7
 80074ca:	4680      	mov	r8, r0
 80074cc:	2300      	movs	r3, #0
 80074ce:	220a      	movs	r2, #10
 80074d0:	4620      	mov	r0, r4
 80074d2:	f000 f8c7 	bl	8007664 <__multadd>
 80074d6:	4607      	mov	r7, r0
 80074d8:	e7f0      	b.n	80074bc <_dtoa_r+0xb14>
 80074da:	f1b9 0f00 	cmp.w	r9, #0
 80074de:	9a00      	ldr	r2, [sp, #0]
 80074e0:	bfcc      	ite	gt
 80074e2:	464d      	movgt	r5, r9
 80074e4:	2501      	movle	r5, #1
 80074e6:	4415      	add	r5, r2
 80074e8:	f04f 0800 	mov.w	r8, #0
 80074ec:	4659      	mov	r1, fp
 80074ee:	2201      	movs	r2, #1
 80074f0:	4620      	mov	r0, r4
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	f000 fa66 	bl	80079c4 <__lshift>
 80074f8:	4631      	mov	r1, r6
 80074fa:	4683      	mov	fp, r0
 80074fc:	f000 face 	bl	8007a9c <__mcmp>
 8007500:	2800      	cmp	r0, #0
 8007502:	dcb2      	bgt.n	800746a <_dtoa_r+0xac2>
 8007504:	d102      	bne.n	800750c <_dtoa_r+0xb64>
 8007506:	9b01      	ldr	r3, [sp, #4]
 8007508:	07db      	lsls	r3, r3, #31
 800750a:	d4ae      	bmi.n	800746a <_dtoa_r+0xac2>
 800750c:	462b      	mov	r3, r5
 800750e:	461d      	mov	r5, r3
 8007510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007514:	2a30      	cmp	r2, #48	; 0x30
 8007516:	d0fa      	beq.n	800750e <_dtoa_r+0xb66>
 8007518:	e6f7      	b.n	800730a <_dtoa_r+0x962>
 800751a:	9a00      	ldr	r2, [sp, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d1a5      	bne.n	800746c <_dtoa_r+0xac4>
 8007520:	f10a 0a01 	add.w	sl, sl, #1
 8007524:	2331      	movs	r3, #49	; 0x31
 8007526:	e779      	b.n	800741c <_dtoa_r+0xa74>
 8007528:	4b13      	ldr	r3, [pc, #76]	; (8007578 <_dtoa_r+0xbd0>)
 800752a:	f7ff baaf 	b.w	8006a8c <_dtoa_r+0xe4>
 800752e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007530:	2b00      	cmp	r3, #0
 8007532:	f47f aa86 	bne.w	8006a42 <_dtoa_r+0x9a>
 8007536:	4b11      	ldr	r3, [pc, #68]	; (800757c <_dtoa_r+0xbd4>)
 8007538:	f7ff baa8 	b.w	8006a8c <_dtoa_r+0xe4>
 800753c:	f1b9 0f00 	cmp.w	r9, #0
 8007540:	dc03      	bgt.n	800754a <_dtoa_r+0xba2>
 8007542:	9b05      	ldr	r3, [sp, #20]
 8007544:	2b02      	cmp	r3, #2
 8007546:	f73f aec9 	bgt.w	80072dc <_dtoa_r+0x934>
 800754a:	9d00      	ldr	r5, [sp, #0]
 800754c:	4631      	mov	r1, r6
 800754e:	4658      	mov	r0, fp
 8007550:	f7ff f99c 	bl	800688c <quorem>
 8007554:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007558:	f805 3b01 	strb.w	r3, [r5], #1
 800755c:	9a00      	ldr	r2, [sp, #0]
 800755e:	1aaa      	subs	r2, r5, r2
 8007560:	4591      	cmp	r9, r2
 8007562:	ddba      	ble.n	80074da <_dtoa_r+0xb32>
 8007564:	4659      	mov	r1, fp
 8007566:	2300      	movs	r3, #0
 8007568:	220a      	movs	r2, #10
 800756a:	4620      	mov	r0, r4
 800756c:	f000 f87a 	bl	8007664 <__multadd>
 8007570:	4683      	mov	fp, r0
 8007572:	e7eb      	b.n	800754c <_dtoa_r+0xba4>
 8007574:	08009d27 	.word	0x08009d27
 8007578:	08009c80 	.word	0x08009c80
 800757c:	08009ca4 	.word	0x08009ca4

08007580 <_localeconv_r>:
 8007580:	4800      	ldr	r0, [pc, #0]	; (8007584 <_localeconv_r+0x4>)
 8007582:	4770      	bx	lr
 8007584:	20000738 	.word	0x20000738

08007588 <__malloc_lock>:
 8007588:	4801      	ldr	r0, [pc, #4]	; (8007590 <__malloc_lock+0x8>)
 800758a:	f000 bd48 	b.w	800801e <__retarget_lock_acquire_recursive>
 800758e:	bf00      	nop
 8007590:	20000964 	.word	0x20000964

08007594 <__malloc_unlock>:
 8007594:	4801      	ldr	r0, [pc, #4]	; (800759c <__malloc_unlock+0x8>)
 8007596:	f000 bd43 	b.w	8008020 <__retarget_lock_release_recursive>
 800759a:	bf00      	nop
 800759c:	20000964 	.word	0x20000964

080075a0 <_Balloc>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075a4:	4604      	mov	r4, r0
 80075a6:	460d      	mov	r5, r1
 80075a8:	b976      	cbnz	r6, 80075c8 <_Balloc+0x28>
 80075aa:	2010      	movs	r0, #16
 80075ac:	f7fe fc0c 	bl	8005dc8 <malloc>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6260      	str	r0, [r4, #36]	; 0x24
 80075b4:	b920      	cbnz	r0, 80075c0 <_Balloc+0x20>
 80075b6:	4b18      	ldr	r3, [pc, #96]	; (8007618 <_Balloc+0x78>)
 80075b8:	4818      	ldr	r0, [pc, #96]	; (800761c <_Balloc+0x7c>)
 80075ba:	2166      	movs	r1, #102	; 0x66
 80075bc:	f000 fcfe 	bl	8007fbc <__assert_func>
 80075c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075c4:	6006      	str	r6, [r0, #0]
 80075c6:	60c6      	str	r6, [r0, #12]
 80075c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075ca:	68f3      	ldr	r3, [r6, #12]
 80075cc:	b183      	cbz	r3, 80075f0 <_Balloc+0x50>
 80075ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075d6:	b9b8      	cbnz	r0, 8007608 <_Balloc+0x68>
 80075d8:	2101      	movs	r1, #1
 80075da:	fa01 f605 	lsl.w	r6, r1, r5
 80075de:	1d72      	adds	r2, r6, #5
 80075e0:	0092      	lsls	r2, r2, #2
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 fb5a 	bl	8007c9c <_calloc_r>
 80075e8:	b160      	cbz	r0, 8007604 <_Balloc+0x64>
 80075ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075ee:	e00e      	b.n	800760e <_Balloc+0x6e>
 80075f0:	2221      	movs	r2, #33	; 0x21
 80075f2:	2104      	movs	r1, #4
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 fb51 	bl	8007c9c <_calloc_r>
 80075fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075fc:	60f0      	str	r0, [r6, #12]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e4      	bne.n	80075ce <_Balloc+0x2e>
 8007604:	2000      	movs	r0, #0
 8007606:	bd70      	pop	{r4, r5, r6, pc}
 8007608:	6802      	ldr	r2, [r0, #0]
 800760a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800760e:	2300      	movs	r3, #0
 8007610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007614:	e7f7      	b.n	8007606 <_Balloc+0x66>
 8007616:	bf00      	nop
 8007618:	08009cb1 	.word	0x08009cb1
 800761c:	08009d38 	.word	0x08009d38

08007620 <_Bfree>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007624:	4605      	mov	r5, r0
 8007626:	460c      	mov	r4, r1
 8007628:	b976      	cbnz	r6, 8007648 <_Bfree+0x28>
 800762a:	2010      	movs	r0, #16
 800762c:	f7fe fbcc 	bl	8005dc8 <malloc>
 8007630:	4602      	mov	r2, r0
 8007632:	6268      	str	r0, [r5, #36]	; 0x24
 8007634:	b920      	cbnz	r0, 8007640 <_Bfree+0x20>
 8007636:	4b09      	ldr	r3, [pc, #36]	; (800765c <_Bfree+0x3c>)
 8007638:	4809      	ldr	r0, [pc, #36]	; (8007660 <_Bfree+0x40>)
 800763a:	218a      	movs	r1, #138	; 0x8a
 800763c:	f000 fcbe 	bl	8007fbc <__assert_func>
 8007640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007644:	6006      	str	r6, [r0, #0]
 8007646:	60c6      	str	r6, [r0, #12]
 8007648:	b13c      	cbz	r4, 800765a <_Bfree+0x3a>
 800764a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800764c:	6862      	ldr	r2, [r4, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007654:	6021      	str	r1, [r4, #0]
 8007656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	08009cb1 	.word	0x08009cb1
 8007660:	08009d38 	.word	0x08009d38

08007664 <__multadd>:
 8007664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007668:	690e      	ldr	r6, [r1, #16]
 800766a:	4607      	mov	r7, r0
 800766c:	4698      	mov	r8, r3
 800766e:	460c      	mov	r4, r1
 8007670:	f101 0014 	add.w	r0, r1, #20
 8007674:	2300      	movs	r3, #0
 8007676:	6805      	ldr	r5, [r0, #0]
 8007678:	b2a9      	uxth	r1, r5
 800767a:	fb02 8101 	mla	r1, r2, r1, r8
 800767e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007682:	0c2d      	lsrs	r5, r5, #16
 8007684:	fb02 c505 	mla	r5, r2, r5, ip
 8007688:	b289      	uxth	r1, r1
 800768a:	3301      	adds	r3, #1
 800768c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007690:	429e      	cmp	r6, r3
 8007692:	f840 1b04 	str.w	r1, [r0], #4
 8007696:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800769a:	dcec      	bgt.n	8007676 <__multadd+0x12>
 800769c:	f1b8 0f00 	cmp.w	r8, #0
 80076a0:	d022      	beq.n	80076e8 <__multadd+0x84>
 80076a2:	68a3      	ldr	r3, [r4, #8]
 80076a4:	42b3      	cmp	r3, r6
 80076a6:	dc19      	bgt.n	80076dc <__multadd+0x78>
 80076a8:	6861      	ldr	r1, [r4, #4]
 80076aa:	4638      	mov	r0, r7
 80076ac:	3101      	adds	r1, #1
 80076ae:	f7ff ff77 	bl	80075a0 <_Balloc>
 80076b2:	4605      	mov	r5, r0
 80076b4:	b928      	cbnz	r0, 80076c2 <__multadd+0x5e>
 80076b6:	4602      	mov	r2, r0
 80076b8:	4b0d      	ldr	r3, [pc, #52]	; (80076f0 <__multadd+0x8c>)
 80076ba:	480e      	ldr	r0, [pc, #56]	; (80076f4 <__multadd+0x90>)
 80076bc:	21b5      	movs	r1, #181	; 0xb5
 80076be:	f000 fc7d 	bl	8007fbc <__assert_func>
 80076c2:	6922      	ldr	r2, [r4, #16]
 80076c4:	3202      	adds	r2, #2
 80076c6:	f104 010c 	add.w	r1, r4, #12
 80076ca:	0092      	lsls	r2, r2, #2
 80076cc:	300c      	adds	r0, #12
 80076ce:	f7fe fb83 	bl	8005dd8 <memcpy>
 80076d2:	4621      	mov	r1, r4
 80076d4:	4638      	mov	r0, r7
 80076d6:	f7ff ffa3 	bl	8007620 <_Bfree>
 80076da:	462c      	mov	r4, r5
 80076dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80076e0:	3601      	adds	r6, #1
 80076e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80076e6:	6126      	str	r6, [r4, #16]
 80076e8:	4620      	mov	r0, r4
 80076ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ee:	bf00      	nop
 80076f0:	08009d27 	.word	0x08009d27
 80076f4:	08009d38 	.word	0x08009d38

080076f8 <__hi0bits>:
 80076f8:	0c03      	lsrs	r3, r0, #16
 80076fa:	041b      	lsls	r3, r3, #16
 80076fc:	b9d3      	cbnz	r3, 8007734 <__hi0bits+0x3c>
 80076fe:	0400      	lsls	r0, r0, #16
 8007700:	2310      	movs	r3, #16
 8007702:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007706:	bf04      	itt	eq
 8007708:	0200      	lsleq	r0, r0, #8
 800770a:	3308      	addeq	r3, #8
 800770c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007710:	bf04      	itt	eq
 8007712:	0100      	lsleq	r0, r0, #4
 8007714:	3304      	addeq	r3, #4
 8007716:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800771a:	bf04      	itt	eq
 800771c:	0080      	lsleq	r0, r0, #2
 800771e:	3302      	addeq	r3, #2
 8007720:	2800      	cmp	r0, #0
 8007722:	db05      	blt.n	8007730 <__hi0bits+0x38>
 8007724:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007728:	f103 0301 	add.w	r3, r3, #1
 800772c:	bf08      	it	eq
 800772e:	2320      	moveq	r3, #32
 8007730:	4618      	mov	r0, r3
 8007732:	4770      	bx	lr
 8007734:	2300      	movs	r3, #0
 8007736:	e7e4      	b.n	8007702 <__hi0bits+0xa>

08007738 <__lo0bits>:
 8007738:	6803      	ldr	r3, [r0, #0]
 800773a:	f013 0207 	ands.w	r2, r3, #7
 800773e:	4601      	mov	r1, r0
 8007740:	d00b      	beq.n	800775a <__lo0bits+0x22>
 8007742:	07da      	lsls	r2, r3, #31
 8007744:	d424      	bmi.n	8007790 <__lo0bits+0x58>
 8007746:	0798      	lsls	r0, r3, #30
 8007748:	bf49      	itett	mi
 800774a:	085b      	lsrmi	r3, r3, #1
 800774c:	089b      	lsrpl	r3, r3, #2
 800774e:	2001      	movmi	r0, #1
 8007750:	600b      	strmi	r3, [r1, #0]
 8007752:	bf5c      	itt	pl
 8007754:	600b      	strpl	r3, [r1, #0]
 8007756:	2002      	movpl	r0, #2
 8007758:	4770      	bx	lr
 800775a:	b298      	uxth	r0, r3
 800775c:	b9b0      	cbnz	r0, 800778c <__lo0bits+0x54>
 800775e:	0c1b      	lsrs	r3, r3, #16
 8007760:	2010      	movs	r0, #16
 8007762:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007766:	bf04      	itt	eq
 8007768:	0a1b      	lsreq	r3, r3, #8
 800776a:	3008      	addeq	r0, #8
 800776c:	071a      	lsls	r2, r3, #28
 800776e:	bf04      	itt	eq
 8007770:	091b      	lsreq	r3, r3, #4
 8007772:	3004      	addeq	r0, #4
 8007774:	079a      	lsls	r2, r3, #30
 8007776:	bf04      	itt	eq
 8007778:	089b      	lsreq	r3, r3, #2
 800777a:	3002      	addeq	r0, #2
 800777c:	07da      	lsls	r2, r3, #31
 800777e:	d403      	bmi.n	8007788 <__lo0bits+0x50>
 8007780:	085b      	lsrs	r3, r3, #1
 8007782:	f100 0001 	add.w	r0, r0, #1
 8007786:	d005      	beq.n	8007794 <__lo0bits+0x5c>
 8007788:	600b      	str	r3, [r1, #0]
 800778a:	4770      	bx	lr
 800778c:	4610      	mov	r0, r2
 800778e:	e7e8      	b.n	8007762 <__lo0bits+0x2a>
 8007790:	2000      	movs	r0, #0
 8007792:	4770      	bx	lr
 8007794:	2020      	movs	r0, #32
 8007796:	4770      	bx	lr

08007798 <__i2b>:
 8007798:	b510      	push	{r4, lr}
 800779a:	460c      	mov	r4, r1
 800779c:	2101      	movs	r1, #1
 800779e:	f7ff feff 	bl	80075a0 <_Balloc>
 80077a2:	4602      	mov	r2, r0
 80077a4:	b928      	cbnz	r0, 80077b2 <__i2b+0x1a>
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <__i2b+0x24>)
 80077a8:	4805      	ldr	r0, [pc, #20]	; (80077c0 <__i2b+0x28>)
 80077aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077ae:	f000 fc05 	bl	8007fbc <__assert_func>
 80077b2:	2301      	movs	r3, #1
 80077b4:	6144      	str	r4, [r0, #20]
 80077b6:	6103      	str	r3, [r0, #16]
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	bf00      	nop
 80077bc:	08009d27 	.word	0x08009d27
 80077c0:	08009d38 	.word	0x08009d38

080077c4 <__multiply>:
 80077c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c8:	4614      	mov	r4, r2
 80077ca:	690a      	ldr	r2, [r1, #16]
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	bfb8      	it	lt
 80077d2:	460b      	movlt	r3, r1
 80077d4:	460d      	mov	r5, r1
 80077d6:	bfbc      	itt	lt
 80077d8:	4625      	movlt	r5, r4
 80077da:	461c      	movlt	r4, r3
 80077dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80077e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80077e4:	68ab      	ldr	r3, [r5, #8]
 80077e6:	6869      	ldr	r1, [r5, #4]
 80077e8:	eb0a 0709 	add.w	r7, sl, r9
 80077ec:	42bb      	cmp	r3, r7
 80077ee:	b085      	sub	sp, #20
 80077f0:	bfb8      	it	lt
 80077f2:	3101      	addlt	r1, #1
 80077f4:	f7ff fed4 	bl	80075a0 <_Balloc>
 80077f8:	b930      	cbnz	r0, 8007808 <__multiply+0x44>
 80077fa:	4602      	mov	r2, r0
 80077fc:	4b42      	ldr	r3, [pc, #264]	; (8007908 <__multiply+0x144>)
 80077fe:	4843      	ldr	r0, [pc, #268]	; (800790c <__multiply+0x148>)
 8007800:	f240 115d 	movw	r1, #349	; 0x15d
 8007804:	f000 fbda 	bl	8007fbc <__assert_func>
 8007808:	f100 0614 	add.w	r6, r0, #20
 800780c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007810:	4633      	mov	r3, r6
 8007812:	2200      	movs	r2, #0
 8007814:	4543      	cmp	r3, r8
 8007816:	d31e      	bcc.n	8007856 <__multiply+0x92>
 8007818:	f105 0c14 	add.w	ip, r5, #20
 800781c:	f104 0314 	add.w	r3, r4, #20
 8007820:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007824:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007828:	9202      	str	r2, [sp, #8]
 800782a:	ebac 0205 	sub.w	r2, ip, r5
 800782e:	3a15      	subs	r2, #21
 8007830:	f022 0203 	bic.w	r2, r2, #3
 8007834:	3204      	adds	r2, #4
 8007836:	f105 0115 	add.w	r1, r5, #21
 800783a:	458c      	cmp	ip, r1
 800783c:	bf38      	it	cc
 800783e:	2204      	movcc	r2, #4
 8007840:	9201      	str	r2, [sp, #4]
 8007842:	9a02      	ldr	r2, [sp, #8]
 8007844:	9303      	str	r3, [sp, #12]
 8007846:	429a      	cmp	r2, r3
 8007848:	d808      	bhi.n	800785c <__multiply+0x98>
 800784a:	2f00      	cmp	r7, #0
 800784c:	dc55      	bgt.n	80078fa <__multiply+0x136>
 800784e:	6107      	str	r7, [r0, #16]
 8007850:	b005      	add	sp, #20
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007856:	f843 2b04 	str.w	r2, [r3], #4
 800785a:	e7db      	b.n	8007814 <__multiply+0x50>
 800785c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007860:	f1ba 0f00 	cmp.w	sl, #0
 8007864:	d020      	beq.n	80078a8 <__multiply+0xe4>
 8007866:	f105 0e14 	add.w	lr, r5, #20
 800786a:	46b1      	mov	r9, r6
 800786c:	2200      	movs	r2, #0
 800786e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007872:	f8d9 b000 	ldr.w	fp, [r9]
 8007876:	b2a1      	uxth	r1, r4
 8007878:	fa1f fb8b 	uxth.w	fp, fp
 800787c:	fb0a b101 	mla	r1, sl, r1, fp
 8007880:	4411      	add	r1, r2
 8007882:	f8d9 2000 	ldr.w	r2, [r9]
 8007886:	0c24      	lsrs	r4, r4, #16
 8007888:	0c12      	lsrs	r2, r2, #16
 800788a:	fb0a 2404 	mla	r4, sl, r4, r2
 800788e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007892:	b289      	uxth	r1, r1
 8007894:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007898:	45f4      	cmp	ip, lr
 800789a:	f849 1b04 	str.w	r1, [r9], #4
 800789e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80078a2:	d8e4      	bhi.n	800786e <__multiply+0xaa>
 80078a4:	9901      	ldr	r1, [sp, #4]
 80078a6:	5072      	str	r2, [r6, r1]
 80078a8:	9a03      	ldr	r2, [sp, #12]
 80078aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078ae:	3304      	adds	r3, #4
 80078b0:	f1b9 0f00 	cmp.w	r9, #0
 80078b4:	d01f      	beq.n	80078f6 <__multiply+0x132>
 80078b6:	6834      	ldr	r4, [r6, #0]
 80078b8:	f105 0114 	add.w	r1, r5, #20
 80078bc:	46b6      	mov	lr, r6
 80078be:	f04f 0a00 	mov.w	sl, #0
 80078c2:	880a      	ldrh	r2, [r1, #0]
 80078c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80078c8:	fb09 b202 	mla	r2, r9, r2, fp
 80078cc:	4492      	add	sl, r2
 80078ce:	b2a4      	uxth	r4, r4
 80078d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80078d4:	f84e 4b04 	str.w	r4, [lr], #4
 80078d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80078dc:	f8be 2000 	ldrh.w	r2, [lr]
 80078e0:	0c24      	lsrs	r4, r4, #16
 80078e2:	fb09 2404 	mla	r4, r9, r4, r2
 80078e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80078ea:	458c      	cmp	ip, r1
 80078ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078f0:	d8e7      	bhi.n	80078c2 <__multiply+0xfe>
 80078f2:	9a01      	ldr	r2, [sp, #4]
 80078f4:	50b4      	str	r4, [r6, r2]
 80078f6:	3604      	adds	r6, #4
 80078f8:	e7a3      	b.n	8007842 <__multiply+0x7e>
 80078fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1a5      	bne.n	800784e <__multiply+0x8a>
 8007902:	3f01      	subs	r7, #1
 8007904:	e7a1      	b.n	800784a <__multiply+0x86>
 8007906:	bf00      	nop
 8007908:	08009d27 	.word	0x08009d27
 800790c:	08009d38 	.word	0x08009d38

08007910 <__pow5mult>:
 8007910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007914:	4615      	mov	r5, r2
 8007916:	f012 0203 	ands.w	r2, r2, #3
 800791a:	4606      	mov	r6, r0
 800791c:	460f      	mov	r7, r1
 800791e:	d007      	beq.n	8007930 <__pow5mult+0x20>
 8007920:	4c25      	ldr	r4, [pc, #148]	; (80079b8 <__pow5mult+0xa8>)
 8007922:	3a01      	subs	r2, #1
 8007924:	2300      	movs	r3, #0
 8007926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800792a:	f7ff fe9b 	bl	8007664 <__multadd>
 800792e:	4607      	mov	r7, r0
 8007930:	10ad      	asrs	r5, r5, #2
 8007932:	d03d      	beq.n	80079b0 <__pow5mult+0xa0>
 8007934:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007936:	b97c      	cbnz	r4, 8007958 <__pow5mult+0x48>
 8007938:	2010      	movs	r0, #16
 800793a:	f7fe fa45 	bl	8005dc8 <malloc>
 800793e:	4602      	mov	r2, r0
 8007940:	6270      	str	r0, [r6, #36]	; 0x24
 8007942:	b928      	cbnz	r0, 8007950 <__pow5mult+0x40>
 8007944:	4b1d      	ldr	r3, [pc, #116]	; (80079bc <__pow5mult+0xac>)
 8007946:	481e      	ldr	r0, [pc, #120]	; (80079c0 <__pow5mult+0xb0>)
 8007948:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800794c:	f000 fb36 	bl	8007fbc <__assert_func>
 8007950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007954:	6004      	str	r4, [r0, #0]
 8007956:	60c4      	str	r4, [r0, #12]
 8007958:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800795c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007960:	b94c      	cbnz	r4, 8007976 <__pow5mult+0x66>
 8007962:	f240 2171 	movw	r1, #625	; 0x271
 8007966:	4630      	mov	r0, r6
 8007968:	f7ff ff16 	bl	8007798 <__i2b>
 800796c:	2300      	movs	r3, #0
 800796e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007972:	4604      	mov	r4, r0
 8007974:	6003      	str	r3, [r0, #0]
 8007976:	f04f 0900 	mov.w	r9, #0
 800797a:	07eb      	lsls	r3, r5, #31
 800797c:	d50a      	bpl.n	8007994 <__pow5mult+0x84>
 800797e:	4639      	mov	r1, r7
 8007980:	4622      	mov	r2, r4
 8007982:	4630      	mov	r0, r6
 8007984:	f7ff ff1e 	bl	80077c4 <__multiply>
 8007988:	4639      	mov	r1, r7
 800798a:	4680      	mov	r8, r0
 800798c:	4630      	mov	r0, r6
 800798e:	f7ff fe47 	bl	8007620 <_Bfree>
 8007992:	4647      	mov	r7, r8
 8007994:	106d      	asrs	r5, r5, #1
 8007996:	d00b      	beq.n	80079b0 <__pow5mult+0xa0>
 8007998:	6820      	ldr	r0, [r4, #0]
 800799a:	b938      	cbnz	r0, 80079ac <__pow5mult+0x9c>
 800799c:	4622      	mov	r2, r4
 800799e:	4621      	mov	r1, r4
 80079a0:	4630      	mov	r0, r6
 80079a2:	f7ff ff0f 	bl	80077c4 <__multiply>
 80079a6:	6020      	str	r0, [r4, #0]
 80079a8:	f8c0 9000 	str.w	r9, [r0]
 80079ac:	4604      	mov	r4, r0
 80079ae:	e7e4      	b.n	800797a <__pow5mult+0x6a>
 80079b0:	4638      	mov	r0, r7
 80079b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b6:	bf00      	nop
 80079b8:	08009e88 	.word	0x08009e88
 80079bc:	08009cb1 	.word	0x08009cb1
 80079c0:	08009d38 	.word	0x08009d38

080079c4 <__lshift>:
 80079c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	6849      	ldr	r1, [r1, #4]
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079d2:	68a3      	ldr	r3, [r4, #8]
 80079d4:	4607      	mov	r7, r0
 80079d6:	4691      	mov	r9, r2
 80079d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079dc:	f108 0601 	add.w	r6, r8, #1
 80079e0:	42b3      	cmp	r3, r6
 80079e2:	db0b      	blt.n	80079fc <__lshift+0x38>
 80079e4:	4638      	mov	r0, r7
 80079e6:	f7ff fddb 	bl	80075a0 <_Balloc>
 80079ea:	4605      	mov	r5, r0
 80079ec:	b948      	cbnz	r0, 8007a02 <__lshift+0x3e>
 80079ee:	4602      	mov	r2, r0
 80079f0:	4b28      	ldr	r3, [pc, #160]	; (8007a94 <__lshift+0xd0>)
 80079f2:	4829      	ldr	r0, [pc, #164]	; (8007a98 <__lshift+0xd4>)
 80079f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079f8:	f000 fae0 	bl	8007fbc <__assert_func>
 80079fc:	3101      	adds	r1, #1
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	e7ee      	b.n	80079e0 <__lshift+0x1c>
 8007a02:	2300      	movs	r3, #0
 8007a04:	f100 0114 	add.w	r1, r0, #20
 8007a08:	f100 0210 	add.w	r2, r0, #16
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	4553      	cmp	r3, sl
 8007a10:	db33      	blt.n	8007a7a <__lshift+0xb6>
 8007a12:	6920      	ldr	r0, [r4, #16]
 8007a14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a18:	f104 0314 	add.w	r3, r4, #20
 8007a1c:	f019 091f 	ands.w	r9, r9, #31
 8007a20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a28:	d02b      	beq.n	8007a82 <__lshift+0xbe>
 8007a2a:	f1c9 0e20 	rsb	lr, r9, #32
 8007a2e:	468a      	mov	sl, r1
 8007a30:	2200      	movs	r2, #0
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	fa00 f009 	lsl.w	r0, r0, r9
 8007a38:	4302      	orrs	r2, r0
 8007a3a:	f84a 2b04 	str.w	r2, [sl], #4
 8007a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a42:	459c      	cmp	ip, r3
 8007a44:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a48:	d8f3      	bhi.n	8007a32 <__lshift+0x6e>
 8007a4a:	ebac 0304 	sub.w	r3, ip, r4
 8007a4e:	3b15      	subs	r3, #21
 8007a50:	f023 0303 	bic.w	r3, r3, #3
 8007a54:	3304      	adds	r3, #4
 8007a56:	f104 0015 	add.w	r0, r4, #21
 8007a5a:	4584      	cmp	ip, r0
 8007a5c:	bf38      	it	cc
 8007a5e:	2304      	movcc	r3, #4
 8007a60:	50ca      	str	r2, [r1, r3]
 8007a62:	b10a      	cbz	r2, 8007a68 <__lshift+0xa4>
 8007a64:	f108 0602 	add.w	r6, r8, #2
 8007a68:	3e01      	subs	r6, #1
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	612e      	str	r6, [r5, #16]
 8007a6e:	4621      	mov	r1, r4
 8007a70:	f7ff fdd6 	bl	8007620 <_Bfree>
 8007a74:	4628      	mov	r0, r5
 8007a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a7e:	3301      	adds	r3, #1
 8007a80:	e7c5      	b.n	8007a0e <__lshift+0x4a>
 8007a82:	3904      	subs	r1, #4
 8007a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a88:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a8c:	459c      	cmp	ip, r3
 8007a8e:	d8f9      	bhi.n	8007a84 <__lshift+0xc0>
 8007a90:	e7ea      	b.n	8007a68 <__lshift+0xa4>
 8007a92:	bf00      	nop
 8007a94:	08009d27 	.word	0x08009d27
 8007a98:	08009d38 	.word	0x08009d38

08007a9c <__mcmp>:
 8007a9c:	b530      	push	{r4, r5, lr}
 8007a9e:	6902      	ldr	r2, [r0, #16]
 8007aa0:	690c      	ldr	r4, [r1, #16]
 8007aa2:	1b12      	subs	r2, r2, r4
 8007aa4:	d10e      	bne.n	8007ac4 <__mcmp+0x28>
 8007aa6:	f100 0314 	add.w	r3, r0, #20
 8007aaa:	3114      	adds	r1, #20
 8007aac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ab0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ab4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ab8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007abc:	42a5      	cmp	r5, r4
 8007abe:	d003      	beq.n	8007ac8 <__mcmp+0x2c>
 8007ac0:	d305      	bcc.n	8007ace <__mcmp+0x32>
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	bd30      	pop	{r4, r5, pc}
 8007ac8:	4283      	cmp	r3, r0
 8007aca:	d3f3      	bcc.n	8007ab4 <__mcmp+0x18>
 8007acc:	e7fa      	b.n	8007ac4 <__mcmp+0x28>
 8007ace:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad2:	e7f7      	b.n	8007ac4 <__mcmp+0x28>

08007ad4 <__mdiff>:
 8007ad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	460c      	mov	r4, r1
 8007ada:	4606      	mov	r6, r0
 8007adc:	4611      	mov	r1, r2
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4617      	mov	r7, r2
 8007ae2:	f7ff ffdb 	bl	8007a9c <__mcmp>
 8007ae6:	1e05      	subs	r5, r0, #0
 8007ae8:	d110      	bne.n	8007b0c <__mdiff+0x38>
 8007aea:	4629      	mov	r1, r5
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7ff fd57 	bl	80075a0 <_Balloc>
 8007af2:	b930      	cbnz	r0, 8007b02 <__mdiff+0x2e>
 8007af4:	4b39      	ldr	r3, [pc, #228]	; (8007bdc <__mdiff+0x108>)
 8007af6:	4602      	mov	r2, r0
 8007af8:	f240 2132 	movw	r1, #562	; 0x232
 8007afc:	4838      	ldr	r0, [pc, #224]	; (8007be0 <__mdiff+0x10c>)
 8007afe:	f000 fa5d 	bl	8007fbc <__assert_func>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0c:	bfa4      	itt	ge
 8007b0e:	463b      	movge	r3, r7
 8007b10:	4627      	movge	r7, r4
 8007b12:	4630      	mov	r0, r6
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	bfa6      	itte	ge
 8007b18:	461c      	movge	r4, r3
 8007b1a:	2500      	movge	r5, #0
 8007b1c:	2501      	movlt	r5, #1
 8007b1e:	f7ff fd3f 	bl	80075a0 <_Balloc>
 8007b22:	b920      	cbnz	r0, 8007b2e <__mdiff+0x5a>
 8007b24:	4b2d      	ldr	r3, [pc, #180]	; (8007bdc <__mdiff+0x108>)
 8007b26:	4602      	mov	r2, r0
 8007b28:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b2c:	e7e6      	b.n	8007afc <__mdiff+0x28>
 8007b2e:	693e      	ldr	r6, [r7, #16]
 8007b30:	60c5      	str	r5, [r0, #12]
 8007b32:	6925      	ldr	r5, [r4, #16]
 8007b34:	f107 0114 	add.w	r1, r7, #20
 8007b38:	f104 0914 	add.w	r9, r4, #20
 8007b3c:	f100 0e14 	add.w	lr, r0, #20
 8007b40:	f107 0210 	add.w	r2, r7, #16
 8007b44:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007b48:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007b4c:	46f2      	mov	sl, lr
 8007b4e:	2700      	movs	r7, #0
 8007b50:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b58:	fa1f f883 	uxth.w	r8, r3
 8007b5c:	fa17 f78b 	uxtah	r7, r7, fp
 8007b60:	0c1b      	lsrs	r3, r3, #16
 8007b62:	eba7 0808 	sub.w	r8, r7, r8
 8007b66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b6e:	fa1f f888 	uxth.w	r8, r8
 8007b72:	141f      	asrs	r7, r3, #16
 8007b74:	454d      	cmp	r5, r9
 8007b76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b7a:	f84a 3b04 	str.w	r3, [sl], #4
 8007b7e:	d8e7      	bhi.n	8007b50 <__mdiff+0x7c>
 8007b80:	1b2b      	subs	r3, r5, r4
 8007b82:	3b15      	subs	r3, #21
 8007b84:	f023 0303 	bic.w	r3, r3, #3
 8007b88:	3304      	adds	r3, #4
 8007b8a:	3415      	adds	r4, #21
 8007b8c:	42a5      	cmp	r5, r4
 8007b8e:	bf38      	it	cc
 8007b90:	2304      	movcc	r3, #4
 8007b92:	4419      	add	r1, r3
 8007b94:	4473      	add	r3, lr
 8007b96:	469e      	mov	lr, r3
 8007b98:	460d      	mov	r5, r1
 8007b9a:	4565      	cmp	r5, ip
 8007b9c:	d30e      	bcc.n	8007bbc <__mdiff+0xe8>
 8007b9e:	f10c 0203 	add.w	r2, ip, #3
 8007ba2:	1a52      	subs	r2, r2, r1
 8007ba4:	f022 0203 	bic.w	r2, r2, #3
 8007ba8:	3903      	subs	r1, #3
 8007baa:	458c      	cmp	ip, r1
 8007bac:	bf38      	it	cc
 8007bae:	2200      	movcc	r2, #0
 8007bb0:	441a      	add	r2, r3
 8007bb2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007bb6:	b17b      	cbz	r3, 8007bd8 <__mdiff+0x104>
 8007bb8:	6106      	str	r6, [r0, #16]
 8007bba:	e7a5      	b.n	8007b08 <__mdiff+0x34>
 8007bbc:	f855 8b04 	ldr.w	r8, [r5], #4
 8007bc0:	fa17 f488 	uxtah	r4, r7, r8
 8007bc4:	1422      	asrs	r2, r4, #16
 8007bc6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007bca:	b2a4      	uxth	r4, r4
 8007bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007bd0:	f84e 4b04 	str.w	r4, [lr], #4
 8007bd4:	1417      	asrs	r7, r2, #16
 8007bd6:	e7e0      	b.n	8007b9a <__mdiff+0xc6>
 8007bd8:	3e01      	subs	r6, #1
 8007bda:	e7ea      	b.n	8007bb2 <__mdiff+0xde>
 8007bdc:	08009d27 	.word	0x08009d27
 8007be0:	08009d38 	.word	0x08009d38

08007be4 <__d2b>:
 8007be4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007be8:	4689      	mov	r9, r1
 8007bea:	2101      	movs	r1, #1
 8007bec:	ec57 6b10 	vmov	r6, r7, d0
 8007bf0:	4690      	mov	r8, r2
 8007bf2:	f7ff fcd5 	bl	80075a0 <_Balloc>
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	b930      	cbnz	r0, 8007c08 <__d2b+0x24>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	4b25      	ldr	r3, [pc, #148]	; (8007c94 <__d2b+0xb0>)
 8007bfe:	4826      	ldr	r0, [pc, #152]	; (8007c98 <__d2b+0xb4>)
 8007c00:	f240 310a 	movw	r1, #778	; 0x30a
 8007c04:	f000 f9da 	bl	8007fbc <__assert_func>
 8007c08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c10:	bb35      	cbnz	r5, 8007c60 <__d2b+0x7c>
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	d028      	beq.n	8007c6a <__d2b+0x86>
 8007c18:	4668      	mov	r0, sp
 8007c1a:	9600      	str	r6, [sp, #0]
 8007c1c:	f7ff fd8c 	bl	8007738 <__lo0bits>
 8007c20:	9900      	ldr	r1, [sp, #0]
 8007c22:	b300      	cbz	r0, 8007c66 <__d2b+0x82>
 8007c24:	9a01      	ldr	r2, [sp, #4]
 8007c26:	f1c0 0320 	rsb	r3, r0, #32
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	40c2      	lsrs	r2, r0
 8007c32:	6163      	str	r3, [r4, #20]
 8007c34:	9201      	str	r2, [sp, #4]
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	61a3      	str	r3, [r4, #24]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf14      	ite	ne
 8007c3e:	2202      	movne	r2, #2
 8007c40:	2201      	moveq	r2, #1
 8007c42:	6122      	str	r2, [r4, #16]
 8007c44:	b1d5      	cbz	r5, 8007c7c <__d2b+0x98>
 8007c46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c4a:	4405      	add	r5, r0
 8007c4c:	f8c9 5000 	str.w	r5, [r9]
 8007c50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c54:	f8c8 0000 	str.w	r0, [r8]
 8007c58:	4620      	mov	r0, r4
 8007c5a:	b003      	add	sp, #12
 8007c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c64:	e7d5      	b.n	8007c12 <__d2b+0x2e>
 8007c66:	6161      	str	r1, [r4, #20]
 8007c68:	e7e5      	b.n	8007c36 <__d2b+0x52>
 8007c6a:	a801      	add	r0, sp, #4
 8007c6c:	f7ff fd64 	bl	8007738 <__lo0bits>
 8007c70:	9b01      	ldr	r3, [sp, #4]
 8007c72:	6163      	str	r3, [r4, #20]
 8007c74:	2201      	movs	r2, #1
 8007c76:	6122      	str	r2, [r4, #16]
 8007c78:	3020      	adds	r0, #32
 8007c7a:	e7e3      	b.n	8007c44 <__d2b+0x60>
 8007c7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c84:	f8c9 0000 	str.w	r0, [r9]
 8007c88:	6918      	ldr	r0, [r3, #16]
 8007c8a:	f7ff fd35 	bl	80076f8 <__hi0bits>
 8007c8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c92:	e7df      	b.n	8007c54 <__d2b+0x70>
 8007c94:	08009d27 	.word	0x08009d27
 8007c98:	08009d38 	.word	0x08009d38

08007c9c <_calloc_r>:
 8007c9c:	b513      	push	{r0, r1, r4, lr}
 8007c9e:	434a      	muls	r2, r1
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	9201      	str	r2, [sp, #4]
 8007ca4:	f7fe f8fe 	bl	8005ea4 <_malloc_r>
 8007ca8:	4604      	mov	r4, r0
 8007caa:	b118      	cbz	r0, 8007cb4 <_calloc_r+0x18>
 8007cac:	9a01      	ldr	r2, [sp, #4]
 8007cae:	2100      	movs	r1, #0
 8007cb0:	f7fe f8a0 	bl	8005df4 <memset>
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	b002      	add	sp, #8
 8007cb8:	bd10      	pop	{r4, pc}

08007cba <_realloc_r>:
 8007cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	4614      	mov	r4, r2
 8007cc0:	460e      	mov	r6, r1
 8007cc2:	b921      	cbnz	r1, 8007cce <_realloc_r+0x14>
 8007cc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007cc8:	4611      	mov	r1, r2
 8007cca:	f7fe b8eb 	b.w	8005ea4 <_malloc_r>
 8007cce:	b922      	cbnz	r2, 8007cda <_realloc_r+0x20>
 8007cd0:	f7fe f898 	bl	8005e04 <_free_r>
 8007cd4:	4625      	mov	r5, r4
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cda:	f000 f9ce 	bl	800807a <_malloc_usable_size_r>
 8007cde:	42a0      	cmp	r0, r4
 8007ce0:	d20f      	bcs.n	8007d02 <_realloc_r+0x48>
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	f7fe f8dd 	bl	8005ea4 <_malloc_r>
 8007cea:	4605      	mov	r5, r0
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d0f2      	beq.n	8007cd6 <_realloc_r+0x1c>
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	f7fe f870 	bl	8005dd8 <memcpy>
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	f7fe f882 	bl	8005e04 <_free_r>
 8007d00:	e7e9      	b.n	8007cd6 <_realloc_r+0x1c>
 8007d02:	4635      	mov	r5, r6
 8007d04:	e7e7      	b.n	8007cd6 <_realloc_r+0x1c>

08007d06 <__ssputs_r>:
 8007d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d0a:	688e      	ldr	r6, [r1, #8]
 8007d0c:	429e      	cmp	r6, r3
 8007d0e:	4682      	mov	sl, r0
 8007d10:	460c      	mov	r4, r1
 8007d12:	4690      	mov	r8, r2
 8007d14:	461f      	mov	r7, r3
 8007d16:	d838      	bhi.n	8007d8a <__ssputs_r+0x84>
 8007d18:	898a      	ldrh	r2, [r1, #12]
 8007d1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d1e:	d032      	beq.n	8007d86 <__ssputs_r+0x80>
 8007d20:	6825      	ldr	r5, [r4, #0]
 8007d22:	6909      	ldr	r1, [r1, #16]
 8007d24:	eba5 0901 	sub.w	r9, r5, r1
 8007d28:	6965      	ldr	r5, [r4, #20]
 8007d2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d32:	3301      	adds	r3, #1
 8007d34:	444b      	add	r3, r9
 8007d36:	106d      	asrs	r5, r5, #1
 8007d38:	429d      	cmp	r5, r3
 8007d3a:	bf38      	it	cc
 8007d3c:	461d      	movcc	r5, r3
 8007d3e:	0553      	lsls	r3, r2, #21
 8007d40:	d531      	bpl.n	8007da6 <__ssputs_r+0xa0>
 8007d42:	4629      	mov	r1, r5
 8007d44:	f7fe f8ae 	bl	8005ea4 <_malloc_r>
 8007d48:	4606      	mov	r6, r0
 8007d4a:	b950      	cbnz	r0, 8007d62 <__ssputs_r+0x5c>
 8007d4c:	230c      	movs	r3, #12
 8007d4e:	f8ca 3000 	str.w	r3, [sl]
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d58:	81a3      	strh	r3, [r4, #12]
 8007d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d62:	6921      	ldr	r1, [r4, #16]
 8007d64:	464a      	mov	r2, r9
 8007d66:	f7fe f837 	bl	8005dd8 <memcpy>
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	6126      	str	r6, [r4, #16]
 8007d78:	6165      	str	r5, [r4, #20]
 8007d7a:	444e      	add	r6, r9
 8007d7c:	eba5 0509 	sub.w	r5, r5, r9
 8007d80:	6026      	str	r6, [r4, #0]
 8007d82:	60a5      	str	r5, [r4, #8]
 8007d84:	463e      	mov	r6, r7
 8007d86:	42be      	cmp	r6, r7
 8007d88:	d900      	bls.n	8007d8c <__ssputs_r+0x86>
 8007d8a:	463e      	mov	r6, r7
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	6820      	ldr	r0, [r4, #0]
 8007d90:	4641      	mov	r1, r8
 8007d92:	f000 f958 	bl	8008046 <memmove>
 8007d96:	68a3      	ldr	r3, [r4, #8]
 8007d98:	6822      	ldr	r2, [r4, #0]
 8007d9a:	1b9b      	subs	r3, r3, r6
 8007d9c:	4432      	add	r2, r6
 8007d9e:	60a3      	str	r3, [r4, #8]
 8007da0:	6022      	str	r2, [r4, #0]
 8007da2:	2000      	movs	r0, #0
 8007da4:	e7db      	b.n	8007d5e <__ssputs_r+0x58>
 8007da6:	462a      	mov	r2, r5
 8007da8:	f7ff ff87 	bl	8007cba <_realloc_r>
 8007dac:	4606      	mov	r6, r0
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d1e1      	bne.n	8007d76 <__ssputs_r+0x70>
 8007db2:	6921      	ldr	r1, [r4, #16]
 8007db4:	4650      	mov	r0, sl
 8007db6:	f7fe f825 	bl	8005e04 <_free_r>
 8007dba:	e7c7      	b.n	8007d4c <__ssputs_r+0x46>

08007dbc <_svfiprintf_r>:
 8007dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	4698      	mov	r8, r3
 8007dc2:	898b      	ldrh	r3, [r1, #12]
 8007dc4:	061b      	lsls	r3, r3, #24
 8007dc6:	b09d      	sub	sp, #116	; 0x74
 8007dc8:	4607      	mov	r7, r0
 8007dca:	460d      	mov	r5, r1
 8007dcc:	4614      	mov	r4, r2
 8007dce:	d50e      	bpl.n	8007dee <_svfiprintf_r+0x32>
 8007dd0:	690b      	ldr	r3, [r1, #16]
 8007dd2:	b963      	cbnz	r3, 8007dee <_svfiprintf_r+0x32>
 8007dd4:	2140      	movs	r1, #64	; 0x40
 8007dd6:	f7fe f865 	bl	8005ea4 <_malloc_r>
 8007dda:	6028      	str	r0, [r5, #0]
 8007ddc:	6128      	str	r0, [r5, #16]
 8007dde:	b920      	cbnz	r0, 8007dea <_svfiprintf_r+0x2e>
 8007de0:	230c      	movs	r3, #12
 8007de2:	603b      	str	r3, [r7, #0]
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
 8007de8:	e0d1      	b.n	8007f8e <_svfiprintf_r+0x1d2>
 8007dea:	2340      	movs	r3, #64	; 0x40
 8007dec:	616b      	str	r3, [r5, #20]
 8007dee:	2300      	movs	r3, #0
 8007df0:	9309      	str	r3, [sp, #36]	; 0x24
 8007df2:	2320      	movs	r3, #32
 8007df4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007df8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dfc:	2330      	movs	r3, #48	; 0x30
 8007dfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007fa8 <_svfiprintf_r+0x1ec>
 8007e02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e06:	f04f 0901 	mov.w	r9, #1
 8007e0a:	4623      	mov	r3, r4
 8007e0c:	469a      	mov	sl, r3
 8007e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e12:	b10a      	cbz	r2, 8007e18 <_svfiprintf_r+0x5c>
 8007e14:	2a25      	cmp	r2, #37	; 0x25
 8007e16:	d1f9      	bne.n	8007e0c <_svfiprintf_r+0x50>
 8007e18:	ebba 0b04 	subs.w	fp, sl, r4
 8007e1c:	d00b      	beq.n	8007e36 <_svfiprintf_r+0x7a>
 8007e1e:	465b      	mov	r3, fp
 8007e20:	4622      	mov	r2, r4
 8007e22:	4629      	mov	r1, r5
 8007e24:	4638      	mov	r0, r7
 8007e26:	f7ff ff6e 	bl	8007d06 <__ssputs_r>
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	f000 80aa 	beq.w	8007f84 <_svfiprintf_r+0x1c8>
 8007e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e32:	445a      	add	r2, fp
 8007e34:	9209      	str	r2, [sp, #36]	; 0x24
 8007e36:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80a2 	beq.w	8007f84 <_svfiprintf_r+0x1c8>
 8007e40:	2300      	movs	r3, #0
 8007e42:	f04f 32ff 	mov.w	r2, #4294967295
 8007e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e4a:	f10a 0a01 	add.w	sl, sl, #1
 8007e4e:	9304      	str	r3, [sp, #16]
 8007e50:	9307      	str	r3, [sp, #28]
 8007e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e56:	931a      	str	r3, [sp, #104]	; 0x68
 8007e58:	4654      	mov	r4, sl
 8007e5a:	2205      	movs	r2, #5
 8007e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e60:	4851      	ldr	r0, [pc, #324]	; (8007fa8 <_svfiprintf_r+0x1ec>)
 8007e62:	f7f8 f9d5 	bl	8000210 <memchr>
 8007e66:	9a04      	ldr	r2, [sp, #16]
 8007e68:	b9d8      	cbnz	r0, 8007ea2 <_svfiprintf_r+0xe6>
 8007e6a:	06d0      	lsls	r0, r2, #27
 8007e6c:	bf44      	itt	mi
 8007e6e:	2320      	movmi	r3, #32
 8007e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e74:	0711      	lsls	r1, r2, #28
 8007e76:	bf44      	itt	mi
 8007e78:	232b      	movmi	r3, #43	; 0x2b
 8007e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e82:	2b2a      	cmp	r3, #42	; 0x2a
 8007e84:	d015      	beq.n	8007eb2 <_svfiprintf_r+0xf6>
 8007e86:	9a07      	ldr	r2, [sp, #28]
 8007e88:	4654      	mov	r4, sl
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	f04f 0c0a 	mov.w	ip, #10
 8007e90:	4621      	mov	r1, r4
 8007e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e96:	3b30      	subs	r3, #48	; 0x30
 8007e98:	2b09      	cmp	r3, #9
 8007e9a:	d94e      	bls.n	8007f3a <_svfiprintf_r+0x17e>
 8007e9c:	b1b0      	cbz	r0, 8007ecc <_svfiprintf_r+0x110>
 8007e9e:	9207      	str	r2, [sp, #28]
 8007ea0:	e014      	b.n	8007ecc <_svfiprintf_r+0x110>
 8007ea2:	eba0 0308 	sub.w	r3, r0, r8
 8007ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	46a2      	mov	sl, r4
 8007eb0:	e7d2      	b.n	8007e58 <_svfiprintf_r+0x9c>
 8007eb2:	9b03      	ldr	r3, [sp, #12]
 8007eb4:	1d19      	adds	r1, r3, #4
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	9103      	str	r1, [sp, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	bfbb      	ittet	lt
 8007ebe:	425b      	neglt	r3, r3
 8007ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ec4:	9307      	strge	r3, [sp, #28]
 8007ec6:	9307      	strlt	r3, [sp, #28]
 8007ec8:	bfb8      	it	lt
 8007eca:	9204      	strlt	r2, [sp, #16]
 8007ecc:	7823      	ldrb	r3, [r4, #0]
 8007ece:	2b2e      	cmp	r3, #46	; 0x2e
 8007ed0:	d10c      	bne.n	8007eec <_svfiprintf_r+0x130>
 8007ed2:	7863      	ldrb	r3, [r4, #1]
 8007ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed6:	d135      	bne.n	8007f44 <_svfiprintf_r+0x188>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	1d1a      	adds	r2, r3, #4
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	9203      	str	r2, [sp, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bfb8      	it	lt
 8007ee4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ee8:	3402      	adds	r4, #2
 8007eea:	9305      	str	r3, [sp, #20]
 8007eec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fb8 <_svfiprintf_r+0x1fc>
 8007ef0:	7821      	ldrb	r1, [r4, #0]
 8007ef2:	2203      	movs	r2, #3
 8007ef4:	4650      	mov	r0, sl
 8007ef6:	f7f8 f98b 	bl	8000210 <memchr>
 8007efa:	b140      	cbz	r0, 8007f0e <_svfiprintf_r+0x152>
 8007efc:	2340      	movs	r3, #64	; 0x40
 8007efe:	eba0 000a 	sub.w	r0, r0, sl
 8007f02:	fa03 f000 	lsl.w	r0, r3, r0
 8007f06:	9b04      	ldr	r3, [sp, #16]
 8007f08:	4303      	orrs	r3, r0
 8007f0a:	3401      	adds	r4, #1
 8007f0c:	9304      	str	r3, [sp, #16]
 8007f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f12:	4826      	ldr	r0, [pc, #152]	; (8007fac <_svfiprintf_r+0x1f0>)
 8007f14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f18:	2206      	movs	r2, #6
 8007f1a:	f7f8 f979 	bl	8000210 <memchr>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d038      	beq.n	8007f94 <_svfiprintf_r+0x1d8>
 8007f22:	4b23      	ldr	r3, [pc, #140]	; (8007fb0 <_svfiprintf_r+0x1f4>)
 8007f24:	bb1b      	cbnz	r3, 8007f6e <_svfiprintf_r+0x1b2>
 8007f26:	9b03      	ldr	r3, [sp, #12]
 8007f28:	3307      	adds	r3, #7
 8007f2a:	f023 0307 	bic.w	r3, r3, #7
 8007f2e:	3308      	adds	r3, #8
 8007f30:	9303      	str	r3, [sp, #12]
 8007f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f34:	4433      	add	r3, r6
 8007f36:	9309      	str	r3, [sp, #36]	; 0x24
 8007f38:	e767      	b.n	8007e0a <_svfiprintf_r+0x4e>
 8007f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f3e:	460c      	mov	r4, r1
 8007f40:	2001      	movs	r0, #1
 8007f42:	e7a5      	b.n	8007e90 <_svfiprintf_r+0xd4>
 8007f44:	2300      	movs	r3, #0
 8007f46:	3401      	adds	r4, #1
 8007f48:	9305      	str	r3, [sp, #20]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	f04f 0c0a 	mov.w	ip, #10
 8007f50:	4620      	mov	r0, r4
 8007f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f56:	3a30      	subs	r2, #48	; 0x30
 8007f58:	2a09      	cmp	r2, #9
 8007f5a:	d903      	bls.n	8007f64 <_svfiprintf_r+0x1a8>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0c5      	beq.n	8007eec <_svfiprintf_r+0x130>
 8007f60:	9105      	str	r1, [sp, #20]
 8007f62:	e7c3      	b.n	8007eec <_svfiprintf_r+0x130>
 8007f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f68:	4604      	mov	r4, r0
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e7f0      	b.n	8007f50 <_svfiprintf_r+0x194>
 8007f6e:	ab03      	add	r3, sp, #12
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	462a      	mov	r2, r5
 8007f74:	4b0f      	ldr	r3, [pc, #60]	; (8007fb4 <_svfiprintf_r+0x1f8>)
 8007f76:	a904      	add	r1, sp, #16
 8007f78:	4638      	mov	r0, r7
 8007f7a:	f7fe f88d 	bl	8006098 <_printf_float>
 8007f7e:	1c42      	adds	r2, r0, #1
 8007f80:	4606      	mov	r6, r0
 8007f82:	d1d6      	bne.n	8007f32 <_svfiprintf_r+0x176>
 8007f84:	89ab      	ldrh	r3, [r5, #12]
 8007f86:	065b      	lsls	r3, r3, #25
 8007f88:	f53f af2c 	bmi.w	8007de4 <_svfiprintf_r+0x28>
 8007f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f8e:	b01d      	add	sp, #116	; 0x74
 8007f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f94:	ab03      	add	r3, sp, #12
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	462a      	mov	r2, r5
 8007f9a:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <_svfiprintf_r+0x1f8>)
 8007f9c:	a904      	add	r1, sp, #16
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	f7fe fb1e 	bl	80065e0 <_printf_i>
 8007fa4:	e7eb      	b.n	8007f7e <_svfiprintf_r+0x1c2>
 8007fa6:	bf00      	nop
 8007fa8:	08009e94 	.word	0x08009e94
 8007fac:	08009e9e 	.word	0x08009e9e
 8007fb0:	08006099 	.word	0x08006099
 8007fb4:	08007d07 	.word	0x08007d07
 8007fb8:	08009e9a 	.word	0x08009e9a

08007fbc <__assert_func>:
 8007fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fbe:	4614      	mov	r4, r2
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <__assert_func+0x2c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	68d8      	ldr	r0, [r3, #12]
 8007fca:	b14c      	cbz	r4, 8007fe0 <__assert_func+0x24>
 8007fcc:	4b07      	ldr	r3, [pc, #28]	; (8007fec <__assert_func+0x30>)
 8007fce:	9100      	str	r1, [sp, #0]
 8007fd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fd4:	4906      	ldr	r1, [pc, #24]	; (8007ff0 <__assert_func+0x34>)
 8007fd6:	462b      	mov	r3, r5
 8007fd8:	f000 f80e 	bl	8007ff8 <fiprintf>
 8007fdc:	f000 fa7c 	bl	80084d8 <abort>
 8007fe0:	4b04      	ldr	r3, [pc, #16]	; (8007ff4 <__assert_func+0x38>)
 8007fe2:	461c      	mov	r4, r3
 8007fe4:	e7f3      	b.n	8007fce <__assert_func+0x12>
 8007fe6:	bf00      	nop
 8007fe8:	200005e4 	.word	0x200005e4
 8007fec:	08009ea5 	.word	0x08009ea5
 8007ff0:	08009eb2 	.word	0x08009eb2
 8007ff4:	08009ee0 	.word	0x08009ee0

08007ff8 <fiprintf>:
 8007ff8:	b40e      	push	{r1, r2, r3}
 8007ffa:	b503      	push	{r0, r1, lr}
 8007ffc:	4601      	mov	r1, r0
 8007ffe:	ab03      	add	r3, sp, #12
 8008000:	4805      	ldr	r0, [pc, #20]	; (8008018 <fiprintf+0x20>)
 8008002:	f853 2b04 	ldr.w	r2, [r3], #4
 8008006:	6800      	ldr	r0, [r0, #0]
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	f000 f867 	bl	80080dc <_vfiprintf_r>
 800800e:	b002      	add	sp, #8
 8008010:	f85d eb04 	ldr.w	lr, [sp], #4
 8008014:	b003      	add	sp, #12
 8008016:	4770      	bx	lr
 8008018:	200005e4 	.word	0x200005e4

0800801c <__retarget_lock_init_recursive>:
 800801c:	4770      	bx	lr

0800801e <__retarget_lock_acquire_recursive>:
 800801e:	4770      	bx	lr

08008020 <__retarget_lock_release_recursive>:
 8008020:	4770      	bx	lr

08008022 <__ascii_mbtowc>:
 8008022:	b082      	sub	sp, #8
 8008024:	b901      	cbnz	r1, 8008028 <__ascii_mbtowc+0x6>
 8008026:	a901      	add	r1, sp, #4
 8008028:	b142      	cbz	r2, 800803c <__ascii_mbtowc+0x1a>
 800802a:	b14b      	cbz	r3, 8008040 <__ascii_mbtowc+0x1e>
 800802c:	7813      	ldrb	r3, [r2, #0]
 800802e:	600b      	str	r3, [r1, #0]
 8008030:	7812      	ldrb	r2, [r2, #0]
 8008032:	1e10      	subs	r0, r2, #0
 8008034:	bf18      	it	ne
 8008036:	2001      	movne	r0, #1
 8008038:	b002      	add	sp, #8
 800803a:	4770      	bx	lr
 800803c:	4610      	mov	r0, r2
 800803e:	e7fb      	b.n	8008038 <__ascii_mbtowc+0x16>
 8008040:	f06f 0001 	mvn.w	r0, #1
 8008044:	e7f8      	b.n	8008038 <__ascii_mbtowc+0x16>

08008046 <memmove>:
 8008046:	4288      	cmp	r0, r1
 8008048:	b510      	push	{r4, lr}
 800804a:	eb01 0402 	add.w	r4, r1, r2
 800804e:	d902      	bls.n	8008056 <memmove+0x10>
 8008050:	4284      	cmp	r4, r0
 8008052:	4623      	mov	r3, r4
 8008054:	d807      	bhi.n	8008066 <memmove+0x20>
 8008056:	1e43      	subs	r3, r0, #1
 8008058:	42a1      	cmp	r1, r4
 800805a:	d008      	beq.n	800806e <memmove+0x28>
 800805c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008060:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008064:	e7f8      	b.n	8008058 <memmove+0x12>
 8008066:	4402      	add	r2, r0
 8008068:	4601      	mov	r1, r0
 800806a:	428a      	cmp	r2, r1
 800806c:	d100      	bne.n	8008070 <memmove+0x2a>
 800806e:	bd10      	pop	{r4, pc}
 8008070:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008074:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008078:	e7f7      	b.n	800806a <memmove+0x24>

0800807a <_malloc_usable_size_r>:
 800807a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800807e:	1f18      	subs	r0, r3, #4
 8008080:	2b00      	cmp	r3, #0
 8008082:	bfbc      	itt	lt
 8008084:	580b      	ldrlt	r3, [r1, r0]
 8008086:	18c0      	addlt	r0, r0, r3
 8008088:	4770      	bx	lr

0800808a <__sfputc_r>:
 800808a:	6893      	ldr	r3, [r2, #8]
 800808c:	3b01      	subs	r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	b410      	push	{r4}
 8008092:	6093      	str	r3, [r2, #8]
 8008094:	da08      	bge.n	80080a8 <__sfputc_r+0x1e>
 8008096:	6994      	ldr	r4, [r2, #24]
 8008098:	42a3      	cmp	r3, r4
 800809a:	db01      	blt.n	80080a0 <__sfputc_r+0x16>
 800809c:	290a      	cmp	r1, #10
 800809e:	d103      	bne.n	80080a8 <__sfputc_r+0x1e>
 80080a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a4:	f000 b94a 	b.w	800833c <__swbuf_r>
 80080a8:	6813      	ldr	r3, [r2, #0]
 80080aa:	1c58      	adds	r0, r3, #1
 80080ac:	6010      	str	r0, [r2, #0]
 80080ae:	7019      	strb	r1, [r3, #0]
 80080b0:	4608      	mov	r0, r1
 80080b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <__sfputs_r>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	4606      	mov	r6, r0
 80080bc:	460f      	mov	r7, r1
 80080be:	4614      	mov	r4, r2
 80080c0:	18d5      	adds	r5, r2, r3
 80080c2:	42ac      	cmp	r4, r5
 80080c4:	d101      	bne.n	80080ca <__sfputs_r+0x12>
 80080c6:	2000      	movs	r0, #0
 80080c8:	e007      	b.n	80080da <__sfputs_r+0x22>
 80080ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ce:	463a      	mov	r2, r7
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7ff ffda 	bl	800808a <__sfputc_r>
 80080d6:	1c43      	adds	r3, r0, #1
 80080d8:	d1f3      	bne.n	80080c2 <__sfputs_r+0xa>
 80080da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080dc <_vfiprintf_r>:
 80080dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	460d      	mov	r5, r1
 80080e2:	b09d      	sub	sp, #116	; 0x74
 80080e4:	4614      	mov	r4, r2
 80080e6:	4698      	mov	r8, r3
 80080e8:	4606      	mov	r6, r0
 80080ea:	b118      	cbz	r0, 80080f4 <_vfiprintf_r+0x18>
 80080ec:	6983      	ldr	r3, [r0, #24]
 80080ee:	b90b      	cbnz	r3, 80080f4 <_vfiprintf_r+0x18>
 80080f0:	f000 fb14 	bl	800871c <__sinit>
 80080f4:	4b89      	ldr	r3, [pc, #548]	; (800831c <_vfiprintf_r+0x240>)
 80080f6:	429d      	cmp	r5, r3
 80080f8:	d11b      	bne.n	8008132 <_vfiprintf_r+0x56>
 80080fa:	6875      	ldr	r5, [r6, #4]
 80080fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080fe:	07d9      	lsls	r1, r3, #31
 8008100:	d405      	bmi.n	800810e <_vfiprintf_r+0x32>
 8008102:	89ab      	ldrh	r3, [r5, #12]
 8008104:	059a      	lsls	r2, r3, #22
 8008106:	d402      	bmi.n	800810e <_vfiprintf_r+0x32>
 8008108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800810a:	f7ff ff88 	bl	800801e <__retarget_lock_acquire_recursive>
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	071b      	lsls	r3, r3, #28
 8008112:	d501      	bpl.n	8008118 <_vfiprintf_r+0x3c>
 8008114:	692b      	ldr	r3, [r5, #16]
 8008116:	b9eb      	cbnz	r3, 8008154 <_vfiprintf_r+0x78>
 8008118:	4629      	mov	r1, r5
 800811a:	4630      	mov	r0, r6
 800811c:	f000 f96e 	bl	80083fc <__swsetup_r>
 8008120:	b1c0      	cbz	r0, 8008154 <_vfiprintf_r+0x78>
 8008122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008124:	07dc      	lsls	r4, r3, #31
 8008126:	d50e      	bpl.n	8008146 <_vfiprintf_r+0x6a>
 8008128:	f04f 30ff 	mov.w	r0, #4294967295
 800812c:	b01d      	add	sp, #116	; 0x74
 800812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008132:	4b7b      	ldr	r3, [pc, #492]	; (8008320 <_vfiprintf_r+0x244>)
 8008134:	429d      	cmp	r5, r3
 8008136:	d101      	bne.n	800813c <_vfiprintf_r+0x60>
 8008138:	68b5      	ldr	r5, [r6, #8]
 800813a:	e7df      	b.n	80080fc <_vfiprintf_r+0x20>
 800813c:	4b79      	ldr	r3, [pc, #484]	; (8008324 <_vfiprintf_r+0x248>)
 800813e:	429d      	cmp	r5, r3
 8008140:	bf08      	it	eq
 8008142:	68f5      	ldreq	r5, [r6, #12]
 8008144:	e7da      	b.n	80080fc <_vfiprintf_r+0x20>
 8008146:	89ab      	ldrh	r3, [r5, #12]
 8008148:	0598      	lsls	r0, r3, #22
 800814a:	d4ed      	bmi.n	8008128 <_vfiprintf_r+0x4c>
 800814c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800814e:	f7ff ff67 	bl	8008020 <__retarget_lock_release_recursive>
 8008152:	e7e9      	b.n	8008128 <_vfiprintf_r+0x4c>
 8008154:	2300      	movs	r3, #0
 8008156:	9309      	str	r3, [sp, #36]	; 0x24
 8008158:	2320      	movs	r3, #32
 800815a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800815e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008162:	2330      	movs	r3, #48	; 0x30
 8008164:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008328 <_vfiprintf_r+0x24c>
 8008168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800816c:	f04f 0901 	mov.w	r9, #1
 8008170:	4623      	mov	r3, r4
 8008172:	469a      	mov	sl, r3
 8008174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008178:	b10a      	cbz	r2, 800817e <_vfiprintf_r+0xa2>
 800817a:	2a25      	cmp	r2, #37	; 0x25
 800817c:	d1f9      	bne.n	8008172 <_vfiprintf_r+0x96>
 800817e:	ebba 0b04 	subs.w	fp, sl, r4
 8008182:	d00b      	beq.n	800819c <_vfiprintf_r+0xc0>
 8008184:	465b      	mov	r3, fp
 8008186:	4622      	mov	r2, r4
 8008188:	4629      	mov	r1, r5
 800818a:	4630      	mov	r0, r6
 800818c:	f7ff ff94 	bl	80080b8 <__sfputs_r>
 8008190:	3001      	adds	r0, #1
 8008192:	f000 80aa 	beq.w	80082ea <_vfiprintf_r+0x20e>
 8008196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008198:	445a      	add	r2, fp
 800819a:	9209      	str	r2, [sp, #36]	; 0x24
 800819c:	f89a 3000 	ldrb.w	r3, [sl]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 80a2 	beq.w	80082ea <_vfiprintf_r+0x20e>
 80081a6:	2300      	movs	r3, #0
 80081a8:	f04f 32ff 	mov.w	r2, #4294967295
 80081ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081b0:	f10a 0a01 	add.w	sl, sl, #1
 80081b4:	9304      	str	r3, [sp, #16]
 80081b6:	9307      	str	r3, [sp, #28]
 80081b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081bc:	931a      	str	r3, [sp, #104]	; 0x68
 80081be:	4654      	mov	r4, sl
 80081c0:	2205      	movs	r2, #5
 80081c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c6:	4858      	ldr	r0, [pc, #352]	; (8008328 <_vfiprintf_r+0x24c>)
 80081c8:	f7f8 f822 	bl	8000210 <memchr>
 80081cc:	9a04      	ldr	r2, [sp, #16]
 80081ce:	b9d8      	cbnz	r0, 8008208 <_vfiprintf_r+0x12c>
 80081d0:	06d1      	lsls	r1, r2, #27
 80081d2:	bf44      	itt	mi
 80081d4:	2320      	movmi	r3, #32
 80081d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081da:	0713      	lsls	r3, r2, #28
 80081dc:	bf44      	itt	mi
 80081de:	232b      	movmi	r3, #43	; 0x2b
 80081e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081e4:	f89a 3000 	ldrb.w	r3, [sl]
 80081e8:	2b2a      	cmp	r3, #42	; 0x2a
 80081ea:	d015      	beq.n	8008218 <_vfiprintf_r+0x13c>
 80081ec:	9a07      	ldr	r2, [sp, #28]
 80081ee:	4654      	mov	r4, sl
 80081f0:	2000      	movs	r0, #0
 80081f2:	f04f 0c0a 	mov.w	ip, #10
 80081f6:	4621      	mov	r1, r4
 80081f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081fc:	3b30      	subs	r3, #48	; 0x30
 80081fe:	2b09      	cmp	r3, #9
 8008200:	d94e      	bls.n	80082a0 <_vfiprintf_r+0x1c4>
 8008202:	b1b0      	cbz	r0, 8008232 <_vfiprintf_r+0x156>
 8008204:	9207      	str	r2, [sp, #28]
 8008206:	e014      	b.n	8008232 <_vfiprintf_r+0x156>
 8008208:	eba0 0308 	sub.w	r3, r0, r8
 800820c:	fa09 f303 	lsl.w	r3, r9, r3
 8008210:	4313      	orrs	r3, r2
 8008212:	9304      	str	r3, [sp, #16]
 8008214:	46a2      	mov	sl, r4
 8008216:	e7d2      	b.n	80081be <_vfiprintf_r+0xe2>
 8008218:	9b03      	ldr	r3, [sp, #12]
 800821a:	1d19      	adds	r1, r3, #4
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	9103      	str	r1, [sp, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	bfbb      	ittet	lt
 8008224:	425b      	neglt	r3, r3
 8008226:	f042 0202 	orrlt.w	r2, r2, #2
 800822a:	9307      	strge	r3, [sp, #28]
 800822c:	9307      	strlt	r3, [sp, #28]
 800822e:	bfb8      	it	lt
 8008230:	9204      	strlt	r2, [sp, #16]
 8008232:	7823      	ldrb	r3, [r4, #0]
 8008234:	2b2e      	cmp	r3, #46	; 0x2e
 8008236:	d10c      	bne.n	8008252 <_vfiprintf_r+0x176>
 8008238:	7863      	ldrb	r3, [r4, #1]
 800823a:	2b2a      	cmp	r3, #42	; 0x2a
 800823c:	d135      	bne.n	80082aa <_vfiprintf_r+0x1ce>
 800823e:	9b03      	ldr	r3, [sp, #12]
 8008240:	1d1a      	adds	r2, r3, #4
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	9203      	str	r2, [sp, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	bfb8      	it	lt
 800824a:	f04f 33ff 	movlt.w	r3, #4294967295
 800824e:	3402      	adds	r4, #2
 8008250:	9305      	str	r3, [sp, #20]
 8008252:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008338 <_vfiprintf_r+0x25c>
 8008256:	7821      	ldrb	r1, [r4, #0]
 8008258:	2203      	movs	r2, #3
 800825a:	4650      	mov	r0, sl
 800825c:	f7f7 ffd8 	bl	8000210 <memchr>
 8008260:	b140      	cbz	r0, 8008274 <_vfiprintf_r+0x198>
 8008262:	2340      	movs	r3, #64	; 0x40
 8008264:	eba0 000a 	sub.w	r0, r0, sl
 8008268:	fa03 f000 	lsl.w	r0, r3, r0
 800826c:	9b04      	ldr	r3, [sp, #16]
 800826e:	4303      	orrs	r3, r0
 8008270:	3401      	adds	r4, #1
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008278:	482c      	ldr	r0, [pc, #176]	; (800832c <_vfiprintf_r+0x250>)
 800827a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800827e:	2206      	movs	r2, #6
 8008280:	f7f7 ffc6 	bl	8000210 <memchr>
 8008284:	2800      	cmp	r0, #0
 8008286:	d03f      	beq.n	8008308 <_vfiprintf_r+0x22c>
 8008288:	4b29      	ldr	r3, [pc, #164]	; (8008330 <_vfiprintf_r+0x254>)
 800828a:	bb1b      	cbnz	r3, 80082d4 <_vfiprintf_r+0x1f8>
 800828c:	9b03      	ldr	r3, [sp, #12]
 800828e:	3307      	adds	r3, #7
 8008290:	f023 0307 	bic.w	r3, r3, #7
 8008294:	3308      	adds	r3, #8
 8008296:	9303      	str	r3, [sp, #12]
 8008298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829a:	443b      	add	r3, r7
 800829c:	9309      	str	r3, [sp, #36]	; 0x24
 800829e:	e767      	b.n	8008170 <_vfiprintf_r+0x94>
 80082a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80082a4:	460c      	mov	r4, r1
 80082a6:	2001      	movs	r0, #1
 80082a8:	e7a5      	b.n	80081f6 <_vfiprintf_r+0x11a>
 80082aa:	2300      	movs	r3, #0
 80082ac:	3401      	adds	r4, #1
 80082ae:	9305      	str	r3, [sp, #20]
 80082b0:	4619      	mov	r1, r3
 80082b2:	f04f 0c0a 	mov.w	ip, #10
 80082b6:	4620      	mov	r0, r4
 80082b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082bc:	3a30      	subs	r2, #48	; 0x30
 80082be:	2a09      	cmp	r2, #9
 80082c0:	d903      	bls.n	80082ca <_vfiprintf_r+0x1ee>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0c5      	beq.n	8008252 <_vfiprintf_r+0x176>
 80082c6:	9105      	str	r1, [sp, #20]
 80082c8:	e7c3      	b.n	8008252 <_vfiprintf_r+0x176>
 80082ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80082ce:	4604      	mov	r4, r0
 80082d0:	2301      	movs	r3, #1
 80082d2:	e7f0      	b.n	80082b6 <_vfiprintf_r+0x1da>
 80082d4:	ab03      	add	r3, sp, #12
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	462a      	mov	r2, r5
 80082da:	4b16      	ldr	r3, [pc, #88]	; (8008334 <_vfiprintf_r+0x258>)
 80082dc:	a904      	add	r1, sp, #16
 80082de:	4630      	mov	r0, r6
 80082e0:	f7fd feda 	bl	8006098 <_printf_float>
 80082e4:	4607      	mov	r7, r0
 80082e6:	1c78      	adds	r0, r7, #1
 80082e8:	d1d6      	bne.n	8008298 <_vfiprintf_r+0x1bc>
 80082ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ec:	07d9      	lsls	r1, r3, #31
 80082ee:	d405      	bmi.n	80082fc <_vfiprintf_r+0x220>
 80082f0:	89ab      	ldrh	r3, [r5, #12]
 80082f2:	059a      	lsls	r2, r3, #22
 80082f4:	d402      	bmi.n	80082fc <_vfiprintf_r+0x220>
 80082f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082f8:	f7ff fe92 	bl	8008020 <__retarget_lock_release_recursive>
 80082fc:	89ab      	ldrh	r3, [r5, #12]
 80082fe:	065b      	lsls	r3, r3, #25
 8008300:	f53f af12 	bmi.w	8008128 <_vfiprintf_r+0x4c>
 8008304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008306:	e711      	b.n	800812c <_vfiprintf_r+0x50>
 8008308:	ab03      	add	r3, sp, #12
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	462a      	mov	r2, r5
 800830e:	4b09      	ldr	r3, [pc, #36]	; (8008334 <_vfiprintf_r+0x258>)
 8008310:	a904      	add	r1, sp, #16
 8008312:	4630      	mov	r0, r6
 8008314:	f7fe f964 	bl	80065e0 <_printf_i>
 8008318:	e7e4      	b.n	80082e4 <_vfiprintf_r+0x208>
 800831a:	bf00      	nop
 800831c:	0800a00c 	.word	0x0800a00c
 8008320:	0800a02c 	.word	0x0800a02c
 8008324:	08009fec 	.word	0x08009fec
 8008328:	08009e94 	.word	0x08009e94
 800832c:	08009e9e 	.word	0x08009e9e
 8008330:	08006099 	.word	0x08006099
 8008334:	080080b9 	.word	0x080080b9
 8008338:	08009e9a 	.word	0x08009e9a

0800833c <__swbuf_r>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	460e      	mov	r6, r1
 8008340:	4614      	mov	r4, r2
 8008342:	4605      	mov	r5, r0
 8008344:	b118      	cbz	r0, 800834e <__swbuf_r+0x12>
 8008346:	6983      	ldr	r3, [r0, #24]
 8008348:	b90b      	cbnz	r3, 800834e <__swbuf_r+0x12>
 800834a:	f000 f9e7 	bl	800871c <__sinit>
 800834e:	4b21      	ldr	r3, [pc, #132]	; (80083d4 <__swbuf_r+0x98>)
 8008350:	429c      	cmp	r4, r3
 8008352:	d12b      	bne.n	80083ac <__swbuf_r+0x70>
 8008354:	686c      	ldr	r4, [r5, #4]
 8008356:	69a3      	ldr	r3, [r4, #24]
 8008358:	60a3      	str	r3, [r4, #8]
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	071a      	lsls	r2, r3, #28
 800835e:	d52f      	bpl.n	80083c0 <__swbuf_r+0x84>
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	b36b      	cbz	r3, 80083c0 <__swbuf_r+0x84>
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	6820      	ldr	r0, [r4, #0]
 8008368:	1ac0      	subs	r0, r0, r3
 800836a:	6963      	ldr	r3, [r4, #20]
 800836c:	b2f6      	uxtb	r6, r6
 800836e:	4283      	cmp	r3, r0
 8008370:	4637      	mov	r7, r6
 8008372:	dc04      	bgt.n	800837e <__swbuf_r+0x42>
 8008374:	4621      	mov	r1, r4
 8008376:	4628      	mov	r0, r5
 8008378:	f000 f93c 	bl	80085f4 <_fflush_r>
 800837c:	bb30      	cbnz	r0, 80083cc <__swbuf_r+0x90>
 800837e:	68a3      	ldr	r3, [r4, #8]
 8008380:	3b01      	subs	r3, #1
 8008382:	60a3      	str	r3, [r4, #8]
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	6022      	str	r2, [r4, #0]
 800838a:	701e      	strb	r6, [r3, #0]
 800838c:	6963      	ldr	r3, [r4, #20]
 800838e:	3001      	adds	r0, #1
 8008390:	4283      	cmp	r3, r0
 8008392:	d004      	beq.n	800839e <__swbuf_r+0x62>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	07db      	lsls	r3, r3, #31
 8008398:	d506      	bpl.n	80083a8 <__swbuf_r+0x6c>
 800839a:	2e0a      	cmp	r6, #10
 800839c:	d104      	bne.n	80083a8 <__swbuf_r+0x6c>
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f000 f927 	bl	80085f4 <_fflush_r>
 80083a6:	b988      	cbnz	r0, 80083cc <__swbuf_r+0x90>
 80083a8:	4638      	mov	r0, r7
 80083aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ac:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <__swbuf_r+0x9c>)
 80083ae:	429c      	cmp	r4, r3
 80083b0:	d101      	bne.n	80083b6 <__swbuf_r+0x7a>
 80083b2:	68ac      	ldr	r4, [r5, #8]
 80083b4:	e7cf      	b.n	8008356 <__swbuf_r+0x1a>
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <__swbuf_r+0xa0>)
 80083b8:	429c      	cmp	r4, r3
 80083ba:	bf08      	it	eq
 80083bc:	68ec      	ldreq	r4, [r5, #12]
 80083be:	e7ca      	b.n	8008356 <__swbuf_r+0x1a>
 80083c0:	4621      	mov	r1, r4
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 f81a 	bl	80083fc <__swsetup_r>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d0cb      	beq.n	8008364 <__swbuf_r+0x28>
 80083cc:	f04f 37ff 	mov.w	r7, #4294967295
 80083d0:	e7ea      	b.n	80083a8 <__swbuf_r+0x6c>
 80083d2:	bf00      	nop
 80083d4:	0800a00c 	.word	0x0800a00c
 80083d8:	0800a02c 	.word	0x0800a02c
 80083dc:	08009fec 	.word	0x08009fec

080083e0 <__ascii_wctomb>:
 80083e0:	b149      	cbz	r1, 80083f6 <__ascii_wctomb+0x16>
 80083e2:	2aff      	cmp	r2, #255	; 0xff
 80083e4:	bf85      	ittet	hi
 80083e6:	238a      	movhi	r3, #138	; 0x8a
 80083e8:	6003      	strhi	r3, [r0, #0]
 80083ea:	700a      	strbls	r2, [r1, #0]
 80083ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80083f0:	bf98      	it	ls
 80083f2:	2001      	movls	r0, #1
 80083f4:	4770      	bx	lr
 80083f6:	4608      	mov	r0, r1
 80083f8:	4770      	bx	lr
	...

080083fc <__swsetup_r>:
 80083fc:	4b32      	ldr	r3, [pc, #200]	; (80084c8 <__swsetup_r+0xcc>)
 80083fe:	b570      	push	{r4, r5, r6, lr}
 8008400:	681d      	ldr	r5, [r3, #0]
 8008402:	4606      	mov	r6, r0
 8008404:	460c      	mov	r4, r1
 8008406:	b125      	cbz	r5, 8008412 <__swsetup_r+0x16>
 8008408:	69ab      	ldr	r3, [r5, #24]
 800840a:	b913      	cbnz	r3, 8008412 <__swsetup_r+0x16>
 800840c:	4628      	mov	r0, r5
 800840e:	f000 f985 	bl	800871c <__sinit>
 8008412:	4b2e      	ldr	r3, [pc, #184]	; (80084cc <__swsetup_r+0xd0>)
 8008414:	429c      	cmp	r4, r3
 8008416:	d10f      	bne.n	8008438 <__swsetup_r+0x3c>
 8008418:	686c      	ldr	r4, [r5, #4]
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008420:	0719      	lsls	r1, r3, #28
 8008422:	d42c      	bmi.n	800847e <__swsetup_r+0x82>
 8008424:	06dd      	lsls	r5, r3, #27
 8008426:	d411      	bmi.n	800844c <__swsetup_r+0x50>
 8008428:	2309      	movs	r3, #9
 800842a:	6033      	str	r3, [r6, #0]
 800842c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008430:	81a3      	strh	r3, [r4, #12]
 8008432:	f04f 30ff 	mov.w	r0, #4294967295
 8008436:	e03e      	b.n	80084b6 <__swsetup_r+0xba>
 8008438:	4b25      	ldr	r3, [pc, #148]	; (80084d0 <__swsetup_r+0xd4>)
 800843a:	429c      	cmp	r4, r3
 800843c:	d101      	bne.n	8008442 <__swsetup_r+0x46>
 800843e:	68ac      	ldr	r4, [r5, #8]
 8008440:	e7eb      	b.n	800841a <__swsetup_r+0x1e>
 8008442:	4b24      	ldr	r3, [pc, #144]	; (80084d4 <__swsetup_r+0xd8>)
 8008444:	429c      	cmp	r4, r3
 8008446:	bf08      	it	eq
 8008448:	68ec      	ldreq	r4, [r5, #12]
 800844a:	e7e6      	b.n	800841a <__swsetup_r+0x1e>
 800844c:	0758      	lsls	r0, r3, #29
 800844e:	d512      	bpl.n	8008476 <__swsetup_r+0x7a>
 8008450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008452:	b141      	cbz	r1, 8008466 <__swsetup_r+0x6a>
 8008454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008458:	4299      	cmp	r1, r3
 800845a:	d002      	beq.n	8008462 <__swsetup_r+0x66>
 800845c:	4630      	mov	r0, r6
 800845e:	f7fd fcd1 	bl	8005e04 <_free_r>
 8008462:	2300      	movs	r3, #0
 8008464:	6363      	str	r3, [r4, #52]	; 0x34
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	2300      	movs	r3, #0
 8008470:	6063      	str	r3, [r4, #4]
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	f043 0308 	orr.w	r3, r3, #8
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	6923      	ldr	r3, [r4, #16]
 8008480:	b94b      	cbnz	r3, 8008496 <__swsetup_r+0x9a>
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800848c:	d003      	beq.n	8008496 <__swsetup_r+0x9a>
 800848e:	4621      	mov	r1, r4
 8008490:	4630      	mov	r0, r6
 8008492:	f000 fa05 	bl	80088a0 <__smakebuf_r>
 8008496:	89a0      	ldrh	r0, [r4, #12]
 8008498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800849c:	f010 0301 	ands.w	r3, r0, #1
 80084a0:	d00a      	beq.n	80084b8 <__swsetup_r+0xbc>
 80084a2:	2300      	movs	r3, #0
 80084a4:	60a3      	str	r3, [r4, #8]
 80084a6:	6963      	ldr	r3, [r4, #20]
 80084a8:	425b      	negs	r3, r3
 80084aa:	61a3      	str	r3, [r4, #24]
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	b943      	cbnz	r3, 80084c2 <__swsetup_r+0xc6>
 80084b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084b4:	d1ba      	bne.n	800842c <__swsetup_r+0x30>
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	0781      	lsls	r1, r0, #30
 80084ba:	bf58      	it	pl
 80084bc:	6963      	ldrpl	r3, [r4, #20]
 80084be:	60a3      	str	r3, [r4, #8]
 80084c0:	e7f4      	b.n	80084ac <__swsetup_r+0xb0>
 80084c2:	2000      	movs	r0, #0
 80084c4:	e7f7      	b.n	80084b6 <__swsetup_r+0xba>
 80084c6:	bf00      	nop
 80084c8:	200005e4 	.word	0x200005e4
 80084cc:	0800a00c 	.word	0x0800a00c
 80084d0:	0800a02c 	.word	0x0800a02c
 80084d4:	08009fec 	.word	0x08009fec

080084d8 <abort>:
 80084d8:	b508      	push	{r3, lr}
 80084da:	2006      	movs	r0, #6
 80084dc:	f000 fa48 	bl	8008970 <raise>
 80084e0:	2001      	movs	r0, #1
 80084e2:	f7f9 f8db 	bl	800169c <_exit>
	...

080084e8 <__sflush_r>:
 80084e8:	898a      	ldrh	r2, [r1, #12]
 80084ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ee:	4605      	mov	r5, r0
 80084f0:	0710      	lsls	r0, r2, #28
 80084f2:	460c      	mov	r4, r1
 80084f4:	d458      	bmi.n	80085a8 <__sflush_r+0xc0>
 80084f6:	684b      	ldr	r3, [r1, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	dc05      	bgt.n	8008508 <__sflush_r+0x20>
 80084fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	dc02      	bgt.n	8008508 <__sflush_r+0x20>
 8008502:	2000      	movs	r0, #0
 8008504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800850a:	2e00      	cmp	r6, #0
 800850c:	d0f9      	beq.n	8008502 <__sflush_r+0x1a>
 800850e:	2300      	movs	r3, #0
 8008510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008514:	682f      	ldr	r7, [r5, #0]
 8008516:	602b      	str	r3, [r5, #0]
 8008518:	d032      	beq.n	8008580 <__sflush_r+0x98>
 800851a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	075a      	lsls	r2, r3, #29
 8008520:	d505      	bpl.n	800852e <__sflush_r+0x46>
 8008522:	6863      	ldr	r3, [r4, #4]
 8008524:	1ac0      	subs	r0, r0, r3
 8008526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008528:	b10b      	cbz	r3, 800852e <__sflush_r+0x46>
 800852a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800852c:	1ac0      	subs	r0, r0, r3
 800852e:	2300      	movs	r3, #0
 8008530:	4602      	mov	r2, r0
 8008532:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008534:	6a21      	ldr	r1, [r4, #32]
 8008536:	4628      	mov	r0, r5
 8008538:	47b0      	blx	r6
 800853a:	1c43      	adds	r3, r0, #1
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	d106      	bne.n	800854e <__sflush_r+0x66>
 8008540:	6829      	ldr	r1, [r5, #0]
 8008542:	291d      	cmp	r1, #29
 8008544:	d82c      	bhi.n	80085a0 <__sflush_r+0xb8>
 8008546:	4a2a      	ldr	r2, [pc, #168]	; (80085f0 <__sflush_r+0x108>)
 8008548:	40ca      	lsrs	r2, r1
 800854a:	07d6      	lsls	r6, r2, #31
 800854c:	d528      	bpl.n	80085a0 <__sflush_r+0xb8>
 800854e:	2200      	movs	r2, #0
 8008550:	6062      	str	r2, [r4, #4]
 8008552:	04d9      	lsls	r1, r3, #19
 8008554:	6922      	ldr	r2, [r4, #16]
 8008556:	6022      	str	r2, [r4, #0]
 8008558:	d504      	bpl.n	8008564 <__sflush_r+0x7c>
 800855a:	1c42      	adds	r2, r0, #1
 800855c:	d101      	bne.n	8008562 <__sflush_r+0x7a>
 800855e:	682b      	ldr	r3, [r5, #0]
 8008560:	b903      	cbnz	r3, 8008564 <__sflush_r+0x7c>
 8008562:	6560      	str	r0, [r4, #84]	; 0x54
 8008564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008566:	602f      	str	r7, [r5, #0]
 8008568:	2900      	cmp	r1, #0
 800856a:	d0ca      	beq.n	8008502 <__sflush_r+0x1a>
 800856c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008570:	4299      	cmp	r1, r3
 8008572:	d002      	beq.n	800857a <__sflush_r+0x92>
 8008574:	4628      	mov	r0, r5
 8008576:	f7fd fc45 	bl	8005e04 <_free_r>
 800857a:	2000      	movs	r0, #0
 800857c:	6360      	str	r0, [r4, #52]	; 0x34
 800857e:	e7c1      	b.n	8008504 <__sflush_r+0x1c>
 8008580:	6a21      	ldr	r1, [r4, #32]
 8008582:	2301      	movs	r3, #1
 8008584:	4628      	mov	r0, r5
 8008586:	47b0      	blx	r6
 8008588:	1c41      	adds	r1, r0, #1
 800858a:	d1c7      	bne.n	800851c <__sflush_r+0x34>
 800858c:	682b      	ldr	r3, [r5, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0c4      	beq.n	800851c <__sflush_r+0x34>
 8008592:	2b1d      	cmp	r3, #29
 8008594:	d001      	beq.n	800859a <__sflush_r+0xb2>
 8008596:	2b16      	cmp	r3, #22
 8008598:	d101      	bne.n	800859e <__sflush_r+0xb6>
 800859a:	602f      	str	r7, [r5, #0]
 800859c:	e7b1      	b.n	8008502 <__sflush_r+0x1a>
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a4:	81a3      	strh	r3, [r4, #12]
 80085a6:	e7ad      	b.n	8008504 <__sflush_r+0x1c>
 80085a8:	690f      	ldr	r7, [r1, #16]
 80085aa:	2f00      	cmp	r7, #0
 80085ac:	d0a9      	beq.n	8008502 <__sflush_r+0x1a>
 80085ae:	0793      	lsls	r3, r2, #30
 80085b0:	680e      	ldr	r6, [r1, #0]
 80085b2:	bf08      	it	eq
 80085b4:	694b      	ldreq	r3, [r1, #20]
 80085b6:	600f      	str	r7, [r1, #0]
 80085b8:	bf18      	it	ne
 80085ba:	2300      	movne	r3, #0
 80085bc:	eba6 0807 	sub.w	r8, r6, r7
 80085c0:	608b      	str	r3, [r1, #8]
 80085c2:	f1b8 0f00 	cmp.w	r8, #0
 80085c6:	dd9c      	ble.n	8008502 <__sflush_r+0x1a>
 80085c8:	6a21      	ldr	r1, [r4, #32]
 80085ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085cc:	4643      	mov	r3, r8
 80085ce:	463a      	mov	r2, r7
 80085d0:	4628      	mov	r0, r5
 80085d2:	47b0      	blx	r6
 80085d4:	2800      	cmp	r0, #0
 80085d6:	dc06      	bgt.n	80085e6 <__sflush_r+0xfe>
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085de:	81a3      	strh	r3, [r4, #12]
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295
 80085e4:	e78e      	b.n	8008504 <__sflush_r+0x1c>
 80085e6:	4407      	add	r7, r0
 80085e8:	eba8 0800 	sub.w	r8, r8, r0
 80085ec:	e7e9      	b.n	80085c2 <__sflush_r+0xda>
 80085ee:	bf00      	nop
 80085f0:	20400001 	.word	0x20400001

080085f4 <_fflush_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	690b      	ldr	r3, [r1, #16]
 80085f8:	4605      	mov	r5, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	b913      	cbnz	r3, 8008604 <_fflush_r+0x10>
 80085fe:	2500      	movs	r5, #0
 8008600:	4628      	mov	r0, r5
 8008602:	bd38      	pop	{r3, r4, r5, pc}
 8008604:	b118      	cbz	r0, 800860e <_fflush_r+0x1a>
 8008606:	6983      	ldr	r3, [r0, #24]
 8008608:	b90b      	cbnz	r3, 800860e <_fflush_r+0x1a>
 800860a:	f000 f887 	bl	800871c <__sinit>
 800860e:	4b14      	ldr	r3, [pc, #80]	; (8008660 <_fflush_r+0x6c>)
 8008610:	429c      	cmp	r4, r3
 8008612:	d11b      	bne.n	800864c <_fflush_r+0x58>
 8008614:	686c      	ldr	r4, [r5, #4]
 8008616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0ef      	beq.n	80085fe <_fflush_r+0xa>
 800861e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008620:	07d0      	lsls	r0, r2, #31
 8008622:	d404      	bmi.n	800862e <_fflush_r+0x3a>
 8008624:	0599      	lsls	r1, r3, #22
 8008626:	d402      	bmi.n	800862e <_fflush_r+0x3a>
 8008628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800862a:	f7ff fcf8 	bl	800801e <__retarget_lock_acquire_recursive>
 800862e:	4628      	mov	r0, r5
 8008630:	4621      	mov	r1, r4
 8008632:	f7ff ff59 	bl	80084e8 <__sflush_r>
 8008636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008638:	07da      	lsls	r2, r3, #31
 800863a:	4605      	mov	r5, r0
 800863c:	d4e0      	bmi.n	8008600 <_fflush_r+0xc>
 800863e:	89a3      	ldrh	r3, [r4, #12]
 8008640:	059b      	lsls	r3, r3, #22
 8008642:	d4dd      	bmi.n	8008600 <_fflush_r+0xc>
 8008644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008646:	f7ff fceb 	bl	8008020 <__retarget_lock_release_recursive>
 800864a:	e7d9      	b.n	8008600 <_fflush_r+0xc>
 800864c:	4b05      	ldr	r3, [pc, #20]	; (8008664 <_fflush_r+0x70>)
 800864e:	429c      	cmp	r4, r3
 8008650:	d101      	bne.n	8008656 <_fflush_r+0x62>
 8008652:	68ac      	ldr	r4, [r5, #8]
 8008654:	e7df      	b.n	8008616 <_fflush_r+0x22>
 8008656:	4b04      	ldr	r3, [pc, #16]	; (8008668 <_fflush_r+0x74>)
 8008658:	429c      	cmp	r4, r3
 800865a:	bf08      	it	eq
 800865c:	68ec      	ldreq	r4, [r5, #12]
 800865e:	e7da      	b.n	8008616 <_fflush_r+0x22>
 8008660:	0800a00c 	.word	0x0800a00c
 8008664:	0800a02c 	.word	0x0800a02c
 8008668:	08009fec 	.word	0x08009fec

0800866c <std>:
 800866c:	2300      	movs	r3, #0
 800866e:	b510      	push	{r4, lr}
 8008670:	4604      	mov	r4, r0
 8008672:	e9c0 3300 	strd	r3, r3, [r0]
 8008676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800867a:	6083      	str	r3, [r0, #8]
 800867c:	8181      	strh	r1, [r0, #12]
 800867e:	6643      	str	r3, [r0, #100]	; 0x64
 8008680:	81c2      	strh	r2, [r0, #14]
 8008682:	6183      	str	r3, [r0, #24]
 8008684:	4619      	mov	r1, r3
 8008686:	2208      	movs	r2, #8
 8008688:	305c      	adds	r0, #92	; 0x5c
 800868a:	f7fd fbb3 	bl	8005df4 <memset>
 800868e:	4b05      	ldr	r3, [pc, #20]	; (80086a4 <std+0x38>)
 8008690:	6263      	str	r3, [r4, #36]	; 0x24
 8008692:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <std+0x3c>)
 8008694:	62a3      	str	r3, [r4, #40]	; 0x28
 8008696:	4b05      	ldr	r3, [pc, #20]	; (80086ac <std+0x40>)
 8008698:	62e3      	str	r3, [r4, #44]	; 0x2c
 800869a:	4b05      	ldr	r3, [pc, #20]	; (80086b0 <std+0x44>)
 800869c:	6224      	str	r4, [r4, #32]
 800869e:	6323      	str	r3, [r4, #48]	; 0x30
 80086a0:	bd10      	pop	{r4, pc}
 80086a2:	bf00      	nop
 80086a4:	080089a9 	.word	0x080089a9
 80086a8:	080089cb 	.word	0x080089cb
 80086ac:	08008a03 	.word	0x08008a03
 80086b0:	08008a27 	.word	0x08008a27

080086b4 <_cleanup_r>:
 80086b4:	4901      	ldr	r1, [pc, #4]	; (80086bc <_cleanup_r+0x8>)
 80086b6:	f000 b8af 	b.w	8008818 <_fwalk_reent>
 80086ba:	bf00      	nop
 80086bc:	080085f5 	.word	0x080085f5

080086c0 <__sfmoreglue>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	1e4a      	subs	r2, r1, #1
 80086c4:	2568      	movs	r5, #104	; 0x68
 80086c6:	4355      	muls	r5, r2
 80086c8:	460e      	mov	r6, r1
 80086ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086ce:	f7fd fbe9 	bl	8005ea4 <_malloc_r>
 80086d2:	4604      	mov	r4, r0
 80086d4:	b140      	cbz	r0, 80086e8 <__sfmoreglue+0x28>
 80086d6:	2100      	movs	r1, #0
 80086d8:	e9c0 1600 	strd	r1, r6, [r0]
 80086dc:	300c      	adds	r0, #12
 80086de:	60a0      	str	r0, [r4, #8]
 80086e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086e4:	f7fd fb86 	bl	8005df4 <memset>
 80086e8:	4620      	mov	r0, r4
 80086ea:	bd70      	pop	{r4, r5, r6, pc}

080086ec <__sfp_lock_acquire>:
 80086ec:	4801      	ldr	r0, [pc, #4]	; (80086f4 <__sfp_lock_acquire+0x8>)
 80086ee:	f7ff bc96 	b.w	800801e <__retarget_lock_acquire_recursive>
 80086f2:	bf00      	nop
 80086f4:	20000968 	.word	0x20000968

080086f8 <__sfp_lock_release>:
 80086f8:	4801      	ldr	r0, [pc, #4]	; (8008700 <__sfp_lock_release+0x8>)
 80086fa:	f7ff bc91 	b.w	8008020 <__retarget_lock_release_recursive>
 80086fe:	bf00      	nop
 8008700:	20000968 	.word	0x20000968

08008704 <__sinit_lock_acquire>:
 8008704:	4801      	ldr	r0, [pc, #4]	; (800870c <__sinit_lock_acquire+0x8>)
 8008706:	f7ff bc8a 	b.w	800801e <__retarget_lock_acquire_recursive>
 800870a:	bf00      	nop
 800870c:	20000963 	.word	0x20000963

08008710 <__sinit_lock_release>:
 8008710:	4801      	ldr	r0, [pc, #4]	; (8008718 <__sinit_lock_release+0x8>)
 8008712:	f7ff bc85 	b.w	8008020 <__retarget_lock_release_recursive>
 8008716:	bf00      	nop
 8008718:	20000963 	.word	0x20000963

0800871c <__sinit>:
 800871c:	b510      	push	{r4, lr}
 800871e:	4604      	mov	r4, r0
 8008720:	f7ff fff0 	bl	8008704 <__sinit_lock_acquire>
 8008724:	69a3      	ldr	r3, [r4, #24]
 8008726:	b11b      	cbz	r3, 8008730 <__sinit+0x14>
 8008728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800872c:	f7ff bff0 	b.w	8008710 <__sinit_lock_release>
 8008730:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008734:	6523      	str	r3, [r4, #80]	; 0x50
 8008736:	4b13      	ldr	r3, [pc, #76]	; (8008784 <__sinit+0x68>)
 8008738:	4a13      	ldr	r2, [pc, #76]	; (8008788 <__sinit+0x6c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	62a2      	str	r2, [r4, #40]	; 0x28
 800873e:	42a3      	cmp	r3, r4
 8008740:	bf04      	itt	eq
 8008742:	2301      	moveq	r3, #1
 8008744:	61a3      	streq	r3, [r4, #24]
 8008746:	4620      	mov	r0, r4
 8008748:	f000 f820 	bl	800878c <__sfp>
 800874c:	6060      	str	r0, [r4, #4]
 800874e:	4620      	mov	r0, r4
 8008750:	f000 f81c 	bl	800878c <__sfp>
 8008754:	60a0      	str	r0, [r4, #8]
 8008756:	4620      	mov	r0, r4
 8008758:	f000 f818 	bl	800878c <__sfp>
 800875c:	2200      	movs	r2, #0
 800875e:	60e0      	str	r0, [r4, #12]
 8008760:	2104      	movs	r1, #4
 8008762:	6860      	ldr	r0, [r4, #4]
 8008764:	f7ff ff82 	bl	800866c <std>
 8008768:	68a0      	ldr	r0, [r4, #8]
 800876a:	2201      	movs	r2, #1
 800876c:	2109      	movs	r1, #9
 800876e:	f7ff ff7d 	bl	800866c <std>
 8008772:	68e0      	ldr	r0, [r4, #12]
 8008774:	2202      	movs	r2, #2
 8008776:	2112      	movs	r1, #18
 8008778:	f7ff ff78 	bl	800866c <std>
 800877c:	2301      	movs	r3, #1
 800877e:	61a3      	str	r3, [r4, #24]
 8008780:	e7d2      	b.n	8008728 <__sinit+0xc>
 8008782:	bf00      	nop
 8008784:	08009c6c 	.word	0x08009c6c
 8008788:	080086b5 	.word	0x080086b5

0800878c <__sfp>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	4607      	mov	r7, r0
 8008790:	f7ff ffac 	bl	80086ec <__sfp_lock_acquire>
 8008794:	4b1e      	ldr	r3, [pc, #120]	; (8008810 <__sfp+0x84>)
 8008796:	681e      	ldr	r6, [r3, #0]
 8008798:	69b3      	ldr	r3, [r6, #24]
 800879a:	b913      	cbnz	r3, 80087a2 <__sfp+0x16>
 800879c:	4630      	mov	r0, r6
 800879e:	f7ff ffbd 	bl	800871c <__sinit>
 80087a2:	3648      	adds	r6, #72	; 0x48
 80087a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	d503      	bpl.n	80087b4 <__sfp+0x28>
 80087ac:	6833      	ldr	r3, [r6, #0]
 80087ae:	b30b      	cbz	r3, 80087f4 <__sfp+0x68>
 80087b0:	6836      	ldr	r6, [r6, #0]
 80087b2:	e7f7      	b.n	80087a4 <__sfp+0x18>
 80087b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087b8:	b9d5      	cbnz	r5, 80087f0 <__sfp+0x64>
 80087ba:	4b16      	ldr	r3, [pc, #88]	; (8008814 <__sfp+0x88>)
 80087bc:	60e3      	str	r3, [r4, #12]
 80087be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087c2:	6665      	str	r5, [r4, #100]	; 0x64
 80087c4:	f7ff fc2a 	bl	800801c <__retarget_lock_init_recursive>
 80087c8:	f7ff ff96 	bl	80086f8 <__sfp_lock_release>
 80087cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087d4:	6025      	str	r5, [r4, #0]
 80087d6:	61a5      	str	r5, [r4, #24]
 80087d8:	2208      	movs	r2, #8
 80087da:	4629      	mov	r1, r5
 80087dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087e0:	f7fd fb08 	bl	8005df4 <memset>
 80087e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087ec:	4620      	mov	r0, r4
 80087ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f0:	3468      	adds	r4, #104	; 0x68
 80087f2:	e7d9      	b.n	80087a8 <__sfp+0x1c>
 80087f4:	2104      	movs	r1, #4
 80087f6:	4638      	mov	r0, r7
 80087f8:	f7ff ff62 	bl	80086c0 <__sfmoreglue>
 80087fc:	4604      	mov	r4, r0
 80087fe:	6030      	str	r0, [r6, #0]
 8008800:	2800      	cmp	r0, #0
 8008802:	d1d5      	bne.n	80087b0 <__sfp+0x24>
 8008804:	f7ff ff78 	bl	80086f8 <__sfp_lock_release>
 8008808:	230c      	movs	r3, #12
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	e7ee      	b.n	80087ec <__sfp+0x60>
 800880e:	bf00      	nop
 8008810:	08009c6c 	.word	0x08009c6c
 8008814:	ffff0001 	.word	0xffff0001

08008818 <_fwalk_reent>:
 8008818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800881c:	4606      	mov	r6, r0
 800881e:	4688      	mov	r8, r1
 8008820:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008824:	2700      	movs	r7, #0
 8008826:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800882a:	f1b9 0901 	subs.w	r9, r9, #1
 800882e:	d505      	bpl.n	800883c <_fwalk_reent+0x24>
 8008830:	6824      	ldr	r4, [r4, #0]
 8008832:	2c00      	cmp	r4, #0
 8008834:	d1f7      	bne.n	8008826 <_fwalk_reent+0xe>
 8008836:	4638      	mov	r0, r7
 8008838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883c:	89ab      	ldrh	r3, [r5, #12]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d907      	bls.n	8008852 <_fwalk_reent+0x3a>
 8008842:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008846:	3301      	adds	r3, #1
 8008848:	d003      	beq.n	8008852 <_fwalk_reent+0x3a>
 800884a:	4629      	mov	r1, r5
 800884c:	4630      	mov	r0, r6
 800884e:	47c0      	blx	r8
 8008850:	4307      	orrs	r7, r0
 8008852:	3568      	adds	r5, #104	; 0x68
 8008854:	e7e9      	b.n	800882a <_fwalk_reent+0x12>

08008856 <__swhatbuf_r>:
 8008856:	b570      	push	{r4, r5, r6, lr}
 8008858:	460e      	mov	r6, r1
 800885a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885e:	2900      	cmp	r1, #0
 8008860:	b096      	sub	sp, #88	; 0x58
 8008862:	4614      	mov	r4, r2
 8008864:	461d      	mov	r5, r3
 8008866:	da07      	bge.n	8008878 <__swhatbuf_r+0x22>
 8008868:	2300      	movs	r3, #0
 800886a:	602b      	str	r3, [r5, #0]
 800886c:	89b3      	ldrh	r3, [r6, #12]
 800886e:	061a      	lsls	r2, r3, #24
 8008870:	d410      	bmi.n	8008894 <__swhatbuf_r+0x3e>
 8008872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008876:	e00e      	b.n	8008896 <__swhatbuf_r+0x40>
 8008878:	466a      	mov	r2, sp
 800887a:	f000 f8fb 	bl	8008a74 <_fstat_r>
 800887e:	2800      	cmp	r0, #0
 8008880:	dbf2      	blt.n	8008868 <__swhatbuf_r+0x12>
 8008882:	9a01      	ldr	r2, [sp, #4]
 8008884:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008888:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800888c:	425a      	negs	r2, r3
 800888e:	415a      	adcs	r2, r3
 8008890:	602a      	str	r2, [r5, #0]
 8008892:	e7ee      	b.n	8008872 <__swhatbuf_r+0x1c>
 8008894:	2340      	movs	r3, #64	; 0x40
 8008896:	2000      	movs	r0, #0
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	b016      	add	sp, #88	; 0x58
 800889c:	bd70      	pop	{r4, r5, r6, pc}
	...

080088a0 <__smakebuf_r>:
 80088a0:	898b      	ldrh	r3, [r1, #12]
 80088a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088a4:	079d      	lsls	r5, r3, #30
 80088a6:	4606      	mov	r6, r0
 80088a8:	460c      	mov	r4, r1
 80088aa:	d507      	bpl.n	80088bc <__smakebuf_r+0x1c>
 80088ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	6123      	str	r3, [r4, #16]
 80088b4:	2301      	movs	r3, #1
 80088b6:	6163      	str	r3, [r4, #20]
 80088b8:	b002      	add	sp, #8
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	ab01      	add	r3, sp, #4
 80088be:	466a      	mov	r2, sp
 80088c0:	f7ff ffc9 	bl	8008856 <__swhatbuf_r>
 80088c4:	9900      	ldr	r1, [sp, #0]
 80088c6:	4605      	mov	r5, r0
 80088c8:	4630      	mov	r0, r6
 80088ca:	f7fd faeb 	bl	8005ea4 <_malloc_r>
 80088ce:	b948      	cbnz	r0, 80088e4 <__smakebuf_r+0x44>
 80088d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d4:	059a      	lsls	r2, r3, #22
 80088d6:	d4ef      	bmi.n	80088b8 <__smakebuf_r+0x18>
 80088d8:	f023 0303 	bic.w	r3, r3, #3
 80088dc:	f043 0302 	orr.w	r3, r3, #2
 80088e0:	81a3      	strh	r3, [r4, #12]
 80088e2:	e7e3      	b.n	80088ac <__smakebuf_r+0xc>
 80088e4:	4b0d      	ldr	r3, [pc, #52]	; (800891c <__smakebuf_r+0x7c>)
 80088e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	6020      	str	r0, [r4, #0]
 80088ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f0:	81a3      	strh	r3, [r4, #12]
 80088f2:	9b00      	ldr	r3, [sp, #0]
 80088f4:	6163      	str	r3, [r4, #20]
 80088f6:	9b01      	ldr	r3, [sp, #4]
 80088f8:	6120      	str	r0, [r4, #16]
 80088fa:	b15b      	cbz	r3, 8008914 <__smakebuf_r+0x74>
 80088fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008900:	4630      	mov	r0, r6
 8008902:	f000 f8c9 	bl	8008a98 <_isatty_r>
 8008906:	b128      	cbz	r0, 8008914 <__smakebuf_r+0x74>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	f023 0303 	bic.w	r3, r3, #3
 800890e:	f043 0301 	orr.w	r3, r3, #1
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	89a0      	ldrh	r0, [r4, #12]
 8008916:	4305      	orrs	r5, r0
 8008918:	81a5      	strh	r5, [r4, #12]
 800891a:	e7cd      	b.n	80088b8 <__smakebuf_r+0x18>
 800891c:	080086b5 	.word	0x080086b5

08008920 <_raise_r>:
 8008920:	291f      	cmp	r1, #31
 8008922:	b538      	push	{r3, r4, r5, lr}
 8008924:	4604      	mov	r4, r0
 8008926:	460d      	mov	r5, r1
 8008928:	d904      	bls.n	8008934 <_raise_r+0x14>
 800892a:	2316      	movs	r3, #22
 800892c:	6003      	str	r3, [r0, #0]
 800892e:	f04f 30ff 	mov.w	r0, #4294967295
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008936:	b112      	cbz	r2, 800893e <_raise_r+0x1e>
 8008938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800893c:	b94b      	cbnz	r3, 8008952 <_raise_r+0x32>
 800893e:	4620      	mov	r0, r4
 8008940:	f000 f830 	bl	80089a4 <_getpid_r>
 8008944:	462a      	mov	r2, r5
 8008946:	4601      	mov	r1, r0
 8008948:	4620      	mov	r0, r4
 800894a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800894e:	f000 b817 	b.w	8008980 <_kill_r>
 8008952:	2b01      	cmp	r3, #1
 8008954:	d00a      	beq.n	800896c <_raise_r+0x4c>
 8008956:	1c59      	adds	r1, r3, #1
 8008958:	d103      	bne.n	8008962 <_raise_r+0x42>
 800895a:	2316      	movs	r3, #22
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	2001      	movs	r0, #1
 8008960:	e7e7      	b.n	8008932 <_raise_r+0x12>
 8008962:	2400      	movs	r4, #0
 8008964:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008968:	4628      	mov	r0, r5
 800896a:	4798      	blx	r3
 800896c:	2000      	movs	r0, #0
 800896e:	e7e0      	b.n	8008932 <_raise_r+0x12>

08008970 <raise>:
 8008970:	4b02      	ldr	r3, [pc, #8]	; (800897c <raise+0xc>)
 8008972:	4601      	mov	r1, r0
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	f7ff bfd3 	b.w	8008920 <_raise_r>
 800897a:	bf00      	nop
 800897c:	200005e4 	.word	0x200005e4

08008980 <_kill_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d07      	ldr	r5, [pc, #28]	; (80089a0 <_kill_r+0x20>)
 8008984:	2300      	movs	r3, #0
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	4611      	mov	r1, r2
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	f7f8 fe75 	bl	800167c <_kill>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	d102      	bne.n	800899c <_kill_r+0x1c>
 8008996:	682b      	ldr	r3, [r5, #0]
 8008998:	b103      	cbz	r3, 800899c <_kill_r+0x1c>
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	bd38      	pop	{r3, r4, r5, pc}
 800899e:	bf00      	nop
 80089a0:	2000095c 	.word	0x2000095c

080089a4 <_getpid_r>:
 80089a4:	f7f8 be62 	b.w	800166c <_getpid>

080089a8 <__sread>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	460c      	mov	r4, r1
 80089ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b0:	f000 f894 	bl	8008adc <_read_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	bfab      	itete	ge
 80089b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089ba:	89a3      	ldrhlt	r3, [r4, #12]
 80089bc:	181b      	addge	r3, r3, r0
 80089be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089c2:	bfac      	ite	ge
 80089c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089c6:	81a3      	strhlt	r3, [r4, #12]
 80089c8:	bd10      	pop	{r4, pc}

080089ca <__swrite>:
 80089ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ce:	461f      	mov	r7, r3
 80089d0:	898b      	ldrh	r3, [r1, #12]
 80089d2:	05db      	lsls	r3, r3, #23
 80089d4:	4605      	mov	r5, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	4616      	mov	r6, r2
 80089da:	d505      	bpl.n	80089e8 <__swrite+0x1e>
 80089dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e0:	2302      	movs	r3, #2
 80089e2:	2200      	movs	r2, #0
 80089e4:	f000 f868 	bl	8008ab8 <_lseek_r>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	4632      	mov	r2, r6
 80089f6:	463b      	mov	r3, r7
 80089f8:	4628      	mov	r0, r5
 80089fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	f000 b817 	b.w	8008a30 <_write_r>

08008a02 <__sseek>:
 8008a02:	b510      	push	{r4, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0a:	f000 f855 	bl	8008ab8 <_lseek_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	bf15      	itete	ne
 8008a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a1e:	81a3      	strheq	r3, [r4, #12]
 8008a20:	bf18      	it	ne
 8008a22:	81a3      	strhne	r3, [r4, #12]
 8008a24:	bd10      	pop	{r4, pc}

08008a26 <__sclose>:
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f000 b813 	b.w	8008a54 <_close_r>
	...

08008a30 <_write_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d07      	ldr	r5, [pc, #28]	; (8008a50 <_write_r+0x20>)
 8008a34:	4604      	mov	r4, r0
 8008a36:	4608      	mov	r0, r1
 8008a38:	4611      	mov	r1, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	602a      	str	r2, [r5, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7f8 fe53 	bl	80016ea <_write>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_write_r+0x1e>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_write_r+0x1e>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	2000095c 	.word	0x2000095c

08008a54 <_close_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d06      	ldr	r5, [pc, #24]	; (8008a70 <_close_r+0x1c>)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	f7f8 fe5f 	bl	8001722 <_close>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_close_r+0x1a>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_close_r+0x1a>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	2000095c 	.word	0x2000095c

08008a74 <_fstat_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d07      	ldr	r5, [pc, #28]	; (8008a94 <_fstat_r+0x20>)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	4611      	mov	r1, r2
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	f7f8 fe5a 	bl	800173a <_fstat>
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	d102      	bne.n	8008a90 <_fstat_r+0x1c>
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	b103      	cbz	r3, 8008a90 <_fstat_r+0x1c>
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	bd38      	pop	{r3, r4, r5, pc}
 8008a92:	bf00      	nop
 8008a94:	2000095c 	.word	0x2000095c

08008a98 <_isatty_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d06      	ldr	r5, [pc, #24]	; (8008ab4 <_isatty_r+0x1c>)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	602b      	str	r3, [r5, #0]
 8008aa4:	f7f8 fe59 	bl	800175a <_isatty>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_isatty_r+0x1a>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_isatty_r+0x1a>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	2000095c 	.word	0x2000095c

08008ab8 <_lseek_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4d07      	ldr	r5, [pc, #28]	; (8008ad8 <_lseek_r+0x20>)
 8008abc:	4604      	mov	r4, r0
 8008abe:	4608      	mov	r0, r1
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	602a      	str	r2, [r5, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f7f8 fe52 	bl	8001770 <_lseek>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_lseek_r+0x1e>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_lseek_r+0x1e>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	2000095c 	.word	0x2000095c

08008adc <_read_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4d07      	ldr	r5, [pc, #28]	; (8008afc <_read_r+0x20>)
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	602a      	str	r2, [r5, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f7f8 fde0 	bl	80016b0 <_read>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_read_r+0x1e>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_read_r+0x1e>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	2000095c 	.word	0x2000095c

08008b00 <_init>:
 8008b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b02:	bf00      	nop
 8008b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b06:	bc08      	pop	{r3}
 8008b08:	469e      	mov	lr, r3
 8008b0a:	4770      	bx	lr

08008b0c <_fini>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	bf00      	nop
 8008b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b12:	bc08      	pop	{r3}
 8008b14:	469e      	mov	lr, r3
 8008b16:	4770      	bx	lr
