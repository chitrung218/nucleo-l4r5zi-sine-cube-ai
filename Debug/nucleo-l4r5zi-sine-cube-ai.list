
nucleo-l4r5zi-sine-cube-ai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f74  08008c70  08008c70  00018c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbe4  0800bbe4  000207b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbe4  0800bbe4  0001bbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbec  0800bbec  000207b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbec  0800bbec  0001bbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbf0  0800bbf0  0001bbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007b4  20000000  0800bbf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200007b4  0800c3a8  000207b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200009fc  0800c3a8  000209fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e63  00000000  00000000  000207e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b9  00000000  00000000  00034647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00036e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00037da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d458  00000000  00000000  00038c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001190d  00000000  00000000  000660a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116ca8  00000000  00000000  000779ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0018e655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005234  00000000  00000000  0018e724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200007b4 	.word	0x200007b4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008c58 	.word	0x08008c58

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200007b8 	.word	0x200007b8
 80001fc:	08008c58 	.word	0x08008c58

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000ed6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  char buf[50];
  int buf_len = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

  // Pointer to our model
  ai_handle sine_model = AI_HANDLE_NULL;
 8000ede:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]

  // Initialize wrapper structs that hold pointers to data and info about the
  // data (tensor height, width, channels)
  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000ee6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eea:	4a7e      	ldr	r2, [pc, #504]	; (80010e4 <main+0x214>)
 8000eec:	461c      	mov	r4, r3
 8000eee:	4615      	mov	r5, r2
 8000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ef8:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000efc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f00:	4a78      	ldr	r2, [pc, #480]	; (80010e4 <main+0x214>)
 8000f02:	461c      	mov	r4, r3
 8000f04:	4615      	mov	r5, r2
 8000f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f0e:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4a74      	ldr	r2, [pc, #464]	; (80010e8 <main+0x218>)
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	809a      	strh	r2, [r3, #4]
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2201      	movs	r2, #1
 8000f22:	80da      	strh	r2, [r3, #6]
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2201      	movs	r2, #1
 8000f28:	811a      	strh	r2, [r3, #8]
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	f642 2234 	movw	r2, #10804	; 0x2a34
 8000f30:	60da      	str	r2, [r3, #12]
		  AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000f32:	f003 fed9 	bl	8004ce8 <ai_sine_model_data_weights_get>
 8000f36:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4a69      	ldr	r2, [pc, #420]	; (80010ec <main+0x21c>)
 8000f46:	619a      	str	r2, [r3, #24]
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	839a      	strh	r2, [r3, #28]
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2201      	movs	r2, #1
 8000f52:	83da      	strh	r2, [r3, #30]
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2201      	movs	r2, #1
 8000f58:	841a      	strh	r2, [r3, #32]
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
		  AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].n_batches = 1;
 8000f70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f74:	2201      	movs	r2, #1
 8000f76:	809a      	strh	r2, [r3, #4]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000f78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f7c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000f80:	611a      	str	r2, [r3, #16]
  ai_output[0].n_batches = 1;
 8000f82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f86:	2201      	movs	r2, #1
 8000f88:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000f8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f8e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000f92:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f000 fd15 	bl	80019c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f8ba 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 fa10 	bl	80013c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fa0:	f000 f9c2 	bl	8001328 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8000fa4:	f000 f94e 	bl	8001244 <MX_TIM16_Init>
  MX_CRC_Init();
 8000fa8:	f000 f92a 	bl	8001200 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000fac:	f000 f970 	bl	8001290 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start timer/counter
  HAL_TIM_Base_Start(&htim16);
 8000fb0:	484f      	ldr	r0, [pc, #316]	; (80010f0 <main+0x220>)
 8000fb2:	f002 fe4f 	bl	8003c54 <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000fb6:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8000fba:	494e      	ldr	r1, [pc, #312]	; (80010f4 <main+0x224>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 fcf1 	bl	80069a4 <siprintf>
 8000fc2:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
  //HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);

  // Create instance of neural network
  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000fc6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 fe25 	bl	8004c1c <ai_sine_model_create>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
  if (ai_err.type != AI_ERROR_NONE)
 8000fd8:	f897 3200 	ldrb.w	r3, [r7, #512]	; 0x200
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d008      	beq.n	8000ff2 <main+0x122>
  {
	  buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000fe0:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8000fe4:	4944      	ldr	r1, [pc, #272]	; (80010f8 <main+0x228>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f005 fcdc 	bl	80069a4 <siprintf>
 8000fec:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
	  //HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
	  while(1);
 8000ff0:	e7fe      	b.n	8000ff0 <main+0x120>
  }

  // Initialize neural network
  if (!ai_sine_model_init(sine_model, &ai_params))
 8000ff2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	1d3a      	adds	r2, r7, #4
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 fe23 	bl	8004c48 <ai_sine_model_init>
 8001002:	4603      	mov	r3, r0
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d008      	beq.n	8001020 <main+0x150>
  {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 800100e:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8001012:	493a      	ldr	r1, [pc, #232]	; (80010fc <main+0x22c>)
 8001014:	4618      	mov	r0, r3
 8001016:	f005 fcc5 	bl	80069a4 <siprintf>
 800101a:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
      //HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
      while(1);
 800101e:	e7fe      	b.n	800101e <main+0x14e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	4837      	ldr	r0, [pc, #220]	; (8001100 <main+0x230>)
 8001024:	f001 f8e0 	bl	80021e8 <HAL_GPIO_TogglePin>
	  // Fill input buffer (use test value)
	  for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800102e:	e00d      	b.n	800104c <main+0x17c>
	  {
		  ((ai_float *)in_data)[i] = (ai_float)2.0f;
 8001030:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800103a:	4413      	add	r3, r2
 800103c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001040:	601a      	str	r2, [r3, #0]
	  for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8001042:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001046:	3301      	adds	r3, #1
 8001048:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800104c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0ed      	beq.n	8001030 <main+0x160>
	  }

	  // Get current timestamp
	  timestamp = htim16.Instance->CNT;
 8001054:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <main+0x220>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

	  // Perform inference
	  nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 800105e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001068:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fe2a 	bl	8004cc6 <ai_sine_model_run>
 8001072:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
	  if (nbatch != 1) {
 8001076:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800107a:	2b01      	cmp	r3, #1
 800107c:	d010      	beq.n	80010a0 <main+0x1d0>
		buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800107e:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8001082:	4920      	ldr	r1, [pc, #128]	; (8001104 <main+0x234>)
 8001084:	4618      	mov	r0, r3
 8001086:	f005 fc8d 	bl	80069a4 <siprintf>
 800108a:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
		HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 800108e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8001092:	b29a      	uxth	r2, r3
 8001094:	f507 7101 	add.w	r1, r7, #516	; 0x204
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	481b      	ldr	r0, [pc, #108]	; (8001108 <main+0x238>)
 800109c:	f002 ff2c 	bl	8003ef8 <HAL_UART_Transmit>
	  }

	  // Read output (predicted y) of neural network
	  y_val = ((float *)out_data)[0];
 80010a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

	  uint32_t inference_time = htim16.Instance->CNT - timestamp;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <main+0x220>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010b0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	  // Print output of neural network along with inference time (microseconds)
	  buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, inference_time);
 80010ba:	f8d7 023c 	ldr.w	r0, [r7, #572]	; 0x23c
 80010be:	f7ff fa5b 	bl	8000578 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	f507 7001 	add.w	r0, r7, #516	; 0x204
 80010ca:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80010ce:	9100      	str	r1, [sp, #0]
 80010d0:	490e      	ldr	r1, [pc, #56]	; (800110c <main+0x23c>)
 80010d2:	f005 fc67 	bl	80069a4 <siprintf>
 80010d6:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248

	  //HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);

	  // Wait before doing it again
	  HAL_Delay(1000);
 80010da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010de:	f000 fce5 	bl	8001aac <HAL_Delay>
  {
 80010e2:	e79d      	b.n	8001020 <main+0x150>
 80010e4:	08008d1c 	.word	0x08008d1c
 80010e8:	40040440 	.word	0x40040440
 80010ec:	00040440 	.word	0x00040440
 80010f0:	2000099c 	.word	0x2000099c
 80010f4:	08008c70 	.word	0x08008c70
 80010f8:	08008c8c 	.word	0x08008c8c
 80010fc:	08008cb4 	.word	0x08008cb4
 8001100:	48000400 	.word	0x48000400
 8001104:	08008cd8 	.word	0x08008cd8
 8001108:	20000858 	.word	0x20000858
 800110c:	08008cfc 	.word	0x08008cfc

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0bc      	sub	sp, #240	; 0xf0
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800111a:	2244      	movs	r2, #68	; 0x44
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f004 ff14 	bl	8005f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2294      	movs	r2, #148	; 0x94
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f004 ff06 	bl	8005f4c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001140:	2000      	movs	r0, #0
 8001142:	f001 f88b 	bl	800225c <HAL_PWREx_ControlVoltageScaling>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800114c:	f000 fa0e 	bl	800156c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800115a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115e:	2340      	movs	r3, #64	; 0x40
 8001160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001176:	231e      	movs	r3, #30
 8001178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001192:	4618      	mov	r0, r3
 8001194:	f001 f916 	bl	80023c4 <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800119e:	f000 f9e5 	bl	800156c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a8:	2303      	movs	r3, #3
 80011aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011c6:	2105      	movs	r1, #5
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fd21 	bl	8002c10 <HAL_RCC_ClockConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011d4:	f000 f9ca 	bl	800156c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80011d8:	2306      	movs	r3, #6
 80011da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011dc:	2300      	movs	r3, #0
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 ffc4 	bl	8003174 <HAL_RCCEx_PeriphCLKConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80011f2:	f000 f9bb 	bl	800156c <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	37f0      	adds	r7, #240	; 0xf0
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <MX_CRC_Init+0x3c>)
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <MX_CRC_Init+0x40>)
 8001208:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_CRC_Init+0x3c>)
 800120c:	2200      	movs	r2, #0
 800120e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_CRC_Init+0x3c>)
 8001212:	2200      	movs	r2, #0
 8001214:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_CRC_Init+0x3c>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_CRC_Init+0x3c>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_CRC_Init+0x3c>)
 8001224:	2201      	movs	r2, #1
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_CRC_Init+0x3c>)
 800122a:	f000 fd49 	bl	8001cc0 <HAL_CRC_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001234:	f000 f99a 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200008e8 	.word	0x200008e8
 8001240:	40023000 	.word	0x40023000

08001244 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_TIM16_Init+0x44>)
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <MX_TIM16_Init+0x48>)
 800124c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80-1;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_TIM16_Init+0x44>)
 8001250:	224f      	movs	r2, #79	; 0x4f
 8001252:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_TIM16_Init+0x44>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536-1;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_TIM16_Init+0x44>)
 800125c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001260:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_TIM16_Init+0x44>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <MX_TIM16_Init+0x44>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_TIM16_Init+0x44>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_TIM16_Init+0x44>)
 8001276:	f002 fc95 	bl	8003ba4 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001280:	f000 f974 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000099c 	.word	0x2000099c
 800128c:	40014400 	.word	0x40014400

08001290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <MX_USART2_UART_Init+0x90>)
 8001296:	4a23      	ldr	r2, [pc, #140]	; (8001324 <MX_USART2_UART_Init+0x94>)
 8001298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <MX_USART2_UART_Init+0x90>)
 800129c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d8:	4811      	ldr	r0, [pc, #68]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012da:	f002 fdbd 	bl	8003e58 <HAL_UART_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012e4:	f000 f942 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e8:	2100      	movs	r1, #0
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012ec:	f003 fb0c 	bl	8004908 <HAL_UARTEx_SetTxFifoThreshold>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012f6:	f000 f939 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4808      	ldr	r0, [pc, #32]	; (8001320 <MX_USART2_UART_Init+0x90>)
 80012fe:	f003 fb41 	bl	8004984 <HAL_UARTEx_SetRxFifoThreshold>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001308:	f000 f930 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_USART2_UART_Init+0x90>)
 800130e:	f003 fac2 	bl	8004896 <HAL_UARTEx_DisableFifoMode>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001318:	f000 f928 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000090c 	.word	0x2000090c
 8001324:	40004400 	.word	0x40004400

08001328 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 800132e:	4a23      	ldr	r2, [pc, #140]	; (80013bc <MX_USART3_UART_Init+0x94>)
 8001330:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001370:	4811      	ldr	r0, [pc, #68]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 8001372:	f002 fd71 	bl	8003e58 <HAL_UART_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800137c:	f000 f8f6 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001380:	2100      	movs	r1, #0
 8001382:	480d      	ldr	r0, [pc, #52]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 8001384:	f003 fac0 	bl	8004908 <HAL_UARTEx_SetTxFifoThreshold>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800138e:	f000 f8ed 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001392:	2100      	movs	r1, #0
 8001394:	4808      	ldr	r0, [pc, #32]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 8001396:	f003 faf5 	bl	8004984 <HAL_UARTEx_SetRxFifoThreshold>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013a0:	f000 f8e4 	bl	800156c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_USART3_UART_Init+0x90>)
 80013a6:	f003 fa76 	bl	8004896 <HAL_UARTEx_DisableFifoMode>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013b0:	f000 f8dc 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000858 	.word	0x20000858
 80013bc:	40004800 	.word	0x40004800

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	4b60      	ldr	r3, [pc, #384]	; (8001558 <MX_GPIO_Init+0x198>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a5f      	ldr	r2, [pc, #380]	; (8001558 <MX_GPIO_Init+0x198>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <MX_GPIO_Init+0x198>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	61bb      	str	r3, [r7, #24]
 80013ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	4b5a      	ldr	r3, [pc, #360]	; (8001558 <MX_GPIO_Init+0x198>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a59      	ldr	r2, [pc, #356]	; (8001558 <MX_GPIO_Init+0x198>)
 80013f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b57      	ldr	r3, [pc, #348]	; (8001558 <MX_GPIO_Init+0x198>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	4b54      	ldr	r3, [pc, #336]	; (8001558 <MX_GPIO_Init+0x198>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a53      	ldr	r2, [pc, #332]	; (8001558 <MX_GPIO_Init+0x198>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b51      	ldr	r3, [pc, #324]	; (8001558 <MX_GPIO_Init+0x198>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <MX_GPIO_Init+0x198>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a4d      	ldr	r2, [pc, #308]	; (8001558 <MX_GPIO_Init+0x198>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <MX_GPIO_Init+0x198>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	4b48      	ldr	r3, [pc, #288]	; (8001558 <MX_GPIO_Init+0x198>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a47      	ldr	r2, [pc, #284]	; (8001558 <MX_GPIO_Init+0x198>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b45      	ldr	r3, [pc, #276]	; (8001558 <MX_GPIO_Init+0x198>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800144e:	4b42      	ldr	r3, [pc, #264]	; (8001558 <MX_GPIO_Init+0x198>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a41      	ldr	r2, [pc, #260]	; (8001558 <MX_GPIO_Init+0x198>)
 8001454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <MX_GPIO_Init+0x198>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001466:	f000 ff9d 	bl	80023a4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001470:	483a      	ldr	r0, [pc, #232]	; (800155c <MX_GPIO_Init+0x19c>)
 8001472:	f000 fea1 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2120      	movs	r1, #32
 800147a:	4839      	ldr	r0, [pc, #228]	; (8001560 <MX_GPIO_Init+0x1a0>)
 800147c:	f000 fe9c 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <MX_GPIO_Init+0x1a4>)
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	4834      	ldr	r0, [pc, #208]	; (8001568 <MX_GPIO_Init+0x1a8>)
 8001496:	f000 fcfd 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800149a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	482a      	ldr	r0, [pc, #168]	; (800155c <MX_GPIO_Init+0x19c>)
 80014b4:	f000 fcee 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014b8:	2320      	movs	r3, #32
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4824      	ldr	r0, [pc, #144]	; (8001560 <MX_GPIO_Init+0x1a0>)
 80014d0:	f000 fce0 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014d4:	2340      	movs	r3, #64	; 0x40
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	481e      	ldr	r0, [pc, #120]	; (8001560 <MX_GPIO_Init+0x1a0>)
 80014e8:	f000 fcd4 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_TX_Pin STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80014ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014fe:	2308      	movs	r3, #8
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	4619      	mov	r1, r3
 8001508:	4815      	ldr	r0, [pc, #84]	; (8001560 <MX_GPIO_Init+0x1a0>)
 800150a:	f000 fcc3 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800150e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001520:	230a      	movs	r3, #10
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f000 fcb1 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154a:	f000 fca3 	bl	8001e94 <HAL_GPIO_Init>

}
 800154e:	bf00      	nop
 8001550:	3730      	adds	r7, #48	; 0x30
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	48000400 	.word	0x48000400
 8001560:	48001800 	.word	0x48001800
 8001564:	10110000 	.word	0x10110000
 8001568:	48000800 	.word	0x48000800

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_MspInit+0x44>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <HAL_MspInit+0x44>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6613      	str	r3, [r2, #96]	; 0x60
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_MspInit+0x44>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_MspInit+0x44>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_MspInit+0x44>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6593      	str	r3, [r2, #88]	; 0x58
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_MspInit+0x44>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000

080015c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_CRC_MspInit+0x38>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10b      	bne.n	80015ea <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_CRC_MspInit+0x3c>)
 80015d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_CRC_MspInit+0x3c>)
 80015d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015dc:	6493      	str	r3, [r2, #72]	; 0x48
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_CRC_MspInit+0x3c>)
 80015e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023000 	.word	0x40023000
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_TIM_Base_MspInit+0x38>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10b      	bne.n	800162a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_TIM_Base_MspInit+0x3c>)
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_TIM_Base_MspInit+0x3c>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	6613      	str	r3, [r2, #96]	; 0x60
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_TIM_Base_MspInit+0x3c>)
 8001620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40014400 	.word	0x40014400
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a2f      	ldr	r2, [pc, #188]	; (800171c <HAL_UART_MspInit+0xdc>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d129      	bne.n	80016b6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001662:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <HAL_UART_MspInit+0xe0>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <HAL_UART_MspInit+0xe0>)
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	6593      	str	r3, [r2, #88]	; 0x58
 800166e:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <HAL_UART_MspInit+0xe0>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	4b29      	ldr	r3, [pc, #164]	; (8001720 <HAL_UART_MspInit+0xe0>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a28      	ldr	r2, [pc, #160]	; (8001720 <HAL_UART_MspInit+0xe0>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_UART_MspInit+0xe0>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001692:	230c      	movs	r3, #12
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a2:	2307      	movs	r3, #7
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f000 fbf0 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016b4:	e02d      	b.n	8001712 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART3)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <HAL_UART_MspInit+0xe4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d128      	bne.n	8001712 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_UART_MspInit+0xe0>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	4a16      	ldr	r2, [pc, #88]	; (8001720 <HAL_UART_MspInit+0xe0>)
 80016c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ca:	6593      	str	r3, [r2, #88]	; 0x58
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_UART_MspInit+0xe0>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_UART_MspInit+0xe0>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_UART_MspInit+0xe0>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_UART_MspInit+0xe0>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001702:	2307      	movs	r3, #7
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4806      	ldr	r0, [pc, #24]	; (8001728 <HAL_UART_MspInit+0xe8>)
 800170e:	f000 fbc1 	bl	8001e94 <HAL_GPIO_Init>
}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	; 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40004400 	.word	0x40004400
 8001720:	40021000 	.word	0x40021000
 8001724:	40004800 	.word	0x40004800
 8001728:	48000c00 	.word	0x48000c00

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f978 	bl	8001a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
	return 1;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_kill>:

int _kill(int pid, int sig)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800179a:	f004 fb97 	bl	8005ecc <__errno>
 800179e:	4603      	mov	r3, r0
 80017a0:	2216      	movs	r2, #22
 80017a2:	601a      	str	r2, [r3, #0]
	return -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_exit>:

void _exit (int status)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ffe7 	bl	8001790 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017c2:	e7fe      	b.n	80017c2 <_exit+0x12>

080017c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	e00a      	b.n	80017ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017d6:	f3af 8000 	nop.w
 80017da:	4601      	mov	r1, r0
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	60ba      	str	r2, [r7, #8]
 80017e2:	b2ca      	uxtb	r2, r1
 80017e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbf0      	blt.n	80017d6 <_read+0x12>
	}

return len;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e009      	b.n	8001824 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60ba      	str	r2, [r7, #8]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbf1      	blt.n	8001810 <_write+0x12>
	}
	return len;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_close>:

int _close(int file)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
	return -1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800185e:	605a      	str	r2, [r3, #4]
	return 0;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_isatty>:

int _isatty(int file)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
	return 1;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
	return 0;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f004 fafc 	bl	8005ecc <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200a0000 	.word	0x200a0000
 8001900:	00000800 	.word	0x00000800
 8001904:	200007d0 	.word	0x200007d0
 8001908:	20000a00 	.word	0x20000a00

0800190c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <SystemInit+0x5c>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <SystemInit+0x5c>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <SystemInit+0x60>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a11      	ldr	r2, [pc, #68]	; (800196c <SystemInit+0x60>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <SystemInit+0x60>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <SystemInit+0x60>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a0d      	ldr	r2, [pc, #52]	; (800196c <SystemInit+0x60>)
 8001938:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800193c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001940:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <SystemInit+0x60>)
 8001944:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001948:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <SystemInit+0x60>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a07      	ldr	r2, [pc, #28]	; (800196c <SystemInit+0x60>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <SystemInit+0x60>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	40021000 	.word	0x40021000

08001970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001974:	f7ff ffca 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001978:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800197a:	e003      	b.n	8001984 <LoopCopyDataInit>

0800197c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800197e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001980:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001982:	3104      	adds	r1, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001984:	480a      	ldr	r0, [pc, #40]	; (80019b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001988:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800198a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800198c:	d3f6      	bcc.n	800197c <CopyDataInit>
	ldr	r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001990:	e002      	b.n	8001998 <LoopFillZerobss>

08001992 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001992:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001994:	f842 3b04 	str.w	r3, [r2], #4

08001998 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <LoopForever+0x16>)
	cmp	r2, r3
 800199a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800199c:	d3f9      	bcc.n	8001992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199e:	f004 fa9b 	bl	8005ed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019a2:	f7ff fa95 	bl	8000ed0 <main>

080019a6 <LoopForever>:

LoopForever:
    b LoopForever
 80019a6:	e7fe      	b.n	80019a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019a8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80019ac:	0800bbf4 	.word	0x0800bbf4
	ldr	r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019b4:	200007b4 	.word	0x200007b4
	ldr	r2, =_sbss
 80019b8:	200007b4 	.word	0x200007b4
	ldr	r3, = _ebss
 80019bc:	200009fc 	.word	0x200009fc

080019c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC1_IRQHandler>

080019c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019cc:	2003      	movs	r0, #3
 80019ce:	f000 f943 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d2:	2000      	movs	r0, #0
 80019d4:	f000 f80e 	bl	80019f4 <HAL_InitTick>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	e001      	b.n	80019e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019e4:	f7ff fdc8 	bl	8001578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_InitTick+0x6c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d023      	beq.n	8001a50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_InitTick+0x70>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_InitTick+0x6c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f941 	bl	8001ca6 <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10f      	bne.n	8001a4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d809      	bhi.n	8001a44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f919 	bl	8001c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_InitTick+0x74>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e007      	b.n	8001a54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e004      	b.n	8001a54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e001      	b.n	8001a54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	200009e8 	.word	0x200009e8

08001a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	200009e8 	.word	0x200009e8

08001aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff ffee 	bl	8001a94 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000008 	.word	0x20000008

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b26:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff8e 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff47 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff5c 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff8e 	bl	8001bac <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5d 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffb0 	bl	8001c14 <SysTick_Config>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e054      	b.n	8001d7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7f5b      	ldrb	r3, [r3, #29]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d105      	bne.n	8001ce8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fc6c 	bl	80015c0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	791b      	ldrb	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10c      	bne.n	8001d10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a22      	ldr	r2, [pc, #136]	; (8001d84 <HAL_CRC_Init+0xc4>)
 8001cfc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0218 	bic.w	r2, r2, #24
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	e00c      	b.n	8001d2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6899      	ldr	r1, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f834 	bl	8001d88 <HAL_CRCEx_Polynomial_Set>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e028      	b.n	8001d7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	795b      	ldrb	r3, [r3, #5]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3a:	611a      	str	r2, [r3, #16]
 8001d3c:	e004      	b.n	8001d48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6912      	ldr	r2, [r2, #16]
 8001d46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	04c11db7 	.word	0x04c11db7

08001d88 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d98:	231f      	movs	r3, #31
 8001d9a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d9c:	bf00      	nop
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1e5a      	subs	r2, r3, #1
 8001da2:	613a      	str	r2, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d009      	beq.n	8001dbc <HAL_CRCEx_Polynomial_Set+0x34>
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_CRCEx_Polynomial_Set+0x16>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b18      	cmp	r3, #24
 8001dc0:	d846      	bhi.n	8001e50 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001dc2:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc8:	08001e57 	.word	0x08001e57
 8001dcc:	08001e51 	.word	0x08001e51
 8001dd0:	08001e51 	.word	0x08001e51
 8001dd4:	08001e51 	.word	0x08001e51
 8001dd8:	08001e51 	.word	0x08001e51
 8001ddc:	08001e51 	.word	0x08001e51
 8001de0:	08001e51 	.word	0x08001e51
 8001de4:	08001e51 	.word	0x08001e51
 8001de8:	08001e45 	.word	0x08001e45
 8001dec:	08001e51 	.word	0x08001e51
 8001df0:	08001e51 	.word	0x08001e51
 8001df4:	08001e51 	.word	0x08001e51
 8001df8:	08001e51 	.word	0x08001e51
 8001dfc:	08001e51 	.word	0x08001e51
 8001e00:	08001e51 	.word	0x08001e51
 8001e04:	08001e51 	.word	0x08001e51
 8001e08:	08001e39 	.word	0x08001e39
 8001e0c:	08001e51 	.word	0x08001e51
 8001e10:	08001e51 	.word	0x08001e51
 8001e14:	08001e51 	.word	0x08001e51
 8001e18:	08001e51 	.word	0x08001e51
 8001e1c:	08001e51 	.word	0x08001e51
 8001e20:	08001e51 	.word	0x08001e51
 8001e24:	08001e51 	.word	0x08001e51
 8001e28:	08001e2d 	.word	0x08001e2d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d913      	bls.n	8001e5a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e36:	e010      	b.n	8001e5a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	2b07      	cmp	r3, #7
 8001e3c:	d90f      	bls.n	8001e5e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e42:	e00c      	b.n	8001e5e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b0f      	cmp	r3, #15
 8001e48:	d90b      	bls.n	8001e62 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001e4e:	e008      	b.n	8001e62 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	75fb      	strb	r3, [r7, #23]
      break;
 8001e54:	e006      	b.n	8001e64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e56:	bf00      	nop
 8001e58:	e004      	b.n	8001e64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e5a:	bf00      	nop
 8001e5c:	e002      	b.n	8001e64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e5e:	bf00      	nop
 8001e60:	e000      	b.n	8001e64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001e62:	bf00      	nop
  }
  if (status == HAL_OK)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10d      	bne.n	8001e86 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f023 0118 	bic.w	r1, r3, #24
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	371c      	adds	r7, #28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea2:	e166      	b.n	8002172 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8158 	beq.w	800216c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d00b      	beq.n	8001edc <HAL_GPIO_Init+0x48>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d007      	beq.n	8001edc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed0:	2b11      	cmp	r3, #17
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b12      	cmp	r3, #18
 8001eda:	d130      	bne.n	8001f3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f12:	2201      	movs	r2, #1
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	f003 0201 	and.w	r2, r3, #1
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0xea>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d123      	bne.n	8001fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	08da      	lsrs	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3208      	adds	r2, #8
 8001f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	6939      	ldr	r1, [r7, #16]
 8001fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0203 	and.w	r2, r3, #3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80b2 	beq.w	800216c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002008:	4b61      	ldr	r3, [pc, #388]	; (8002190 <HAL_GPIO_Init+0x2fc>)
 800200a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200c:	4a60      	ldr	r2, [pc, #384]	; (8002190 <HAL_GPIO_Init+0x2fc>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6613      	str	r3, [r2, #96]	; 0x60
 8002014:	4b5e      	ldr	r3, [pc, #376]	; (8002190 <HAL_GPIO_Init+0x2fc>)
 8002016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002020:	4a5c      	ldr	r2, [pc, #368]	; (8002194 <HAL_GPIO_Init+0x300>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800204a:	d02b      	beq.n	80020a4 <HAL_GPIO_Init+0x210>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_GPIO_Init+0x304>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d025      	beq.n	80020a0 <HAL_GPIO_Init+0x20c>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a51      	ldr	r2, [pc, #324]	; (800219c <HAL_GPIO_Init+0x308>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d01f      	beq.n	800209c <HAL_GPIO_Init+0x208>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a50      	ldr	r2, [pc, #320]	; (80021a0 <HAL_GPIO_Init+0x30c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d019      	beq.n	8002098 <HAL_GPIO_Init+0x204>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a4f      	ldr	r2, [pc, #316]	; (80021a4 <HAL_GPIO_Init+0x310>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d013      	beq.n	8002094 <HAL_GPIO_Init+0x200>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a4e      	ldr	r2, [pc, #312]	; (80021a8 <HAL_GPIO_Init+0x314>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00d      	beq.n	8002090 <HAL_GPIO_Init+0x1fc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a4d      	ldr	r2, [pc, #308]	; (80021ac <HAL_GPIO_Init+0x318>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d007      	beq.n	800208c <HAL_GPIO_Init+0x1f8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a4c      	ldr	r2, [pc, #304]	; (80021b0 <HAL_GPIO_Init+0x31c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_GPIO_Init+0x1f4>
 8002084:	2307      	movs	r3, #7
 8002086:	e00e      	b.n	80020a6 <HAL_GPIO_Init+0x212>
 8002088:	2308      	movs	r3, #8
 800208a:	e00c      	b.n	80020a6 <HAL_GPIO_Init+0x212>
 800208c:	2306      	movs	r3, #6
 800208e:	e00a      	b.n	80020a6 <HAL_GPIO_Init+0x212>
 8002090:	2305      	movs	r3, #5
 8002092:	e008      	b.n	80020a6 <HAL_GPIO_Init+0x212>
 8002094:	2304      	movs	r3, #4
 8002096:	e006      	b.n	80020a6 <HAL_GPIO_Init+0x212>
 8002098:	2303      	movs	r3, #3
 800209a:	e004      	b.n	80020a6 <HAL_GPIO_Init+0x212>
 800209c:	2302      	movs	r3, #2
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0x212>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_GPIO_Init+0x212>
 80020a4:	2300      	movs	r3, #0
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	f002 0203 	and.w	r2, r2, #3
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	4093      	lsls	r3, r2
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020b6:	4937      	ldr	r1, [pc, #220]	; (8002194 <HAL_GPIO_Init+0x300>)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020c4:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_GPIO_Init+0x320>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020e8:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <HAL_GPIO_Init+0x320>)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80020ee:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_GPIO_Init+0x320>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002112:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <HAL_GPIO_Init+0x320>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002118:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <HAL_GPIO_Init+0x320>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <HAL_GPIO_Init+0x320>)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_GPIO_Init+0x320>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002166:	4a13      	ldr	r2, [pc, #76]	; (80021b4 <HAL_GPIO_Init+0x320>)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3301      	adds	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	f47f ae91 	bne.w	8001ea4 <HAL_GPIO_Init+0x10>
  }
}
 8002182:	bf00      	nop
 8002184:	bf00      	nop
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40021000 	.word	0x40021000
 8002194:	40010000 	.word	0x40010000
 8002198:	48000400 	.word	0x48000400
 800219c:	48000800 	.word	0x48000800
 80021a0:	48000c00 	.word	0x48000c00
 80021a4:	48001000 	.word	0x48001000
 80021a8:	48001400 	.word	0x48001400
 80021ac:	48001800 	.word	0x48001800
 80021b0:	48001c00 	.word	0x48001c00
 80021b4:	40010400 	.word	0x40010400

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4013      	ands	r3, r2
 8002200:	041a      	lsls	r2, r3, #16
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43d9      	mvns	r1, r3
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	400b      	ands	r3, r1
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222c:	d102      	bne.n	8002234 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800222e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002232:	e00b      	b.n	800224c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002242:	d102      	bne.n	800224a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002248:	e000      	b.n	800224c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800224a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000

0800225c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d141      	bne.n	80022ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800226a:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002276:	d131      	bne.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002278:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800227e:	4a46      	ldr	r2, [pc, #280]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002284:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002288:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002290:	4a41      	ldr	r2, [pc, #260]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002296:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002298:	4b40      	ldr	r3, [pc, #256]	; (800239c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2232      	movs	r2, #50	; 0x32
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	4a3f      	ldr	r2, [pc, #252]	; (80023a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	0c9b      	lsrs	r3, r3, #18
 80022aa:	3301      	adds	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ae:	e002      	b.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b6:	4b38      	ldr	r3, [pc, #224]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c2:	d102      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f2      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022ca:	4b33      	ldr	r3, [pc, #204]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d6:	d158      	bne.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e057      	b.n	800238c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022e2:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022ec:	e04d      	b.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022f4:	d141      	bne.n	800237a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022f6:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002302:	d131      	bne.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800230a:	4a23      	ldr	r2, [pc, #140]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002310:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800231c:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2232      	movs	r2, #50	; 0x32
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	0c9b      	lsrs	r3, r3, #18
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800233a:	e002      	b.n	8002342 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3b01      	subs	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234e:	d102      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f2      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002362:	d112      	bne.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e011      	b.n	800238c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002378:	e007      	b.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002388:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40007000 	.word	0x40007000
 800239c:	20000000 	.word	0x20000000
 80023a0:	431bde83 	.word	0x431bde83

080023a4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b2:	6053      	str	r3, [r2, #4]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40007000 	.word	0x40007000

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	f000 bc16 	b.w	8002c04 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d8:	4ba0      	ldr	r3, [pc, #640]	; (800265c <HAL_RCC_OscConfig+0x298>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e2:	4b9e      	ldr	r3, [pc, #632]	; (800265c <HAL_RCC_OscConfig+0x298>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80e4 	beq.w	80025c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_RCC_OscConfig+0x4c>
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b0c      	cmp	r3, #12
 8002404:	f040 808b 	bne.w	800251e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b01      	cmp	r3, #1
 800240c:	f040 8087 	bne.w	800251e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002410:	4b92      	ldr	r3, [pc, #584]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_OscConfig+0x64>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e3ed      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1a      	ldr	r2, [r3, #32]
 800242c:	4b8b      	ldr	r3, [pc, #556]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d004      	beq.n	8002442 <HAL_RCC_OscConfig+0x7e>
 8002438:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002440:	e005      	b.n	800244e <HAL_RCC_OscConfig+0x8a>
 8002442:	4b86      	ldr	r3, [pc, #536]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244e:	4293      	cmp	r3, r2
 8002450:	d223      	bcs.n	800249a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fdca 	bl	8002ff0 <RCC_SetFlashLatencyFromMSIRange>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e3ce      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002466:	4b7d      	ldr	r3, [pc, #500]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a7c      	ldr	r2, [pc, #496]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800246c:	f043 0308 	orr.w	r3, r3, #8
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b7a      	ldr	r3, [pc, #488]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4977      	ldr	r1, [pc, #476]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002484:	4b75      	ldr	r3, [pc, #468]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	4972      	ldr	r1, [pc, #456]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
 8002498:	e025      	b.n	80024e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249a:	4b70      	ldr	r3, [pc, #448]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6f      	ldr	r2, [pc, #444]	; (800265c <HAL_RCC_OscConfig+0x298>)
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b6d      	ldr	r3, [pc, #436]	; (800265c <HAL_RCC_OscConfig+0x298>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	496a      	ldr	r1, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x298>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b8:	4b68      	ldr	r3, [pc, #416]	; (800265c <HAL_RCC_OscConfig+0x298>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	4965      	ldr	r1, [pc, #404]	; (800265c <HAL_RCC_OscConfig+0x298>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fd8a 	bl	8002ff0 <RCC_SetFlashLatencyFromMSIRange>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e38e      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e6:	f000 fcbf 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x298>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	495a      	ldr	r1, [pc, #360]	; (8002660 <HAL_RCC_OscConfig+0x29c>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_RCC_OscConfig+0x2a0>)
 8002504:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002506:	4b58      	ldr	r3, [pc, #352]	; (8002668 <HAL_RCC_OscConfig+0x2a4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fa72 	bl	80019f4 <HAL_InitTick>
 8002510:	4603      	mov	r3, r0
 8002512:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d052      	beq.n	80025c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	e372      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d032      	beq.n	800258c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002526:	4b4d      	ldr	r3, [pc, #308]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002532:	f7ff faaf 	bl	8001a94 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800253a:	f7ff faab 	bl	8001a94 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e35b      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800254c:	4b43      	ldr	r3, [pc, #268]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002558:	4b40      	ldr	r3, [pc, #256]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a3f      	ldr	r2, [pc, #252]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800255e:	f043 0308 	orr.w	r3, r3, #8
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	493a      	ldr	r1, [pc, #232]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	4935      	ldr	r1, [pc, #212]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
 800258a:	e01a      	b.n	80025c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800258c:	4b33      	ldr	r3, [pc, #204]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a32      	ldr	r2, [pc, #200]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002592:	f023 0301 	bic.w	r3, r3, #1
 8002596:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002598:	f7ff fa7c 	bl	8001a94 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025a0:	f7ff fa78 	bl	8001a94 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e328      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025b2:	4b2a      	ldr	r3, [pc, #168]	; (800265c <HAL_RCC_OscConfig+0x298>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x1dc>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d073      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_OscConfig+0x21c>
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d10e      	bne.n	80025f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d10b      	bne.n	80025f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	4b1e      	ldr	r3, [pc, #120]	; (800265c <HAL_RCC_OscConfig+0x298>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d063      	beq.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d15f      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e305      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x24c>
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a15      	ldr	r2, [pc, #84]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e01d      	b.n	800264c <HAL_RCC_OscConfig+0x288>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x270>
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a0f      	ldr	r2, [pc, #60]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a0c      	ldr	r2, [pc, #48]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0x288>
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a08      	ldr	r2, [pc, #32]	; (800265c <HAL_RCC_OscConfig+0x298>)
 800263a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a05      	ldr	r2, [pc, #20]	; (800265c <HAL_RCC_OscConfig+0x298>)
 8002646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01b      	beq.n	800268c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7ff fa1e 	bl	8001a94 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265a:	e010      	b.n	800267e <HAL_RCC_OscConfig+0x2ba>
 800265c:	40021000 	.word	0x40021000
 8002660:	08008d38 	.word	0x08008d38
 8002664:	20000000 	.word	0x20000000
 8002668:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800266c:	f7ff fa12 	bl	8001a94 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e2c2      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267e:	4baf      	ldr	r3, [pc, #700]	; (800293c <HAL_RCC_OscConfig+0x578>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x2a8>
 800268a:	e014      	b.n	80026b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7ff fa02 	bl	8001a94 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002694:	f7ff f9fe 	bl	8001a94 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e2ae      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a6:	4ba5      	ldr	r3, [pc, #660]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x2d0>
 80026b2:	e000      	b.n	80026b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d060      	beq.n	8002784 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_OscConfig+0x310>
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d119      	bne.n	8002702 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d116      	bne.n	8002702 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d4:	4b99      	ldr	r3, [pc, #612]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_OscConfig+0x328>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e28b      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b93      	ldr	r3, [pc, #588]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	061b      	lsls	r3, r3, #24
 80026fa:	4990      	ldr	r1, [pc, #576]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002700:	e040      	b.n	8002784 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d023      	beq.n	8002752 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270a:	4b8c      	ldr	r3, [pc, #560]	; (800293c <HAL_RCC_OscConfig+0x578>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a8b      	ldr	r2, [pc, #556]	; (800293c <HAL_RCC_OscConfig+0x578>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7ff f9bd 	bl	8001a94 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271e:	f7ff f9b9 	bl	8001a94 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e269      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002730:	4b82      	ldr	r3, [pc, #520]	; (800293c <HAL_RCC_OscConfig+0x578>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b7f      	ldr	r3, [pc, #508]	; (800293c <HAL_RCC_OscConfig+0x578>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	497c      	ldr	r1, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x578>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
 8002750:	e018      	b.n	8002784 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002752:	4b7a      	ldr	r3, [pc, #488]	; (800293c <HAL_RCC_OscConfig+0x578>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a79      	ldr	r2, [pc, #484]	; (800293c <HAL_RCC_OscConfig+0x578>)
 8002758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800275c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7ff f999 	bl	8001a94 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002766:	f7ff f995 	bl	8001a94 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e245      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002778:	4b70      	ldr	r3, [pc, #448]	; (800293c <HAL_RCC_OscConfig+0x578>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d03c      	beq.n	800280a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01c      	beq.n	80027d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002798:	4b68      	ldr	r3, [pc, #416]	; (800293c <HAL_RCC_OscConfig+0x578>)
 800279a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279e:	4a67      	ldr	r2, [pc, #412]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7ff f974 	bl	8001a94 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7ff f970 	bl	8001a94 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e220      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027c2:	4b5e      	ldr	r3, [pc, #376]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80027c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ef      	beq.n	80027b0 <HAL_RCC_OscConfig+0x3ec>
 80027d0:	e01b      	b.n	800280a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d2:	4b5a      	ldr	r3, [pc, #360]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80027d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d8:	4a58      	ldr	r2, [pc, #352]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7ff f957 	bl	8001a94 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ea:	f7ff f953 	bl	8001a94 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e203      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027fc:	4b4f      	ldr	r3, [pc, #316]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80027fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ef      	bne.n	80027ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80a6 	beq.w	8002964 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800281c:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_RCC_OscConfig+0x578>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10d      	bne.n	8002844 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002828:	4b44      	ldr	r3, [pc, #272]	; (800293c <HAL_RCC_OscConfig+0x578>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	4a43      	ldr	r2, [pc, #268]	; (800293c <HAL_RCC_OscConfig+0x578>)
 800282e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002832:	6593      	str	r3, [r2, #88]	; 0x58
 8002834:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_RCC_OscConfig+0x578>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002840:	2301      	movs	r3, #1
 8002842:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002844:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <HAL_RCC_OscConfig+0x57c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	d118      	bne.n	8002882 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002850:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <HAL_RCC_OscConfig+0x57c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a3a      	ldr	r2, [pc, #232]	; (8002940 <HAL_RCC_OscConfig+0x57c>)
 8002856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285c:	f7ff f91a 	bl	8001a94 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002864:	f7ff f916 	bl	8001a94 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e1c6      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002876:	4b32      	ldr	r3, [pc, #200]	; (8002940 <HAL_RCC_OscConfig+0x57c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d108      	bne.n	800289c <HAL_RCC_OscConfig+0x4d8>
 800288a:	4b2c      	ldr	r3, [pc, #176]	; (800293c <HAL_RCC_OscConfig+0x578>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	4a2a      	ldr	r2, [pc, #168]	; (800293c <HAL_RCC_OscConfig+0x578>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800289a:	e024      	b.n	80028e6 <HAL_RCC_OscConfig+0x522>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d110      	bne.n	80028c6 <HAL_RCC_OscConfig+0x502>
 80028a4:	4b25      	ldr	r3, [pc, #148]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	4a24      	ldr	r2, [pc, #144]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80028ac:	f043 0304 	orr.w	r3, r3, #4
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b4:	4b21      	ldr	r3, [pc, #132]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	4a20      	ldr	r2, [pc, #128]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028c4:	e00f      	b.n	80028e6 <HAL_RCC_OscConfig+0x522>
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028d6:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	4a17      	ldr	r2, [pc, #92]	; (800293c <HAL_RCC_OscConfig+0x578>)
 80028de:	f023 0304 	bic.w	r3, r3, #4
 80028e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ee:	f7ff f8d1 	bl	8001a94 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f4:	e00a      	b.n	800290c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f6:	f7ff f8cd 	bl	8001a94 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	; 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e17b      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_OscConfig+0x578>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0ed      	beq.n	80028f6 <HAL_RCC_OscConfig+0x532>
 800291a:	e01a      	b.n	8002952 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7ff f8ba 	bl	8001a94 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002922:	e00f      	b.n	8002944 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7ff f8b6 	bl	8001a94 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d906      	bls.n	8002944 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e164      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002944:	4ba8      	ldr	r3, [pc, #672]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e8      	bne.n	8002924 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002952:	7ffb      	ldrb	r3, [r7, #31]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002958:	4ba3      	ldr	r3, [pc, #652]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	4aa2      	ldr	r2, [pc, #648]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 800295e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002962:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d03c      	beq.n	80029ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002978:	4b9b      	ldr	r3, [pc, #620]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 800297a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800297e:	4a9a      	ldr	r2, [pc, #616]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7ff f884 	bl	8001a94 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002990:	f7ff f880 	bl	8001a94 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e130      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029a2:	4b91      	ldr	r3, [pc, #580]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 80029a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ef      	beq.n	8002990 <HAL_RCC_OscConfig+0x5cc>
 80029b0:	e01b      	b.n	80029ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029b2:	4b8d      	ldr	r3, [pc, #564]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 80029b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029b8:	4a8b      	ldr	r2, [pc, #556]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7ff f867 	bl	8001a94 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ca:	f7ff f863 	bl	8001a94 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e113      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029dc:	4b82      	ldr	r3, [pc, #520]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 80029de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ef      	bne.n	80029ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8107 	beq.w	8002c02 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	f040 80cb 	bne.w	8002b94 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029fe:	4b7a      	ldr	r3, [pc, #488]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f003 0203 	and.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d12c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d123      	bne.n	8002a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d11b      	bne.n	8002a6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d113      	bne.n	8002a6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	3b01      	subs	r3, #1
 8002a52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d109      	bne.n	8002a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	3b01      	subs	r3, #1
 8002a66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d06d      	beq.n	8002b48 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d068      	beq.n	8002b44 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a72:	4b5d      	ldr	r3, [pc, #372]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a7e:	4b5a      	ldr	r3, [pc, #360]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0ba      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b56      	ldr	r3, [pc, #344]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a55      	ldr	r2, [pc, #340]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a9a:	f7fe fffb 	bl	8001a94 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe fff7 	bl	8001a94 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0a7      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab4:	4b4c      	ldr	r3, [pc, #304]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac0:	4b49      	ldr	r3, [pc, #292]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	4b49      	ldr	r3, [pc, #292]	; (8002bec <HAL_RCC_OscConfig+0x828>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	4311      	orrs	r1, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ada:	0212      	lsls	r2, r2, #8
 8002adc:	4311      	orrs	r1, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ae2:	0852      	lsrs	r2, r2, #1
 8002ae4:	3a01      	subs	r2, #1
 8002ae6:	0552      	lsls	r2, r2, #21
 8002ae8:	4311      	orrs	r1, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aee:	0852      	lsrs	r2, r2, #1
 8002af0:	3a01      	subs	r2, #1
 8002af2:	0652      	lsls	r2, r2, #25
 8002af4:	4311      	orrs	r1, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002afa:	06d2      	lsls	r2, r2, #27
 8002afc:	430a      	orrs	r2, r1
 8002afe:	493a      	ldr	r1, [pc, #232]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b04:	4b38      	ldr	r3, [pc, #224]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a37      	ldr	r2, [pc, #220]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b10:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b1c:	f7fe ffba 	bl	8001a94 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe ffb6 	bl	8001a94 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e066      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b36:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b42:	e05e      	b.n	8002c02 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e05d      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d156      	bne.n	8002c02 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b54:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a23      	ldr	r2, [pc, #140]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b6c:	f7fe ff92 	bl	8001a94 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe ff8e 	bl	8001a94 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e03e      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x7b0>
 8002b92:	e036      	b.n	8002c02 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d031      	beq.n	8002bfe <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	4a0c      	ldr	r2, [pc, #48]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002bb8:	f023 0303 	bic.w	r3, r3, #3
 8002bbc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <HAL_RCC_OscConfig+0x824>)
 8002bc4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bcc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bce:	f7fe ff61 	bl	8001a94 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd4:	e00c      	b.n	8002bf0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe ff5d 	bl	8001a94 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d905      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e00d      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
 8002be8:	40021000 	.word	0x40021000
 8002bec:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCC_OscConfig+0x848>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ec      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x812>
 8002bfc:	e001      	b.n	8002c02 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000

08002c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e10f      	b.n	8002e48 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b89      	ldr	r3, [pc, #548]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d910      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b86      	ldr	r3, [pc, #536]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 020f 	bic.w	r2, r3, #15
 8002c3e:	4984      	ldr	r1, [pc, #528]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b82      	ldr	r3, [pc, #520]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0f7      	b.n	8002e48 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8089 	beq.w	8002d78 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d133      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6e:	4b79      	ldr	r3, [pc, #484]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0e4      	b.n	8002e48 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c7e:	f000 fa11 	bl	80030a4 <RCC_GetSysClockFreqFromPLLSource>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4a74      	ldr	r2, [pc, #464]	; (8002e58 <HAL_RCC_ClockConfig+0x248>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d955      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c8a:	4b72      	ldr	r3, [pc, #456]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10a      	bne.n	8002cac <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c96:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c9e:	4a6d      	ldr	r2, [pc, #436]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e044      	b.n	8002d36 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d03e      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x126>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d13a      	bne.n	8002d36 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cc0:	4b64      	ldr	r3, [pc, #400]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cc8:	4a62      	ldr	r2, [pc, #392]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	e02f      	b.n	8002d36 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cde:	4b5d      	ldr	r3, [pc, #372]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d115      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0ac      	b.n	8002e48 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf6:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0a0      	b.n	8002e48 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d06:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e098      	b.n	8002e48 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d16:	f000 f8a7 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4a4e      	ldr	r2, [pc, #312]	; (8002e58 <HAL_RCC_ClockConfig+0x248>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d909      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d22:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2a:	4a4a      	ldr	r2, [pc, #296]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f023 0203 	bic.w	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4944      	ldr	r1, [pc, #272]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d48:	f7fe fea4 	bl	8001a94 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d50:	f7fe fea0 	bl	8001a94 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e070      	b.n	8002e48 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 020c 	and.w	r2, r3, #12
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d1eb      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d009      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d84:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4930      	ldr	r1, [pc, #192]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	608b      	str	r3, [r1, #8]
 8002d96:	e008      	b.n	8002daa <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b80      	cmp	r3, #128	; 0x80
 8002d9c:	d105      	bne.n	8002daa <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d9e:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	4a2c      	ldr	r2, [pc, #176]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002da8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002daa:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d210      	bcs.n	8002dda <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 020f 	bic.w	r2, r3, #15
 8002dc0:	4923      	ldr	r1, [pc, #140]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc8:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <HAL_RCC_ClockConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e036      	b.n	8002e48 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4918      	ldr	r1, [pc, #96]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4910      	ldr	r1, [pc, #64]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e18:	f000 f826 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_RCC_ClockConfig+0x244>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	490c      	ldr	r1, [pc, #48]	; (8002e5c <HAL_RCC_ClockConfig+0x24c>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
 8002e34:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <HAL_RCC_ClockConfig+0x250>)
 8002e36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_RCC_ClockConfig+0x254>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fdd9 	bl	80019f4 <HAL_InitTick>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	04c4b400 	.word	0x04c4b400
 8002e5c:	08008d38 	.word	0x08008d38
 8002e60:	20000000 	.word	0x20000000
 8002e64:	20000004 	.word	0x20000004

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e76:	4b3e      	ldr	r3, [pc, #248]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e80:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x34>
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d121      	bne.n	8002eda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d11e      	bne.n	8002eda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e9c:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ea8:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e005      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eb8:	4b2d      	ldr	r3, [pc, #180]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ec4:	4a2b      	ldr	r2, [pc, #172]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ecc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ee0:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	e004      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eec:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x114>)
 8002eee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d134      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d003      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0xa6>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d003      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0xac>
 8002f0c:	e005      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f10:	617b      	str	r3, [r7, #20]
      break;
 8002f12:	e005      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x114>)
 8002f16:	617b      	str	r3, [r7, #20]
      break;
 8002f18:	e002      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	617b      	str	r3, [r7, #20]
      break;
 8002f1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f20:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	fb02 f203 	mul.w	r2, r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	0e5b      	lsrs	r3, r3, #25
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	3301      	adds	r3, #1
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f60:	69bb      	ldr	r3, [r7, #24]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3724      	adds	r7, #36	; 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08008d50 	.word	0x08008d50
 8002f78:	00f42400 	.word	0x00f42400
 8002f7c:	007a1200 	.word	0x007a1200

08002f80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000000 	.word	0x20000000

08002f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f9c:	f7ff fff0 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4904      	ldr	r1, [pc, #16]	; (8002fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	08008d48 	.word	0x08008d48

08002fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fc8:	f7ff ffda 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	0adb      	lsrs	r3, r3, #11
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	4904      	ldr	r1, [pc, #16]	; (8002fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	08008d48 	.word	0x08008d48

08002ff0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ffc:	4b27      	ldr	r3, [pc, #156]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003008:	f7ff f908 	bl	800221c <HAL_PWREx_GetVoltageRange>
 800300c:	6178      	str	r0, [r7, #20]
 800300e:	e014      	b.n	800303a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003010:	4b22      	ldr	r3, [pc, #136]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	4a21      	ldr	r2, [pc, #132]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301a:	6593      	str	r3, [r2, #88]	; 0x58
 800301c:	4b1f      	ldr	r3, [pc, #124]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003028:	f7ff f8f8 	bl	800221c <HAL_PWREx_GetVoltageRange>
 800302c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800302e:	4b1b      	ldr	r3, [pc, #108]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003032:	4a1a      	ldr	r2, [pc, #104]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003038:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003040:	d10b      	bne.n	800305a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b80      	cmp	r3, #128	; 0x80
 8003046:	d913      	bls.n	8003070 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2ba0      	cmp	r3, #160	; 0xa0
 800304c:	d902      	bls.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800304e:	2302      	movs	r3, #2
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	e00d      	b.n	8003070 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003054:	2301      	movs	r3, #1
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	e00a      	b.n	8003070 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b7f      	cmp	r3, #127	; 0x7f
 800305e:	d902      	bls.n	8003066 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003060:	2302      	movs	r3, #2
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	e004      	b.n	8003070 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b70      	cmp	r3, #112	; 0x70
 800306a:	d101      	bne.n	8003070 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800306c:	2301      	movs	r3, #1
 800306e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f023 020f 	bic.w	r2, r3, #15
 8003078:	4909      	ldr	r1, [pc, #36]	; (80030a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	429a      	cmp	r2, r3
 800308c:	d001      	beq.n	8003092 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000
 80030a0:	40022000 	.word	0x40022000

080030a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80030ae:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d118      	bne.n	80030ec <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030ba:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e005      	b.n	80030e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030d6:	4b23      	ldr	r3, [pc, #140]	; (8003164 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	091b      	lsrs	r3, r3, #4
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030e2:	4a21      	ldr	r2, [pc, #132]	; (8003168 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d003      	beq.n	8003104 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d003      	beq.n	800310a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003102:	e005      	b.n	8003110 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003106:	613b      	str	r3, [r7, #16]
    break;
 8003108:	e005      	b.n	8003116 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800310c:	613b      	str	r3, [r7, #16]
    break;
 800310e:	e002      	b.n	8003116 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	613b      	str	r3, [r7, #16]
    break;
 8003114:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	3301      	adds	r3, #1
 8003122:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	fb02 f203 	mul.w	r2, r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	0e5b      	lsrs	r3, r3, #25
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	3301      	adds	r3, #1
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003156:	683b      	ldr	r3, [r7, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40021000 	.word	0x40021000
 8003168:	08008d50 	.word	0x08008d50
 800316c:	00f42400 	.word	0x00f42400
 8003170:	007a1200 	.word	0x007a1200

08003174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800317c:	2300      	movs	r3, #0
 800317e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003180:	2300      	movs	r3, #0
 8003182:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318c:	2b00      	cmp	r3, #0
 800318e:	d040      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d02a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003198:	2b80      	cmp	r3, #128	; 0x80
 800319a:	d825      	bhi.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800319c:	2b60      	cmp	r3, #96	; 0x60
 800319e:	d026      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d821      	bhi.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d006      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d81d      	bhi.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d009      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d010      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80031b4:	e018      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031b6:	4b89      	ldr	r3, [pc, #548]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	4a88      	ldr	r2, [pc, #544]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031c2:	e015      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fb02 	bl	80037d4 <RCCEx_PLLSAI1_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031d4:	e00c      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3320      	adds	r3, #32
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fbed 	bl	80039bc <RCCEx_PLLSAI2_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031e6:	e003      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	74fb      	strb	r3, [r7, #19]
      break;
 80031ec:	e000      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80031ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10b      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031f6:	4b79      	ldr	r3, [pc, #484]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003204:	4975      	ldr	r1, [pc, #468]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800320c:	e001      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d047      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d030      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322c:	d82a      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800322e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003232:	d02a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003238:	d824      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800323a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323e:	d008      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003244:	d81e      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800324a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324e:	d010      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003250:	e018      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003252:	4b62      	ldr	r3, [pc, #392]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4a61      	ldr	r2, [pc, #388]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800325e:	e015      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fab4 	bl	80037d4 <RCCEx_PLLSAI1_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003270:	e00c      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3320      	adds	r3, #32
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fb9f 	bl	80039bc <RCCEx_PLLSAI2_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003282:	e003      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	74fb      	strb	r3, [r7, #19]
      break;
 8003288:	e000      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800328a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10b      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003292:	4b52      	ldr	r3, [pc, #328]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	494e      	ldr	r1, [pc, #312]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80032a8:	e001      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032aa:	7cfb      	ldrb	r3, [r7, #19]
 80032ac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 809f 	beq.w	80033fa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032bc:	2300      	movs	r3, #0
 80032be:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032c0:	4b46      	ldr	r3, [pc, #280]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	4a40      	ldr	r2, [pc, #256]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6593      	str	r3, [r2, #88]	; 0x58
 80032e2:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f2:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032fe:	f7fe fbc9 	bl	8001a94 <HAL_GetTick>
 8003302:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003304:	e009      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fe fbc5 	bl	8001a94 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d902      	bls.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	74fb      	strb	r3, [r7, #19]
        break;
 8003318:	e005      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0ef      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d15b      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800332c:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003336:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01f      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	429a      	cmp	r2, r3
 8003348:	d019      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003354:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003356:	4b21      	ldr	r3, [pc, #132]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800335e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336c:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003376:	4a19      	ldr	r2, [pc, #100]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d016      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fe fb84 	bl	8001a94 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338e:	e00b      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe fb80 	bl	8001a94 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d902      	bls.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	74fb      	strb	r3, [r7, #19]
            break;
 80033a6:	e006      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ec      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10c      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033bc:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	4903      	ldr	r1, [pc, #12]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033d4:	e008      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	74bb      	strb	r3, [r7, #18]
 80033da:	e005      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e8:	7c7b      	ldrb	r3, [r7, #17]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d105      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4ba0      	ldr	r3, [pc, #640]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	4a9f      	ldr	r2, [pc, #636]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003406:	4b9a      	ldr	r3, [pc, #616]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f023 0203 	bic.w	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003414:	4996      	ldr	r1, [pc, #600]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003428:	4b91      	ldr	r3, [pc, #580]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f023 020c 	bic.w	r2, r3, #12
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	498e      	ldr	r1, [pc, #568]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800344a:	4b89      	ldr	r3, [pc, #548]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003458:	4985      	ldr	r1, [pc, #532]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800346c:	4b80      	ldr	r3, [pc, #512]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347a:	497d      	ldr	r1, [pc, #500]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800348e:	4b78      	ldr	r3, [pc, #480]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349c:	4974      	ldr	r1, [pc, #464]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034b0:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034be:	496c      	ldr	r1, [pc, #432]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e0:	4963      	ldr	r1, [pc, #396]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034f4:	4b5e      	ldr	r3, [pc, #376]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003502:	495b      	ldr	r1, [pc, #364]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003516:	4b56      	ldr	r3, [pc, #344]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	4952      	ldr	r1, [pc, #328]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003538:	4b4d      	ldr	r3, [pc, #308]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	494a      	ldr	r1, [pc, #296]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800355a:	4b45      	ldr	r3, [pc, #276]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	4941      	ldr	r1, [pc, #260]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800357c:	4b3c      	ldr	r3, [pc, #240]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358a:	4939      	ldr	r1, [pc, #228]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d028      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800359e:	4b34      	ldr	r3, [pc, #208]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ac:	4930      	ldr	r1, [pc, #192]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035bc:	d106      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035be:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4a2b      	ldr	r2, [pc, #172]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035c8:	60d3      	str	r3, [r2, #12]
 80035ca:	e011      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	2101      	movs	r1, #1
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 f8f9 	bl	80037d4 <RCCEx_PLLSAI1_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035e6:	7cfb      	ldrb	r3, [r7, #19]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d04d      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003604:	d108      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003608:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800360c:	4a18      	ldr	r2, [pc, #96]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800360e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003612:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003616:	e012      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003618:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800361e:	4a14      	ldr	r2, [pc, #80]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003624:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003636:	490e      	ldr	r1, [pc, #56]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003646:	d106      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a08      	ldr	r2, [pc, #32]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003652:	60d3      	str	r3, [r2, #12]
 8003654:	e020      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800365a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800365e:	d109      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a02      	ldr	r2, [pc, #8]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366a:	60d3      	str	r3, [r2, #12]
 800366c:	e014      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800367c:	d10c      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	2101      	movs	r1, #1
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f8a5 	bl	80037d4 <RCCEx_PLLSAI1_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800368e:	7cfb      	ldrb	r3, [r7, #19]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d028      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036a4:	4b4a      	ldr	r3, [pc, #296]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b2:	4947      	ldr	r1, [pc, #284]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c2:	d106      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c4:	4b42      	ldr	r3, [pc, #264]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a41      	ldr	r2, [pc, #260]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ce:	60d3      	str	r3, [r2, #12]
 80036d0:	e011      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036da:	d10c      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f876 	bl	80037d4 <RCCEx_PLLSAI1_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d01e      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003702:	4b33      	ldr	r3, [pc, #204]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003712:	492f      	ldr	r1, [pc, #188]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003720:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003724:	d10c      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3304      	adds	r3, #4
 800372a:	2102      	movs	r1, #2
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f851 	bl	80037d4 <RCCEx_PLLSAI1_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800374c:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800374e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003752:	f023 0204 	bic.w	r2, r3, #4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375c:	491c      	ldr	r1, [pc, #112]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00b      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003772:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003776:	f023 0218 	bic.w	r2, r3, #24
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003780:	4913      	ldr	r1, [pc, #76]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d017      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800379a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037a4:	490a      	ldr	r1, [pc, #40]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037b6:	d105      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000

080037d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037e2:	4b72      	ldr	r3, [pc, #456]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00e      	beq.n	800380c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ee:	4b6f      	ldr	r3, [pc, #444]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0203 	and.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d103      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
       ||
 8003802:	2b00      	cmp	r3, #0
 8003804:	d142      	bne.n	800388c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
 800380a:	e03f      	b.n	800388c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d018      	beq.n	8003846 <RCCEx_PLLSAI1_Config+0x72>
 8003814:	2b03      	cmp	r3, #3
 8003816:	d825      	bhi.n	8003864 <RCCEx_PLLSAI1_Config+0x90>
 8003818:	2b01      	cmp	r3, #1
 800381a:	d002      	beq.n	8003822 <RCCEx_PLLSAI1_Config+0x4e>
 800381c:	2b02      	cmp	r3, #2
 800381e:	d009      	beq.n	8003834 <RCCEx_PLLSAI1_Config+0x60>
 8003820:	e020      	b.n	8003864 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003822:	4b62      	ldr	r3, [pc, #392]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11d      	bne.n	800386a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003832:	e01a      	b.n	800386a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003834:	4b5d      	ldr	r3, [pc, #372]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d116      	bne.n	800386e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003844:	e013      	b.n	800386e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003846:	4b59      	ldr	r3, [pc, #356]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003852:	4b56      	ldr	r3, [pc, #344]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003862:	e006      	b.n	8003872 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      break;
 8003868:	e004      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003872:	bf00      	nop
    }

    if(status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d108      	bne.n	800388c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800387a:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4949      	ldr	r1, [pc, #292]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003888:	4313      	orrs	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f040 8086 	bne.w	80039a0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003894:	4b45      	ldr	r3, [pc, #276]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a44      	ldr	r2, [pc, #272]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800389a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800389e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a0:	f7fe f8f8 	bl	8001a94 <HAL_GetTick>
 80038a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038a6:	e009      	b.n	80038bc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a8:	f7fe f8f4 	bl	8001a94 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	73fb      	strb	r3, [r7, #15]
        break;
 80038ba:	e005      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038bc:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1ef      	bne.n	80038a8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d168      	bne.n	80039a0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d113      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d4:	4b35      	ldr	r3, [pc, #212]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	4b35      	ldr	r3, [pc, #212]	; (80039b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038da:	4013      	ands	r3, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	0211      	lsls	r1, r2, #8
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68d2      	ldr	r2, [r2, #12]
 80038e6:	06d2      	lsls	r2, r2, #27
 80038e8:	4311      	orrs	r1, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6852      	ldr	r2, [r2, #4]
 80038ee:	3a01      	subs	r2, #1
 80038f0:	0112      	lsls	r2, r2, #4
 80038f2:	430a      	orrs	r2, r1
 80038f4:	492d      	ldr	r1, [pc, #180]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	610b      	str	r3, [r1, #16]
 80038fa:	e02d      	b.n	8003958 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d115      	bne.n	800392e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003902:	4b2a      	ldr	r3, [pc, #168]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003908:	4013      	ands	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6892      	ldr	r2, [r2, #8]
 800390e:	0211      	lsls	r1, r2, #8
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6912      	ldr	r2, [r2, #16]
 8003914:	0852      	lsrs	r2, r2, #1
 8003916:	3a01      	subs	r2, #1
 8003918:	0552      	lsls	r2, r2, #21
 800391a:	4311      	orrs	r1, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6852      	ldr	r2, [r2, #4]
 8003920:	3a01      	subs	r2, #1
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	430a      	orrs	r2, r1
 8003926:	4921      	ldr	r1, [pc, #132]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	610b      	str	r3, [r1, #16]
 800392c:	e014      	b.n	8003958 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800392e:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003934:	4013      	ands	r3, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6892      	ldr	r2, [r2, #8]
 800393a:	0211      	lsls	r1, r2, #8
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6952      	ldr	r2, [r2, #20]
 8003940:	0852      	lsrs	r2, r2, #1
 8003942:	3a01      	subs	r2, #1
 8003944:	0652      	lsls	r2, r2, #25
 8003946:	4311      	orrs	r1, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6852      	ldr	r2, [r2, #4]
 800394c:	3a01      	subs	r2, #1
 800394e:	0112      	lsls	r2, r2, #4
 8003950:	430a      	orrs	r2, r1
 8003952:	4916      	ldr	r1, [pc, #88]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003954:	4313      	orrs	r3, r2
 8003956:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003958:	4b14      	ldr	r3, [pc, #80]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a13      	ldr	r2, [pc, #76]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800395e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003962:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fe f896 	bl	8001a94 <HAL_GetTick>
 8003968:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800396a:	e009      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800396c:	f7fe f892 	bl	8001a94 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d902      	bls.n	8003980 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	73fb      	strb	r3, [r7, #15]
          break;
 800397e:	e005      	b.n	800398c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ef      	beq.n	800396c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	4904      	ldr	r1, [pc, #16]	; (80039ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800399c:	4313      	orrs	r3, r2
 800399e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	07ff800f 	.word	0x07ff800f
 80039b4:	ff9f800f 	.word	0xff9f800f
 80039b8:	f9ff800f 	.word	0xf9ff800f

080039bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ca:	4b72      	ldr	r3, [pc, #456]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00e      	beq.n	80039f4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039d6:	4b6f      	ldr	r3, [pc, #444]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0203 	and.w	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d103      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
       ||
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d142      	bne.n	8003a74 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
 80039f2:	e03f      	b.n	8003a74 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d018      	beq.n	8003a2e <RCCEx_PLLSAI2_Config+0x72>
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d825      	bhi.n	8003a4c <RCCEx_PLLSAI2_Config+0x90>
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d002      	beq.n	8003a0a <RCCEx_PLLSAI2_Config+0x4e>
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d009      	beq.n	8003a1c <RCCEx_PLLSAI2_Config+0x60>
 8003a08:	e020      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a0a:	4b62      	ldr	r3, [pc, #392]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d11d      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1a:	e01a      	b.n	8003a52 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a1c:	4b5d      	ldr	r3, [pc, #372]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d116      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2c:	e013      	b.n	8003a56 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a2e:	4b59      	ldr	r3, [pc, #356]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a3a:	4b56      	ldr	r3, [pc, #344]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a4a:	e006      	b.n	8003a5a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e004      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a52:	bf00      	nop
 8003a54:	e002      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a56:	bf00      	nop
 8003a58:	e000      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003a5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d108      	bne.n	8003a74 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003a62:	4b4c      	ldr	r3, [pc, #304]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f023 0203 	bic.w	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4949      	ldr	r1, [pc, #292]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f040 8086 	bne.w	8003b88 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a7c:	4b45      	ldr	r3, [pc, #276]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a44      	ldr	r2, [pc, #272]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fe f804 	bl	8001a94 <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a8e:	e009      	b.n	8003aa4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a90:	f7fe f800 	bl	8001a94 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d902      	bls.n	8003aa4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa2:	e005      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa4:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ef      	bne.n	8003a90 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d168      	bne.n	8003b88 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d113      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003abc:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	4b35      	ldr	r3, [pc, #212]	; (8003b98 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	0211      	lsls	r1, r2, #8
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68d2      	ldr	r2, [r2, #12]
 8003ace:	06d2      	lsls	r2, r2, #27
 8003ad0:	4311      	orrs	r1, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6852      	ldr	r2, [r2, #4]
 8003ad6:	3a01      	subs	r2, #1
 8003ad8:	0112      	lsls	r2, r2, #4
 8003ada:	430a      	orrs	r2, r1
 8003adc:	492d      	ldr	r1, [pc, #180]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	614b      	str	r3, [r1, #20]
 8003ae2:	e02d      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d115      	bne.n	8003b16 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003aea:	4b2a      	ldr	r3, [pc, #168]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <RCCEx_PLLSAI2_Config+0x1e0>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6892      	ldr	r2, [r2, #8]
 8003af6:	0211      	lsls	r1, r2, #8
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6912      	ldr	r2, [r2, #16]
 8003afc:	0852      	lsrs	r2, r2, #1
 8003afe:	3a01      	subs	r2, #1
 8003b00:	0552      	lsls	r2, r2, #21
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6852      	ldr	r2, [r2, #4]
 8003b08:	3a01      	subs	r2, #1
 8003b0a:	0112      	lsls	r2, r2, #4
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	4921      	ldr	r1, [pc, #132]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	614b      	str	r3, [r1, #20]
 8003b14:	e014      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6892      	ldr	r2, [r2, #8]
 8003b22:	0211      	lsls	r1, r2, #8
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6952      	ldr	r2, [r2, #20]
 8003b28:	0852      	lsrs	r2, r2, #1
 8003b2a:	3a01      	subs	r2, #1
 8003b2c:	0652      	lsls	r2, r2, #25
 8003b2e:	4311      	orrs	r1, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6852      	ldr	r2, [r2, #4]
 8003b34:	3a01      	subs	r2, #1
 8003b36:	0112      	lsls	r2, r2, #4
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	4916      	ldr	r1, [pc, #88]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b40:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd ffa2 	bl	8001a94 <HAL_GetTick>
 8003b50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b52:	e009      	b.n	8003b68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b54:	f7fd ff9e 	bl	8001a94 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	73fb      	strb	r3, [r7, #15]
          break;
 8003b66:	e005      	b.n	8003b74 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ef      	beq.n	8003b54 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	4904      	ldr	r1, [pc, #16]	; (8003b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
 8003b98:	07ff800f 	.word	0x07ff800f
 8003b9c:	ff9f800f 	.word	0xff9f800f
 8003ba0:	f9ff800f 	.word	0xf9ff800f

08003ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e049      	b.n	8003c4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd fd18 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f000 f89e 	bl	8003d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d001      	beq.n	8003c6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e047      	b.n	8003cfc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <HAL_TIM_Base_Start+0xb4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01d      	beq.n	8003cba <HAL_TIM_Base_Start+0x66>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c86:	d018      	beq.n	8003cba <HAL_TIM_Base_Start+0x66>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1f      	ldr	r2, [pc, #124]	; (8003d0c <HAL_TIM_Base_Start+0xb8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_TIM_Base_Start+0x66>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <HAL_TIM_Base_Start+0xbc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_TIM_Base_Start+0x66>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_TIM_Base_Start+0xc0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_TIM_Base_Start+0x66>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <HAL_TIM_Base_Start+0xc4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_TIM_Base_Start+0x66>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <HAL_TIM_Base_Start+0xc8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d115      	bne.n	8003ce6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <HAL_TIM_Base_Start+0xcc>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b06      	cmp	r3, #6
 8003cca:	d015      	beq.n	8003cf8 <HAL_TIM_Base_Start+0xa4>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd2:	d011      	beq.n	8003cf8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce4:	e008      	b.n	8003cf8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e000      	b.n	8003cfa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40000400 	.word	0x40000400
 8003d10:	40000800 	.word	0x40000800
 8003d14:	40000c00 	.word	0x40000c00
 8003d18:	40013400 	.word	0x40013400
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	00010007 	.word	0x00010007

08003d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a40      	ldr	r2, [pc, #256]	; (8003e38 <TIM_Base_SetConfig+0x114>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d013      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d42:	d00f      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a3d      	ldr	r2, [pc, #244]	; (8003e3c <TIM_Base_SetConfig+0x118>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00b      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3c      	ldr	r2, [pc, #240]	; (8003e40 <TIM_Base_SetConfig+0x11c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a3b      	ldr	r2, [pc, #236]	; (8003e44 <TIM_Base_SetConfig+0x120>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d003      	beq.n	8003d64 <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a3a      	ldr	r2, [pc, #232]	; (8003e48 <TIM_Base_SetConfig+0x124>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d108      	bne.n	8003d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <TIM_Base_SetConfig+0x114>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01f      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d01b      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2c      	ldr	r2, [pc, #176]	; (8003e3c <TIM_Base_SetConfig+0x118>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d017      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2b      	ldr	r2, [pc, #172]	; (8003e40 <TIM_Base_SetConfig+0x11c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2a      	ldr	r2, [pc, #168]	; (8003e44 <TIM_Base_SetConfig+0x120>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00f      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a29      	ldr	r2, [pc, #164]	; (8003e48 <TIM_Base_SetConfig+0x124>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00b      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a28      	ldr	r2, [pc, #160]	; (8003e4c <TIM_Base_SetConfig+0x128>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <TIM_Base_SetConfig+0x12c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <TIM_Base_SetConfig+0x9a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <TIM_Base_SetConfig+0x130>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d108      	bne.n	8003dd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <TIM_Base_SetConfig+0x114>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00f      	beq.n	8003e1c <TIM_Base_SetConfig+0xf8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <TIM_Base_SetConfig+0x124>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00b      	beq.n	8003e1c <TIM_Base_SetConfig+0xf8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <TIM_Base_SetConfig+0x128>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d007      	beq.n	8003e1c <TIM_Base_SetConfig+0xf8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a10      	ldr	r2, [pc, #64]	; (8003e50 <TIM_Base_SetConfig+0x12c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_Base_SetConfig+0xf8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a0f      	ldr	r2, [pc, #60]	; (8003e54 <TIM_Base_SetConfig+0x130>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d103      	bne.n	8003e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	615a      	str	r2, [r3, #20]
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40012c00 	.word	0x40012c00
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800
 8003e44:	40000c00 	.word	0x40000c00
 8003e48:	40013400 	.word	0x40013400
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40014400 	.word	0x40014400
 8003e54:	40014800 	.word	0x40014800

08003e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e042      	b.n	8003ef0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7fd fbdf 	bl	8001640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2224      	movs	r2, #36	; 0x24
 8003e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f8c4 	bl	8004028 <UART_SetConfig>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e022      	b.n	8003ef0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fb82 	bl	80045bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fc09 	bl	8004700 <UART_CheckIdleState>
 8003eee:	4603      	mov	r3, r0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	; 0x28
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	f040 8084 	bne.w	800401c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_UART_Transmit+0x28>
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e07c      	b.n	800401e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_UART_Transmit+0x3a>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e075      	b.n	800401e <HAL_UART_Transmit+0x126>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2221      	movs	r2, #33	; 0x21
 8003f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f4a:	f7fd fda3 	bl	8001a94 <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	88fa      	ldrh	r2, [r7, #6]
 8003f5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f68:	d108      	bne.n	8003f7c <HAL_UART_Transmit+0x84>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	e003      	b.n	8003f84 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003f8c:	e02d      	b.n	8003fea <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2180      	movs	r1, #128	; 0x80
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fbfc 	bl	8004796 <UART_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e03a      	b.n	800401e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	881a      	ldrh	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fba:	b292      	uxth	r2, r2
 8003fbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	e008      	b.n	8003fd8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	b292      	uxth	r2, r2
 8003fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1cb      	bne.n	8003f8e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2140      	movs	r1, #64	; 0x40
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fbc8 	bl	8004796 <UART_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e006      	b.n	800401e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004028:	b5b0      	push	{r4, r5, r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4313      	orrs	r3, r2
 800404a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4bb1      	ldr	r3, [pc, #708]	; (8004318 <UART_SetConfig+0x2f0>)
 8004054:	4013      	ands	r3, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	69f9      	ldr	r1, [r7, #28]
 800405c:	430b      	orrs	r3, r1
 800405e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4aa6      	ldr	r2, [pc, #664]	; (800431c <UART_SetConfig+0x2f4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	4313      	orrs	r3, r2
 800408e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800409a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	69f9      	ldr	r1, [r7, #28]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	f023 010f 	bic.w	r1, r3, #15
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a97      	ldr	r2, [pc, #604]	; (8004320 <UART_SetConfig+0x2f8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d120      	bne.n	800410a <UART_SetConfig+0xe2>
 80040c8:	4b96      	ldr	r3, [pc, #600]	; (8004324 <UART_SetConfig+0x2fc>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d816      	bhi.n	8004104 <UART_SetConfig+0xdc>
 80040d6:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <UART_SetConfig+0xb4>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	080040ed 	.word	0x080040ed
 80040e0:	080040f9 	.word	0x080040f9
 80040e4:	080040f3 	.word	0x080040f3
 80040e8:	080040ff 	.word	0x080040ff
 80040ec:	2301      	movs	r3, #1
 80040ee:	76fb      	strb	r3, [r7, #27]
 80040f0:	e0e7      	b.n	80042c2 <UART_SetConfig+0x29a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	76fb      	strb	r3, [r7, #27]
 80040f6:	e0e4      	b.n	80042c2 <UART_SetConfig+0x29a>
 80040f8:	2304      	movs	r3, #4
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	e0e1      	b.n	80042c2 <UART_SetConfig+0x29a>
 80040fe:	2308      	movs	r3, #8
 8004100:	76fb      	strb	r3, [r7, #27]
 8004102:	e0de      	b.n	80042c2 <UART_SetConfig+0x29a>
 8004104:	2310      	movs	r3, #16
 8004106:	76fb      	strb	r3, [r7, #27]
 8004108:	e0db      	b.n	80042c2 <UART_SetConfig+0x29a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a86      	ldr	r2, [pc, #536]	; (8004328 <UART_SetConfig+0x300>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d132      	bne.n	800417a <UART_SetConfig+0x152>
 8004114:	4b83      	ldr	r3, [pc, #524]	; (8004324 <UART_SetConfig+0x2fc>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d828      	bhi.n	8004174 <UART_SetConfig+0x14c>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x100>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800415d 	.word	0x0800415d
 800412c:	08004175 	.word	0x08004175
 8004130:	08004175 	.word	0x08004175
 8004134:	08004175 	.word	0x08004175
 8004138:	08004169 	.word	0x08004169
 800413c:	08004175 	.word	0x08004175
 8004140:	08004175 	.word	0x08004175
 8004144:	08004175 	.word	0x08004175
 8004148:	08004163 	.word	0x08004163
 800414c:	08004175 	.word	0x08004175
 8004150:	08004175 	.word	0x08004175
 8004154:	08004175 	.word	0x08004175
 8004158:	0800416f 	.word	0x0800416f
 800415c:	2300      	movs	r3, #0
 800415e:	76fb      	strb	r3, [r7, #27]
 8004160:	e0af      	b.n	80042c2 <UART_SetConfig+0x29a>
 8004162:	2302      	movs	r3, #2
 8004164:	76fb      	strb	r3, [r7, #27]
 8004166:	e0ac      	b.n	80042c2 <UART_SetConfig+0x29a>
 8004168:	2304      	movs	r3, #4
 800416a:	76fb      	strb	r3, [r7, #27]
 800416c:	e0a9      	b.n	80042c2 <UART_SetConfig+0x29a>
 800416e:	2308      	movs	r3, #8
 8004170:	76fb      	strb	r3, [r7, #27]
 8004172:	e0a6      	b.n	80042c2 <UART_SetConfig+0x29a>
 8004174:	2310      	movs	r3, #16
 8004176:	76fb      	strb	r3, [r7, #27]
 8004178:	e0a3      	b.n	80042c2 <UART_SetConfig+0x29a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a6b      	ldr	r2, [pc, #428]	; (800432c <UART_SetConfig+0x304>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d120      	bne.n	80041c6 <UART_SetConfig+0x19e>
 8004184:	4b67      	ldr	r3, [pc, #412]	; (8004324 <UART_SetConfig+0x2fc>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800418e:	2b30      	cmp	r3, #48	; 0x30
 8004190:	d013      	beq.n	80041ba <UART_SetConfig+0x192>
 8004192:	2b30      	cmp	r3, #48	; 0x30
 8004194:	d814      	bhi.n	80041c0 <UART_SetConfig+0x198>
 8004196:	2b20      	cmp	r3, #32
 8004198:	d009      	beq.n	80041ae <UART_SetConfig+0x186>
 800419a:	2b20      	cmp	r3, #32
 800419c:	d810      	bhi.n	80041c0 <UART_SetConfig+0x198>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <UART_SetConfig+0x180>
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d006      	beq.n	80041b4 <UART_SetConfig+0x18c>
 80041a6:	e00b      	b.n	80041c0 <UART_SetConfig+0x198>
 80041a8:	2300      	movs	r3, #0
 80041aa:	76fb      	strb	r3, [r7, #27]
 80041ac:	e089      	b.n	80042c2 <UART_SetConfig+0x29a>
 80041ae:	2302      	movs	r3, #2
 80041b0:	76fb      	strb	r3, [r7, #27]
 80041b2:	e086      	b.n	80042c2 <UART_SetConfig+0x29a>
 80041b4:	2304      	movs	r3, #4
 80041b6:	76fb      	strb	r3, [r7, #27]
 80041b8:	e083      	b.n	80042c2 <UART_SetConfig+0x29a>
 80041ba:	2308      	movs	r3, #8
 80041bc:	76fb      	strb	r3, [r7, #27]
 80041be:	e080      	b.n	80042c2 <UART_SetConfig+0x29a>
 80041c0:	2310      	movs	r3, #16
 80041c2:	76fb      	strb	r3, [r7, #27]
 80041c4:	e07d      	b.n	80042c2 <UART_SetConfig+0x29a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a59      	ldr	r2, [pc, #356]	; (8004330 <UART_SetConfig+0x308>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d120      	bne.n	8004212 <UART_SetConfig+0x1ea>
 80041d0:	4b54      	ldr	r3, [pc, #336]	; (8004324 <UART_SetConfig+0x2fc>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041da:	2bc0      	cmp	r3, #192	; 0xc0
 80041dc:	d013      	beq.n	8004206 <UART_SetConfig+0x1de>
 80041de:	2bc0      	cmp	r3, #192	; 0xc0
 80041e0:	d814      	bhi.n	800420c <UART_SetConfig+0x1e4>
 80041e2:	2b80      	cmp	r3, #128	; 0x80
 80041e4:	d009      	beq.n	80041fa <UART_SetConfig+0x1d2>
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d810      	bhi.n	800420c <UART_SetConfig+0x1e4>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <UART_SetConfig+0x1cc>
 80041ee:	2b40      	cmp	r3, #64	; 0x40
 80041f0:	d006      	beq.n	8004200 <UART_SetConfig+0x1d8>
 80041f2:	e00b      	b.n	800420c <UART_SetConfig+0x1e4>
 80041f4:	2300      	movs	r3, #0
 80041f6:	76fb      	strb	r3, [r7, #27]
 80041f8:	e063      	b.n	80042c2 <UART_SetConfig+0x29a>
 80041fa:	2302      	movs	r3, #2
 80041fc:	76fb      	strb	r3, [r7, #27]
 80041fe:	e060      	b.n	80042c2 <UART_SetConfig+0x29a>
 8004200:	2304      	movs	r3, #4
 8004202:	76fb      	strb	r3, [r7, #27]
 8004204:	e05d      	b.n	80042c2 <UART_SetConfig+0x29a>
 8004206:	2308      	movs	r3, #8
 8004208:	76fb      	strb	r3, [r7, #27]
 800420a:	e05a      	b.n	80042c2 <UART_SetConfig+0x29a>
 800420c:	2310      	movs	r3, #16
 800420e:	76fb      	strb	r3, [r7, #27]
 8004210:	e057      	b.n	80042c2 <UART_SetConfig+0x29a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a47      	ldr	r2, [pc, #284]	; (8004334 <UART_SetConfig+0x30c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d125      	bne.n	8004268 <UART_SetConfig+0x240>
 800421c:	4b41      	ldr	r3, [pc, #260]	; (8004324 <UART_SetConfig+0x2fc>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800422a:	d017      	beq.n	800425c <UART_SetConfig+0x234>
 800422c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004230:	d817      	bhi.n	8004262 <UART_SetConfig+0x23a>
 8004232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004236:	d00b      	beq.n	8004250 <UART_SetConfig+0x228>
 8004238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423c:	d811      	bhi.n	8004262 <UART_SetConfig+0x23a>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <UART_SetConfig+0x222>
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d006      	beq.n	8004256 <UART_SetConfig+0x22e>
 8004248:	e00b      	b.n	8004262 <UART_SetConfig+0x23a>
 800424a:	2300      	movs	r3, #0
 800424c:	76fb      	strb	r3, [r7, #27]
 800424e:	e038      	b.n	80042c2 <UART_SetConfig+0x29a>
 8004250:	2302      	movs	r3, #2
 8004252:	76fb      	strb	r3, [r7, #27]
 8004254:	e035      	b.n	80042c2 <UART_SetConfig+0x29a>
 8004256:	2304      	movs	r3, #4
 8004258:	76fb      	strb	r3, [r7, #27]
 800425a:	e032      	b.n	80042c2 <UART_SetConfig+0x29a>
 800425c:	2308      	movs	r3, #8
 800425e:	76fb      	strb	r3, [r7, #27]
 8004260:	e02f      	b.n	80042c2 <UART_SetConfig+0x29a>
 8004262:	2310      	movs	r3, #16
 8004264:	76fb      	strb	r3, [r7, #27]
 8004266:	e02c      	b.n	80042c2 <UART_SetConfig+0x29a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2b      	ldr	r2, [pc, #172]	; (800431c <UART_SetConfig+0x2f4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d125      	bne.n	80042be <UART_SetConfig+0x296>
 8004272:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <UART_SetConfig+0x2fc>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800427c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004280:	d017      	beq.n	80042b2 <UART_SetConfig+0x28a>
 8004282:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004286:	d817      	bhi.n	80042b8 <UART_SetConfig+0x290>
 8004288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428c:	d00b      	beq.n	80042a6 <UART_SetConfig+0x27e>
 800428e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004292:	d811      	bhi.n	80042b8 <UART_SetConfig+0x290>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <UART_SetConfig+0x278>
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429c:	d006      	beq.n	80042ac <UART_SetConfig+0x284>
 800429e:	e00b      	b.n	80042b8 <UART_SetConfig+0x290>
 80042a0:	2300      	movs	r3, #0
 80042a2:	76fb      	strb	r3, [r7, #27]
 80042a4:	e00d      	b.n	80042c2 <UART_SetConfig+0x29a>
 80042a6:	2302      	movs	r3, #2
 80042a8:	76fb      	strb	r3, [r7, #27]
 80042aa:	e00a      	b.n	80042c2 <UART_SetConfig+0x29a>
 80042ac:	2304      	movs	r3, #4
 80042ae:	76fb      	strb	r3, [r7, #27]
 80042b0:	e007      	b.n	80042c2 <UART_SetConfig+0x29a>
 80042b2:	2308      	movs	r3, #8
 80042b4:	76fb      	strb	r3, [r7, #27]
 80042b6:	e004      	b.n	80042c2 <UART_SetConfig+0x29a>
 80042b8:	2310      	movs	r3, #16
 80042ba:	76fb      	strb	r3, [r7, #27]
 80042bc:	e001      	b.n	80042c2 <UART_SetConfig+0x29a>
 80042be:	2310      	movs	r3, #16
 80042c0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a15      	ldr	r2, [pc, #84]	; (800431c <UART_SetConfig+0x2f4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	f040 809f 	bne.w	800440c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042ce:	7efb      	ldrb	r3, [r7, #27]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d837      	bhi.n	8004344 <UART_SetConfig+0x31c>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0x2b4>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	08004301 	.word	0x08004301
 80042e0:	08004345 	.word	0x08004345
 80042e4:	08004309 	.word	0x08004309
 80042e8:	08004345 	.word	0x08004345
 80042ec:	0800430f 	.word	0x0800430f
 80042f0:	08004345 	.word	0x08004345
 80042f4:	08004345 	.word	0x08004345
 80042f8:	08004345 	.word	0x08004345
 80042fc:	0800433d 	.word	0x0800433d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004300:	f7fe fe4a 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 8004304:	6178      	str	r0, [r7, #20]
        break;
 8004306:	e022      	b.n	800434e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004308:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <UART_SetConfig+0x310>)
 800430a:	617b      	str	r3, [r7, #20]
        break;
 800430c:	e01f      	b.n	800434e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800430e:	f7fe fdab 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8004312:	6178      	str	r0, [r7, #20]
        break;
 8004314:	e01b      	b.n	800434e <UART_SetConfig+0x326>
 8004316:	bf00      	nop
 8004318:	cfff69f3 	.word	0xcfff69f3
 800431c:	40008000 	.word	0x40008000
 8004320:	40013800 	.word	0x40013800
 8004324:	40021000 	.word	0x40021000
 8004328:	40004400 	.word	0x40004400
 800432c:	40004800 	.word	0x40004800
 8004330:	40004c00 	.word	0x40004c00
 8004334:	40005000 	.word	0x40005000
 8004338:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004340:	617b      	str	r3, [r7, #20]
        break;
 8004342:	e004      	b.n	800434e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	76bb      	strb	r3, [r7, #26]
        break;
 800434c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 811b 	beq.w	800458c <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	4a96      	ldr	r2, [pc, #600]	; (80045b4 <UART_SetConfig+0x58c>)
 800435c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004360:	461a      	mov	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	fbb3 f3f2 	udiv	r3, r3, r2
 8004368:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	d305      	bcc.n	8004386 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d902      	bls.n	800438c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	76bb      	strb	r3, [r7, #26]
 800438a:	e0ff      	b.n	800458c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	4618      	mov	r0, r3
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	4a86      	ldr	r2, [pc, #536]	; (80045b4 <UART_SetConfig+0x58c>)
 800439a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800439e:	b29a      	uxth	r2, r3
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	f7fc fc18 	bl	8000bd8 <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	020b      	lsls	r3, r1, #8
 80043ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043be:	0202      	lsls	r2, r0, #8
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	6849      	ldr	r1, [r1, #4]
 80043c4:	0849      	lsrs	r1, r1, #1
 80043c6:	4608      	mov	r0, r1
 80043c8:	f04f 0100 	mov.w	r1, #0
 80043cc:	1814      	adds	r4, r2, r0
 80043ce:	eb43 0501 	adc.w	r5, r3, r1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	4620      	mov	r0, r4
 80043de:	4629      	mov	r1, r5
 80043e0:	f7fc fbfa 	bl	8000bd8 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f2:	d308      	bcc.n	8004406 <UART_SetConfig+0x3de>
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fa:	d204      	bcs.n	8004406 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	60da      	str	r2, [r3, #12]
 8004404:	e0c2      	b.n	800458c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	76bb      	strb	r3, [r7, #26]
 800440a:	e0bf      	b.n	800458c <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004414:	d165      	bne.n	80044e2 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8004416:	7efb      	ldrb	r3, [r7, #27]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d828      	bhi.n	800446e <UART_SetConfig+0x446>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <UART_SetConfig+0x3fc>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004449 	.word	0x08004449
 8004428:	08004451 	.word	0x08004451
 800442c:	08004459 	.word	0x08004459
 8004430:	0800446f 	.word	0x0800446f
 8004434:	0800445f 	.word	0x0800445f
 8004438:	0800446f 	.word	0x0800446f
 800443c:	0800446f 	.word	0x0800446f
 8004440:	0800446f 	.word	0x0800446f
 8004444:	08004467 	.word	0x08004467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7fe fda6 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 800444c:	6178      	str	r0, [r7, #20]
        break;
 800444e:	e013      	b.n	8004478 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004450:	f7fe fdb8 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 8004454:	6178      	str	r0, [r7, #20]
        break;
 8004456:	e00f      	b.n	8004478 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004458:	4b57      	ldr	r3, [pc, #348]	; (80045b8 <UART_SetConfig+0x590>)
 800445a:	617b      	str	r3, [r7, #20]
        break;
 800445c:	e00c      	b.n	8004478 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445e:	f7fe fd03 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8004462:	6178      	str	r0, [r7, #20]
        break;
 8004464:	e008      	b.n	8004478 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446a:	617b      	str	r3, [r7, #20]
        break;
 800446c:	e004      	b.n	8004478 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	76bb      	strb	r3, [r7, #26]
        break;
 8004476:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8086 	beq.w	800458c <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	4a4b      	ldr	r2, [pc, #300]	; (80045b4 <UART_SetConfig+0x58c>)
 8004486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800448a:	461a      	mov	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004492:	005a      	lsls	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	441a      	add	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b0f      	cmp	r3, #15
 80044ac:	d916      	bls.n	80044dc <UART_SetConfig+0x4b4>
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b4:	d212      	bcs.n	80044dc <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f023 030f 	bic.w	r3, r3, #15
 80044be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	89fb      	ldrh	r3, [r7, #14]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	89fa      	ldrh	r2, [r7, #14]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	e057      	b.n	800458c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	76bb      	strb	r3, [r7, #26]
 80044e0:	e054      	b.n	800458c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044e2:	7efb      	ldrb	r3, [r7, #27]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d828      	bhi.n	800453a <UART_SetConfig+0x512>
 80044e8:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <UART_SetConfig+0x4c8>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004515 	.word	0x08004515
 80044f4:	0800451d 	.word	0x0800451d
 80044f8:	08004525 	.word	0x08004525
 80044fc:	0800453b 	.word	0x0800453b
 8004500:	0800452b 	.word	0x0800452b
 8004504:	0800453b 	.word	0x0800453b
 8004508:	0800453b 	.word	0x0800453b
 800450c:	0800453b 	.word	0x0800453b
 8004510:	08004533 	.word	0x08004533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004514:	f7fe fd40 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 8004518:	6178      	str	r0, [r7, #20]
        break;
 800451a:	e013      	b.n	8004544 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800451c:	f7fe fd52 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 8004520:	6178      	str	r0, [r7, #20]
        break;
 8004522:	e00f      	b.n	8004544 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004524:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <UART_SetConfig+0x590>)
 8004526:	617b      	str	r3, [r7, #20]
        break;
 8004528:	e00c      	b.n	8004544 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452a:	f7fe fc9d 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 800452e:	6178      	str	r0, [r7, #20]
        break;
 8004530:	e008      	b.n	8004544 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004536:	617b      	str	r3, [r7, #20]
        break;
 8004538:	e004      	b.n	8004544 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	76bb      	strb	r3, [r7, #26]
        break;
 8004542:	bf00      	nop
    }

    if (pclk != 0U)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d020      	beq.n	800458c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <UART_SetConfig+0x58c>)
 8004550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004554:	461a      	mov	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	fbb3 f2f2 	udiv	r2, r3, r2
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	441a      	add	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	b29b      	uxth	r3, r3
 800456e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b0f      	cmp	r3, #15
 8004574:	d908      	bls.n	8004588 <UART_SetConfig+0x560>
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457c:	d204      	bcs.n	8004588 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	e001      	b.n	800458c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80045a8:	7ebb      	ldrb	r3, [r7, #26]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bdb0      	pop	{r4, r5, r7, pc}
 80045b2:	bf00      	nop
 80045b4:	08008d80 	.word	0x08008d80
 80045b8:	00f42400 	.word	0x00f42400

080045bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01a      	beq.n	80046d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ba:	d10a      	bne.n	80046d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	605a      	str	r2, [r3, #4]
  }
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af02      	add	r7, sp, #8
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004710:	f7fd f9c0 	bl	8001a94 <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b08      	cmp	r3, #8
 8004722:	d10e      	bne.n	8004742 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f82f 	bl	8004796 <UART_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e025      	b.n	800478e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b04      	cmp	r3, #4
 800474e:	d10e      	bne.n	800476e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f819 	bl	8004796 <UART_WaitOnFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e00f      	b.n	800478e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	4613      	mov	r3, r2
 80047a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a6:	e062      	b.n	800486e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d05e      	beq.n	800486e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b0:	f7fd f970 	bl	8001a94 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d302      	bcc.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d11d      	bne.n	8004802 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047d4:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e045      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02e      	beq.n	800486e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800481e:	d126      	bne.n	800486e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004828:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004838:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0201 	bic.w	r2, r2, #1
 8004848:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e00f      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4013      	ands	r3, r2
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	429a      	cmp	r2, r3
 800487c:	bf0c      	ite	eq
 800487e:	2301      	moveq	r3, #1
 8004880:	2300      	movne	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	79fb      	ldrb	r3, [r7, #7]
 8004888:	429a      	cmp	r2, r3
 800488a:	d08d      	beq.n	80047a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_UARTEx_DisableFifoMode+0x16>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e027      	b.n	80048fc <HAL_UARTEx_DisableFifoMode+0x66>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2224      	movs	r2, #36	; 0x24
 80048b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0201 	bic.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80048da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800491c:	2302      	movs	r3, #2
 800491e:	e02d      	b.n	800497c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	; 0x24
 800492c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f84f 	bl	8004a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004998:	2302      	movs	r3, #2
 800499a:	e02d      	b.n	80049f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2224      	movs	r2, #36	; 0x24
 80049a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f811 	bl	8004a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d108      	bne.n	8004a22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a20:	e031      	b.n	8004a86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a22:	2308      	movs	r3, #8
 8004a24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a26:	2308      	movs	r3, #8
 8004a28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	0e5b      	lsrs	r3, r3, #25
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	0f5b      	lsrs	r3, r3, #29
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a4a:	7bbb      	ldrb	r3, [r7, #14]
 8004a4c:	7b3a      	ldrb	r2, [r7, #12]
 8004a4e:	4911      	ldr	r1, [pc, #68]	; (8004a94 <UARTEx_SetNbDataToProcess+0x94>)
 8004a50:	5c8a      	ldrb	r2, [r1, r2]
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a56:	7b3a      	ldrb	r2, [r7, #12]
 8004a58:	490f      	ldr	r1, [pc, #60]	; (8004a98 <UARTEx_SetNbDataToProcess+0x98>)
 8004a5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	7b7a      	ldrb	r2, [r7, #13]
 8004a6c:	4909      	ldr	r1, [pc, #36]	; (8004a94 <UARTEx_SetNbDataToProcess+0x94>)
 8004a6e:	5c8a      	ldrb	r2, [r1, r2]
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a74:	7b7a      	ldrb	r2, [r7, #13]
 8004a76:	4908      	ldr	r1, [pc, #32]	; (8004a98 <UARTEx_SetNbDataToProcess+0x98>)
 8004a78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	08008d98 	.word	0x08008d98
 8004a98:	08008da0 	.word	0x08008da0

08004a9c <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_SINE_MODEL_ACTIVATIONS_ALIGNMENT));
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	3303      	adds	r3, #3
 8004aac:	f023 0303 	bic.w	r3, r3, #3
 8004ab0:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    serving_default_dense_input0_output_array.data = AI_PTR(NULL);
 8004ab2:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <sine_model_configure_activations+0x70>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	609a      	str	r2, [r3, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(NULL);
 8004ab8:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <sine_model_configure_activations+0x70>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 8004abe:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <sine_model_configure_activations+0x74>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 8004ac4:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <sine_model_configure_activations+0x74>)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <sine_model_configure_activations+0x78>)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 8004ad0:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <sine_model_configure_activations+0x78>)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 200);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	33c8      	adds	r3, #200	; 0xc8
 8004ada:	4a0f      	ldr	r2, [pc, #60]	; (8004b18 <sine_model_configure_activations+0x7c>)
 8004adc:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 200);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	33c8      	adds	r3, #200	; 0xc8
 8004ae2:	4a0d      	ldr	r2, [pc, #52]	; (8004b18 <sine_model_configure_activations+0x7c>)
 8004ae4:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 8004ae6:	4a0d      	ldr	r2, [pc, #52]	; (8004b1c <sine_model_configure_activations+0x80>)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 8004aec:	4a0b      	ldr	r2, [pc, #44]	; (8004b1c <sine_model_configure_activations+0x80>)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 8004af2:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <sine_model_configure_activations+0x84>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <sine_model_configure_activations+0x84>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8004afe:	2301      	movs	r3, #1
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	200000cc 	.word	0x200000cc
 8004b10:	200000dc 	.word	0x200000dc
 8004b14:	200000ec 	.word	0x200000ec
 8004b18:	200000fc 	.word	0x200000fc
 8004b1c:	2000010c 	.word	0x2000010c
 8004b20:	2000011c 	.word	0x2000011c

08004b24 <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b34:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <sine_model_configure_weights+0xe0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b3c:	4a31      	ldr	r2, [pc, #196]	; (8004c04 <sine_model_configure_weights+0xe0>)
 8004b3e:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 10800);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8004b46:	3330      	adds	r3, #48	; 0x30
 8004b48:	4a2e      	ldr	r2, [pc, #184]	; (8004c04 <sine_model_configure_weights+0xe0>)
 8004b4a:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 10800);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8004b52:	3330      	adds	r3, #48	; 0x30
 8004b54:	4a2b      	ldr	r2, [pc, #172]	; (8004c04 <sine_model_configure_weights+0xe0>)
 8004b56:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b58:	4b2b      	ldr	r3, [pc, #172]	; (8004c08 <sine_model_configure_weights+0xe4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b60:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <sine_model_configure_weights+0xe4>)
 8004b62:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 10600);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 5325 	add.w	r3, r3, #10560	; 0x2940
 8004b6a:	3328      	adds	r3, #40	; 0x28
 8004b6c:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <sine_model_configure_weights+0xe4>)
 8004b6e:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 10600);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f503 5325 	add.w	r3, r3, #10560	; 0x2940
 8004b76:	3328      	adds	r3, #40	; 0x28
 8004b78:	4a23      	ldr	r2, [pc, #140]	; (8004c08 <sine_model_configure_weights+0xe4>)
 8004b7a:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b7c:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <sine_model_configure_weights+0xe8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b84:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <sine_model_configure_weights+0xe8>)
 8004b86:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 10400);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004b8e:	3320      	adds	r3, #32
 8004b90:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <sine_model_configure_weights+0xe8>)
 8004b92:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 10400);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004b9a:	3320      	adds	r3, #32
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <sine_model_configure_weights+0xe8>)
 8004b9e:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ba0:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <sine_model_configure_weights+0xec>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <sine_model_configure_weights+0xec>)
 8004baa:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 400);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004bb2:	4a17      	ldr	r2, [pc, #92]	; (8004c10 <sine_model_configure_weights+0xec>)
 8004bb4:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 400);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004bbc:	4a14      	ldr	r2, [pc, #80]	; (8004c10 <sine_model_configure_weights+0xec>)
 8004bbe:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004bc0:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <sine_model_configure_weights+0xf0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bc8:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <sine_model_configure_weights+0xf0>)
 8004bca:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 200);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	33c8      	adds	r3, #200	; 0xc8
 8004bd0:	4a10      	ldr	r2, [pc, #64]	; (8004c14 <sine_model_configure_weights+0xf0>)
 8004bd2:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 200);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	33c8      	adds	r3, #200	; 0xc8
 8004bd8:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <sine_model_configure_weights+0xf0>)
 8004bda:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <sine_model_configure_weights+0xf4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004be4:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <sine_model_configure_weights+0xf4>)
 8004be6:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 8004be8:	4a0b      	ldr	r2, [pc, #44]	; (8004c18 <sine_model_configure_weights+0xf4>)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8004bee:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <sine_model_configure_weights+0xf4>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8004bf4:	2301      	movs	r3, #1
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	2000006c 	.word	0x2000006c
 8004c08:	2000007c 	.word	0x2000007c
 8004c0c:	2000008c 	.word	0x2000008c
 8004c10:	2000009c 	.word	0x2000009c
 8004c14:	200000ac 	.word	0x200000ac
 8004c18:	200000bc 	.word	0x200000bc

08004c1c <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004c26:	2300      	movs	r3, #0
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	2301      	movs	r3, #1
 8004c30:	4a04      	ldr	r2, [pc, #16]	; (8004c44 <ai_sine_model_create+0x28>)
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f881 	bl	8004d3c <ai_platform_network_create>
 8004c3a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	2000000c 	.word	0x2000000c

08004c48 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f8c9 	bl	8004dec <ai_platform_network_init>
 8004c5a:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <ai_sine_model_init+0x1e>
 8004c62:	2300      	movs	r3, #0
 8004c64:	e02b      	b.n	8004cbe <ai_sine_model_init+0x76>

  ai_bool ok = true;
 8004c66:	2301      	movs	r3, #1
 8004c68:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, &params->params);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff ff58 	bl	8004b24 <sine_model_configure_weights>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	7afb      	ldrb	r3, [r7, #11]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, &params->activations);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	3318      	adds	r3, #24
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f7ff ff05 	bl	8004a9c <sine_model_configure_activations>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	7afb      	ldrb	r3, [r7, #11]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bf14      	ite	ne
 8004c9e:	2301      	movne	r3, #1
 8004ca0:	2300      	moveq	r3, #0
 8004ca2:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f91f 	bl	8004ee8 <ai_platform_network_post_init>
 8004caa:	4603      	mov	r3, r0
 8004cac:	461a      	mov	r2, r3
 8004cae:	7afb      	ldrb	r3, [r7, #11]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bf14      	ite	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	2300      	moveq	r3, #0
 8004cba:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004cbc:	7afb      	ldrb	r3, [r7, #11]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f94e 	bl	8004f78 <ai_platform_network_process>
 8004cdc:	4603      	mov	r3, r0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <ai_sine_model_data_weights_get>:
#include "sine_model_data.h"

ai_handle ai_sine_model_data_weights_get(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
    0x9b, 0x53, 0x3f, 0x04, 0x18, 0x37, 0x3e, 0x27, 0xb1,
    0x71, 0x3e, 0xcd, 0xd0, 0x05, 0xbf, 0x7a, 0xb3, 0xc3,
    0xbe, 0xf8, 0x2f, 0x0a, 0xbf, 0xcb, 0xf7, 0xe2, 0xbd
  };

  return AI_HANDLE_PTR(s_sine_model_weights);
 8004cec:	4b02      	ldr	r3, [pc, #8]	; (8004cf8 <ai_sine_model_data_weights_get+0x10>)

}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	08008dd0 	.word	0x08008dd0

08004cfc <_platform_network_state_setup.isra.1>:
 8004cfc:	b430      	push	{r4, r5}
 8004cfe:	68dd      	ldr	r5, [r3, #12]
 8004d00:	695c      	ldr	r4, [r3, #20]
 8004d02:	68ed      	ldr	r5, [r5, #12]
 8004d04:	68e4      	ldr	r4, [r4, #12]
 8004d06:	fb04 f405 	mul.w	r4, r4, r5
 8004d0a:	6084      	str	r4, [r0, #8]
 8004d0c:	8809      	ldrh	r1, [r1, #0]
 8004d0e:	fb04 f401 	mul.w	r4, r4, r1
 8004d12:	60c4      	str	r4, [r0, #12]
 8004d14:	6811      	ldr	r1, [r2, #0]
 8004d16:	6041      	str	r1, [r0, #4]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	4414      	add	r4, r2
 8004d1c:	6004      	str	r4, [r0, #0]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	6814      	ldr	r4, [r2, #0]
 8004d22:	00a4      	lsls	r4, r4, #2
 8004d24:	d407      	bmi.n	8004d36 <_platform_network_state_setup.isra.1+0x3a>
 8004d26:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8004d2a:	1b64      	subs	r4, r4, r5
 8004d2c:	4421      	add	r1, r4
 8004d2e:	6091      	str	r1, [r2, #8]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	6842      	ldr	r2, [r0, #4]
 8004d34:	60da      	str	r2, [r3, #12]
 8004d36:	bc30      	pop	{r4, r5}
 8004d38:	4770      	bx	lr
	...

08004d3c <ai_platform_network_create>:
 8004d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d40:	4e23      	ldr	r6, [pc, #140]	; (8004dd0 <ai_platform_network_create+0x94>)
 8004d42:	4924      	ldr	r1, [pc, #144]	; (8004dd4 <ai_platform_network_create+0x98>)
 8004d44:	6835      	ldr	r5, [r6, #0]
 8004d46:	b082      	sub	sp, #8
 8004d48:	f025 0501 	bic.w	r5, r5, #1
 8004d4c:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8004d50:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004d54:	6035      	str	r5, [r6, #0]
 8004d56:	2501      	movs	r5, #1
 8004d58:	600d      	str	r5, [r1, #0]
 8004d5a:	680d      	ldr	r5, [r1, #0]
 8004d5c:	2d00      	cmp	r5, #0
 8004d5e:	d1fc      	bne.n	8004d5a <ai_platform_network_create+0x1e>
 8004d60:	491d      	ldr	r1, [pc, #116]	; (8004dd8 <ai_platform_network_create+0x9c>)
 8004d62:	4e1e      	ldr	r6, [pc, #120]	; (8004ddc <ai_platform_network_create+0xa0>)
 8004d64:	600e      	str	r6, [r1, #0]
 8004d66:	680e      	ldr	r6, [r1, #0]
 8004d68:	491d      	ldr	r1, [pc, #116]	; (8004de0 <ai_platform_network_create+0xa4>)
 8004d6a:	428e      	cmp	r6, r1
 8004d6c:	d000      	beq.n	8004d70 <ai_platform_network_create+0x34>
 8004d6e:	e7fe      	b.n	8004d6e <ai_platform_network_create+0x32>
 8004d70:	b1d0      	cbz	r0, 8004da8 <ai_platform_network_create+0x6c>
 8004d72:	4698      	mov	r8, r3
 8004d74:	4613      	mov	r3, r2
 8004d76:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <ai_platform_network_create+0xa8>)
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	6003      	str	r3, [r0, #0]
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	f000 fb05 	bl	800538c <core_init>
 8004d82:	b1b0      	cbz	r0, 8004db2 <ai_platform_network_create+0x76>
 8004d84:	0223      	lsls	r3, r4, #8
 8004d86:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004d8a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8004d8e:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8004d92:	d910      	bls.n	8004db6 <ai_platform_network_create+0x7a>
 8004d94:	2201      	movs	r2, #1
 8004d96:	2300      	movs	r3, #0
 8004d98:	6033      	str	r3, [r6, #0]
 8004d9a:	2310      	movs	r3, #16
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f362 0007 	bfi	r0, r2, #0, #8
 8004da2:	f363 201f 	bfi	r0, r3, #8, #24
 8004da6:	e001      	b.n	8004dac <ai_platform_network_create+0x70>
 8004da8:	f241 0010 	movw	r0, #4112	; 0x1010
 8004dac:	b002      	add	sp, #8
 8004dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004db2:	2230      	movs	r2, #48	; 0x30
 8004db4:	e7ef      	b.n	8004d96 <ai_platform_network_create+0x5a>
 8004db6:	a802      	add	r0, sp, #8
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <ai_platform_network_create+0xac>)
 8004dba:	f840 3d04 	str.w	r3, [r0, #-4]!
 8004dbe:	f000 ffb3 	bl	8005d28 <ai_check_custom_types>
 8004dc2:	b110      	cbz	r0, 8004dca <ai_platform_network_create+0x8e>
 8004dc4:	462b      	mov	r3, r5
 8004dc6:	462a      	mov	r2, r5
 8004dc8:	e7e8      	b.n	8004d9c <ai_platform_network_create+0x60>
 8004dca:	2202      	movs	r2, #2
 8004dcc:	e7e3      	b.n	8004d96 <ai_platform_network_create+0x5a>
 8004dce:	bf00      	nop
 8004dd0:	e0002000 	.word	0xe0002000
 8004dd4:	40023008 	.word	0x40023008
 8004dd8:	40023000 	.word	0x40023000
 8004ddc:	f407a5c2 	.word	0xf407a5c2
 8004de0:	b5e8b5cd 	.word	0xb5e8b5cd
 8004de4:	a1c00100 	.word	0xa1c00100
 8004de8:	84048403 	.word	0x84048403

08004dec <ai_platform_network_init>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	460c      	mov	r4, r1
 8004df0:	4605      	mov	r5, r0
 8004df2:	b120      	cbz	r0, 8004dfe <ai_platform_network_init+0x12>
 8004df4:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <ai_platform_network_init+0xe4>)
 8004df6:	6802      	ldr	r2, [r0, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	bf18      	it	ne
 8004dfc:	2500      	movne	r5, #0
 8004dfe:	4935      	ldr	r1, [pc, #212]	; (8004ed4 <ai_platform_network_init+0xe8>)
 8004e00:	4a35      	ldr	r2, [pc, #212]	; (8004ed8 <ai_platform_network_init+0xec>)
 8004e02:	680b      	ldr	r3, [r1, #0]
 8004e04:	2001      	movs	r0, #1
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	600b      	str	r3, [r1, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	6010      	str	r0, [r2, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	2a00      	cmp	r2, #0
 8004e14:	d1fc      	bne.n	8004e10 <ai_platform_network_init+0x24>
 8004e16:	4b31      	ldr	r3, [pc, #196]	; (8004edc <ai_platform_network_init+0xf0>)
 8004e18:	4a31      	ldr	r2, [pc, #196]	; (8004ee0 <ai_platform_network_init+0xf4>)
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <ai_platform_network_init+0xf8>)
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d000      	beq.n	8004e26 <ai_platform_network_init+0x3a>
 8004e24:	e7fe      	b.n	8004e24 <ai_platform_network_init+0x38>
 8004e26:	b33d      	cbz	r5, 8004e78 <ai_platform_network_init+0x8c>
 8004e28:	b344      	cbz	r4, 8004e7c <ai_platform_network_init+0x90>
 8004e2a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004e2c:	6926      	ldr	r6, [r4, #16]
 8004e2e:	2f00      	cmp	r7, #0
 8004e30:	d03d      	beq.n	8004eae <ai_platform_network_init+0xc2>
 8004e32:	b35e      	cbz	r6, 8004e8c <ai_platform_network_init+0xa0>
 8004e34:	4627      	mov	r7, r4
 8004e36:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004e38:	f105 0618 	add.w	r6, r5, #24
 8004e3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004e3e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004e42:	e886 0003 	stmia.w	r6, {r0, r1}
 8004e46:	3418      	adds	r4, #24
 8004e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e4a:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8004e4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004e50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e54:	e886 0003 	stmia.w	r6, {r0, r1}
 8004e58:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	60eb      	str	r3, [r5, #12]
 8004e5e:	b15a      	cbz	r2, 8004e78 <ai_platform_network_init+0x8c>
 8004e60:	68d3      	ldr	r3, [r2, #12]
 8004e62:	6095      	str	r5, [r2, #8]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d007      	beq.n	8004e78 <ai_platform_network_init+0x8c>
 8004e68:	b133      	cbz	r3, 8004e78 <ai_platform_network_init+0x8c>
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	609d      	str	r5, [r3, #8]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d002      	beq.n	8004e78 <ai_platform_network_init+0x8c>
 8004e72:	4613      	mov	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f8      	bne.n	8004e6a <ai_platform_network_init+0x7e>
 8004e78:	4628      	mov	r0, r5
 8004e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7c:	f105 0010 	add.w	r0, r5, #16
 8004e80:	2211      	movs	r2, #17
 8004e82:	2110      	movs	r1, #16
 8004e84:	f000 fa84 	bl	8005390 <core_set_error>
 8004e88:	4625      	mov	r5, r4
 8004e8a:	e7f5      	b.n	8004e78 <ai_platform_network_init+0x8c>
 8004e8c:	8921      	ldrh	r1, [r4, #8]
 8004e8e:	88e2      	ldrh	r2, [r4, #6]
 8004e90:	68e3      	ldr	r3, [r4, #12]
 8004e92:	fb02 f201 	mul.w	r2, r2, r1
 8004e96:	fb03 f302 	mul.w	r3, r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0ca      	beq.n	8004e34 <ai_platform_network_init+0x48>
 8004e9e:	f105 0010 	add.w	r0, r5, #16
 8004ea2:	2212      	movs	r2, #18
 8004ea4:	2110      	movs	r1, #16
 8004ea6:	f000 fa73 	bl	8005390 <core_set_error>
 8004eaa:	4635      	mov	r5, r6
 8004eac:	e7e4      	b.n	8004e78 <ai_platform_network_init+0x8c>
 8004eae:	8c21      	ldrh	r1, [r4, #32]
 8004eb0:	8be2      	ldrh	r2, [r4, #30]
 8004eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb4:	fb02 f201 	mul.w	r2, r2, r1
 8004eb8:	fb03 f302 	mul.w	r3, r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0b8      	beq.n	8004e32 <ai_platform_network_init+0x46>
 8004ec0:	f105 0010 	add.w	r0, r5, #16
 8004ec4:	2213      	movs	r2, #19
 8004ec6:	2110      	movs	r1, #16
 8004ec8:	f000 fa62 	bl	8005390 <core_set_error>
 8004ecc:	463d      	mov	r5, r7
 8004ece:	e7d3      	b.n	8004e78 <ai_platform_network_init+0x8c>
 8004ed0:	a1c00100 	.word	0xa1c00100
 8004ed4:	e0002000 	.word	0xe0002000
 8004ed8:	40023008 	.word	0x40023008
 8004edc:	40023000 	.word	0x40023000
 8004ee0:	f407a5c2 	.word	0xf407a5c2
 8004ee4:	b5e8b5cd 	.word	0xb5e8b5cd

08004ee8 <ai_platform_network_post_init>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4604      	mov	r4, r0
 8004eec:	b120      	cbz	r0, 8004ef8 <ai_platform_network_post_init+0x10>
 8004eee:	4b1c      	ldr	r3, [pc, #112]	; (8004f60 <ai_platform_network_post_init+0x78>)
 8004ef0:	6802      	ldr	r2, [r0, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	bf18      	it	ne
 8004ef6:	2400      	movne	r4, #0
 8004ef8:	491a      	ldr	r1, [pc, #104]	; (8004f64 <ai_platform_network_post_init+0x7c>)
 8004efa:	4a1b      	ldr	r2, [pc, #108]	; (8004f68 <ai_platform_network_post_init+0x80>)
 8004efc:	680b      	ldr	r3, [r1, #0]
 8004efe:	2001      	movs	r0, #1
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	600b      	str	r3, [r1, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	6010      	str	r0, [r2, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	2a00      	cmp	r2, #0
 8004f0e:	d1fc      	bne.n	8004f0a <ai_platform_network_post_init+0x22>
 8004f10:	4b16      	ldr	r3, [pc, #88]	; (8004f6c <ai_platform_network_post_init+0x84>)
 8004f12:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <ai_platform_network_post_init+0x88>)
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4b16      	ldr	r3, [pc, #88]	; (8004f74 <ai_platform_network_post_init+0x8c>)
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d000      	beq.n	8004f20 <ai_platform_network_post_init+0x38>
 8004f1e:	e7fe      	b.n	8004f1e <ai_platform_network_post_init+0x36>
 8004f20:	b1a4      	cbz	r4, 8004f4c <ai_platform_network_post_init+0x64>
 8004f22:	68e3      	ldr	r3, [r4, #12]
 8004f24:	f013 0502 	ands.w	r5, r3, #2
 8004f28:	d012      	beq.n	8004f50 <ai_platform_network_post_init+0x68>
 8004f2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f2c:	b163      	cbz	r3, 8004f48 <ai_platform_network_post_init+0x60>
 8004f2e:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8004f30:	b91d      	cbnz	r5, 8004f3a <ai_platform_network_post_init+0x52>
 8004f32:	e009      	b.n	8004f48 <ai_platform_network_post_init+0x60>
 8004f34:	461d      	mov	r5, r3
 8004f36:	b13b      	cbz	r3, 8004f48 <ai_platform_network_post_init+0x60>
 8004f38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f3a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	2000      	movs	r0, #0
 8004f40:	4798      	blx	r3
 8004f42:	68eb      	ldr	r3, [r5, #12]
 8004f44:	42ab      	cmp	r3, r5
 8004f46:	d1f5      	bne.n	8004f34 <ai_platform_network_post_init+0x4c>
 8004f48:	2001      	movs	r0, #1
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	f104 0010 	add.w	r0, r4, #16
 8004f54:	2210      	movs	r2, #16
 8004f56:	2111      	movs	r1, #17
 8004f58:	f000 fa1a 	bl	8005390 <core_set_error>
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	bd38      	pop	{r3, r4, r5, pc}
 8004f60:	a1c00100 	.word	0xa1c00100
 8004f64:	e0002000 	.word	0xe0002000
 8004f68:	40023008 	.word	0x40023008
 8004f6c:	40023000 	.word	0x40023000
 8004f70:	f407a5c2 	.word	0xf407a5c2
 8004f74:	b5e8b5cd 	.word	0xb5e8b5cd

08004f78 <ai_platform_network_process>:
 8004f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	4604      	mov	r4, r0
 8004f80:	9201      	str	r2, [sp, #4]
 8004f82:	b120      	cbz	r0, 8004f8e <ai_platform_network_process+0x16>
 8004f84:	4ba5      	ldr	r3, [pc, #660]	; (800521c <ai_platform_network_process+0x2a4>)
 8004f86:	6802      	ldr	r2, [r0, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	bf18      	it	ne
 8004f8c:	2400      	movne	r4, #0
 8004f8e:	48a4      	ldr	r0, [pc, #656]	; (8005220 <ai_platform_network_process+0x2a8>)
 8004f90:	4ba4      	ldr	r3, [pc, #656]	; (8005224 <ai_platform_network_process+0x2ac>)
 8004f92:	6802      	ldr	r2, [r0, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	6002      	str	r2, [r0, #0]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	2a00      	cmp	r2, #0
 8004fa2:	d1fc      	bne.n	8004f9e <ai_platform_network_process+0x26>
 8004fa4:	4ba0      	ldr	r3, [pc, #640]	; (8005228 <ai_platform_network_process+0x2b0>)
 8004fa6:	4aa1      	ldr	r2, [pc, #644]	; (800522c <ai_platform_network_process+0x2b4>)
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4ba0      	ldr	r3, [pc, #640]	; (8005230 <ai_platform_network_process+0x2b8>)
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d000      	beq.n	8004fb4 <ai_platform_network_process+0x3c>
 8004fb2:	e7fe      	b.n	8004fb2 <ai_platform_network_process+0x3a>
 8004fb4:	2c00      	cmp	r4, #0
 8004fb6:	d066      	beq.n	8005086 <ai_platform_network_process+0x10e>
 8004fb8:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8004fbc:	b107      	cbz	r7, 8004fc0 <ai_platform_network_process+0x48>
 8004fbe:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8004fc0:	68e3      	ldr	r3, [r4, #12]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	6166      	str	r6, [r4, #20]
 8004fcc:	f040 80fe 	bne.w	80051cc <ai_platform_network_process+0x254>
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	d07f      	beq.n	80050d4 <ai_platform_network_process+0x15c>
 8004fd4:	2f00      	cmp	r7, #0
 8004fd6:	d07d      	beq.n	80050d4 <ai_platform_network_process+0x15c>
 8004fd8:	883b      	ldrh	r3, [r7, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d07a      	beq.n	80050d4 <ai_platform_network_process+0x15c>
 8004fde:	460d      	mov	r5, r1
 8004fe0:	46a0      	mov	r8, r4
 8004fe2:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8004fe6:	429e      	cmp	r6, r3
 8004fe8:	d27d      	bcs.n	80050e6 <ai_platform_network_process+0x16e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d07a      	beq.n	80050e6 <ai_platform_network_process+0x16e>
 8004ff0:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	d076      	beq.n	80050e6 <ai_platform_network_process+0x16e>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8005000:	d067      	beq.n	80050d2 <ai_platform_network_process+0x15a>
 8005002:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8005006:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800500a:	69a0      	ldr	r0, [r4, #24]
 800500c:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8005010:	6841      	ldr	r1, [r0, #4]
 8005012:	fb0b f30e 	mul.w	r3, fp, lr
 8005016:	fb0c f303 	mul.w	r3, ip, r3
 800501a:	4299      	cmp	r1, r3
 800501c:	d350      	bcc.n	80050c0 <ai_platform_network_process+0x148>
 800501e:	68e3      	ldr	r3, [r4, #12]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	455a      	cmp	r2, fp
 8005024:	d14c      	bne.n	80050c0 <ai_platform_network_process+0x148>
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	4572      	cmp	r2, lr
 800502a:	d149      	bne.n	80050c0 <ai_platform_network_process+0x148>
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	459c      	cmp	ip, r3
 8005030:	d146      	bne.n	80050c0 <ai_platform_network_process+0x148>
 8005032:	6800      	ldr	r0, [r0, #0]
 8005034:	f000 ff28 	bl	8005e88 <ai_array_get_byte_size>
 8005038:	68e2      	ldr	r2, [r4, #12]
 800503a:	6963      	ldr	r3, [r4, #20]
 800503c:	68d2      	ldr	r2, [r2, #12]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	fb03 f302 	mul.w	r3, r3, r2
 8005044:	4298      	cmp	r0, r3
 8005046:	d33b      	bcc.n	80050c0 <ai_platform_network_process+0x148>
 8005048:	69a3      	ldr	r3, [r4, #24]
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	f000 fed0 	bl	8005df0 <ai_array_to_buffer_fmt>
 8005050:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8005054:	4043      	eors	r3, r0
 8005056:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800505a:	d128      	bne.n	80050ae <ai_platform_network_process+0x136>
 800505c:	68eb      	ldr	r3, [r5, #12]
 800505e:	b1f3      	cbz	r3, 800509e <ai_platform_network_process+0x126>
 8005060:	f8b5 b000 	ldrh.w	fp, [r5]
 8005064:	f1bb 0f00 	cmp.w	fp, #0
 8005068:	d012      	beq.n	8005090 <ai_platform_network_process+0x118>
 800506a:	4623      	mov	r3, r4
 800506c:	f105 020c 	add.w	r2, r5, #12
 8005070:	4629      	mov	r1, r5
 8005072:	4650      	mov	r0, sl
 8005074:	f7ff fe42 	bl	8004cfc <_platform_network_state_setup.isra.1>
 8005078:	45d9      	cmp	r9, fp
 800507a:	883b      	ldrh	r3, [r7, #0]
 800507c:	bf38      	it	cc
 800507e:	46d9      	movcc	r9, fp
 8005080:	3601      	adds	r6, #1
 8005082:	3518      	adds	r5, #24
 8005084:	e7af      	b.n	8004fe6 <ai_platform_network_process+0x6e>
 8005086:	46a3      	mov	fp, r4
 8005088:	4658      	mov	r0, fp
 800508a:	b003      	add	sp, #12
 800508c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005090:	f108 0010 	add.w	r0, r8, #16
 8005094:	2221      	movs	r2, #33	; 0x21
 8005096:	2112      	movs	r1, #18
 8005098:	f000 f97a 	bl	8005390 <core_set_error>
 800509c:	e7f4      	b.n	8005088 <ai_platform_network_process+0x110>
 800509e:	f108 0010 	add.w	r0, r8, #16
 80050a2:	2217      	movs	r2, #23
 80050a4:	2112      	movs	r1, #18
 80050a6:	469b      	mov	fp, r3
 80050a8:	f000 f972 	bl	8005390 <core_set_error>
 80050ac:	e7ec      	b.n	8005088 <ai_platform_network_process+0x110>
 80050ae:	f108 0010 	add.w	r0, r8, #16
 80050b2:	2219      	movs	r2, #25
 80050b4:	2112      	movs	r1, #18
 80050b6:	f000 f96b 	bl	8005390 <core_set_error>
 80050ba:	f04f 0b00 	mov.w	fp, #0
 80050be:	e7e3      	b.n	8005088 <ai_platform_network_process+0x110>
 80050c0:	f108 0010 	add.w	r0, r8, #16
 80050c4:	2218      	movs	r2, #24
 80050c6:	2112      	movs	r1, #18
 80050c8:	f000 f962 	bl	8005390 <core_set_error>
 80050cc:	f04f 0b00 	mov.w	fp, #0
 80050d0:	e7da      	b.n	8005088 <ai_platform_network_process+0x110>
 80050d2:	4644      	mov	r4, r8
 80050d4:	f104 0010 	add.w	r0, r4, #16
 80050d8:	2217      	movs	r2, #23
 80050da:	2112      	movs	r1, #18
 80050dc:	f000 f958 	bl	8005390 <core_set_error>
 80050e0:	f04f 0b00 	mov.w	fp, #0
 80050e4:	e7d0      	b.n	8005088 <ai_platform_network_process+0x110>
 80050e6:	9a01      	ldr	r2, [sp, #4]
 80050e8:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 80050ec:	4644      	mov	r4, r8
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	f000 80a4 	beq.w	800523c <ai_platform_network_process+0x2c4>
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	f240 8140 	bls.w	800537a <ai_platform_network_process+0x402>
 80050fa:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 80050fe:	f118 0f0c 	cmn.w	r8, #12
 8005102:	f000 813a 	beq.w	800537a <ai_platform_network_process+0x402>
 8005106:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8135 	beq.w	800537a <ai_platform_network_process+0x402>
 8005110:	3204      	adds	r2, #4
 8005112:	4615      	mov	r5, r2
 8005114:	2700      	movs	r7, #0
 8005116:	429f      	cmp	r7, r3
 8005118:	f080 808c 	bcs.w	8005234 <ai_platform_network_process+0x2bc>
 800511c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8087 	beq.w	8005234 <ai_platform_network_process+0x2bc>
 8005126:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800512a:	2e00      	cmp	r6, #0
 800512c:	f000 8082 	beq.w	8005234 <ai_platform_network_process+0x2bc>
 8005130:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800513a:	d067      	beq.n	800520c <ai_platform_network_process+0x294>
 800513c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8005140:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8005144:	69b0      	ldr	r0, [r6, #24]
 8005146:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800514a:	6841      	ldr	r1, [r0, #4]
 800514c:	fb0b f30e 	mul.w	r3, fp, lr
 8005150:	fb0c f303 	mul.w	r3, ip, r3
 8005154:	4299      	cmp	r1, r3
 8005156:	f0c0 8110 	bcc.w	800537a <ai_platform_network_process+0x402>
 800515a:	68f3      	ldr	r3, [r6, #12]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	455a      	cmp	r2, fp
 8005160:	f040 810b 	bne.w	800537a <ai_platform_network_process+0x402>
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	4572      	cmp	r2, lr
 8005168:	f040 8107 	bne.w	800537a <ai_platform_network_process+0x402>
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	459c      	cmp	ip, r3
 8005170:	f040 8103 	bne.w	800537a <ai_platform_network_process+0x402>
 8005174:	6800      	ldr	r0, [r0, #0]
 8005176:	f000 fe87 	bl	8005e88 <ai_array_get_byte_size>
 800517a:	68f2      	ldr	r2, [r6, #12]
 800517c:	6973      	ldr	r3, [r6, #20]
 800517e:	68d2      	ldr	r2, [r2, #12]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	fb03 f302 	mul.w	r3, r3, r2
 8005186:	4298      	cmp	r0, r3
 8005188:	f0c0 80f7 	bcc.w	800537a <ai_platform_network_process+0x402>
 800518c:	69b3      	ldr	r3, [r6, #24]
 800518e:	6818      	ldr	r0, [r3, #0]
 8005190:	f000 fe2e 	bl	8005df0 <ai_array_to_buffer_fmt>
 8005194:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8005198:	4043      	eors	r3, r0
 800519a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800519e:	d12c      	bne.n	80051fa <ai_platform_network_process+0x282>
 80051a0:	68eb      	ldr	r3, [r5, #12]
 80051a2:	b313      	cbz	r3, 80051ea <ai_platform_network_process+0x272>
 80051a4:	f8b5 b000 	ldrh.w	fp, [r5]
 80051a8:	f1bb 0f00 	cmp.w	fp, #0
 80051ac:	d016      	beq.n	80051dc <ai_platform_network_process+0x264>
 80051ae:	4633      	mov	r3, r6
 80051b0:	f105 020c 	add.w	r2, r5, #12
 80051b4:	4629      	mov	r1, r5
 80051b6:	4650      	mov	r0, sl
 80051b8:	f7ff fda0 	bl	8004cfc <_platform_network_state_setup.isra.1>
 80051bc:	45d9      	cmp	r9, fp
 80051be:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80051c2:	bf38      	it	cc
 80051c4:	46d9      	movcc	r9, fp
 80051c6:	3701      	adds	r7, #1
 80051c8:	3518      	adds	r5, #24
 80051ca:	e7a4      	b.n	8005116 <ai_platform_network_process+0x19e>
 80051cc:	f104 0010 	add.w	r0, r4, #16
 80051d0:	2230      	movs	r2, #48	; 0x30
 80051d2:	2111      	movs	r1, #17
 80051d4:	f000 f8dc 	bl	8005390 <core_set_error>
 80051d8:	46b3      	mov	fp, r6
 80051da:	e755      	b.n	8005088 <ai_platform_network_process+0x110>
 80051dc:	f104 0010 	add.w	r0, r4, #16
 80051e0:	2221      	movs	r2, #33	; 0x21
 80051e2:	2113      	movs	r1, #19
 80051e4:	f000 f8d4 	bl	8005390 <core_set_error>
 80051e8:	e74e      	b.n	8005088 <ai_platform_network_process+0x110>
 80051ea:	f104 0010 	add.w	r0, r4, #16
 80051ee:	2217      	movs	r2, #23
 80051f0:	2113      	movs	r1, #19
 80051f2:	469b      	mov	fp, r3
 80051f4:	f000 f8cc 	bl	8005390 <core_set_error>
 80051f8:	e746      	b.n	8005088 <ai_platform_network_process+0x110>
 80051fa:	f104 0010 	add.w	r0, r4, #16
 80051fe:	2219      	movs	r2, #25
 8005200:	2113      	movs	r1, #19
 8005202:	f000 f8c5 	bl	8005390 <core_set_error>
 8005206:	f04f 0b00 	mov.w	fp, #0
 800520a:	e73d      	b.n	8005088 <ai_platform_network_process+0x110>
 800520c:	f104 0010 	add.w	r0, r4, #16
 8005210:	2217      	movs	r2, #23
 8005212:	2113      	movs	r1, #19
 8005214:	f000 f8bc 	bl	8005390 <core_set_error>
 8005218:	46d3      	mov	fp, sl
 800521a:	e735      	b.n	8005088 <ai_platform_network_process+0x110>
 800521c:	a1c00100 	.word	0xa1c00100
 8005220:	e0002000 	.word	0xe0002000
 8005224:	40023008 	.word	0x40023008
 8005228:	40023000 	.word	0x40023000
 800522c:	f407a5c2 	.word	0xf407a5c2
 8005230:	b5e8b5cd 	.word	0xb5e8b5cd
 8005234:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8005238:	f8a4 9014 	strh.w	r9, [r4, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8099 	beq.w	8005374 <ai_platform_network_process+0x3fc>
 8005242:	2b01      	cmp	r3, #1
 8005244:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005246:	f240 8093 	bls.w	8005370 <ai_platform_network_process+0x3f8>
 800524a:	f105 070c 	add.w	r7, r5, #12
 800524e:	8ae0      	ldrh	r0, [r4, #22]
 8005250:	8aa3      	ldrh	r3, [r4, #20]
 8005252:	4283      	cmp	r3, r0
 8005254:	d977      	bls.n	8005346 <ai_platform_network_process+0x3ce>
 8005256:	46a3      	mov	fp, r4
 8005258:	2d00      	cmp	r5, #0
 800525a:	d032      	beq.n	80052c2 <ai_platform_network_process+0x34a>
 800525c:	882b      	ldrh	r3, [r5, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d02f      	beq.n	80052c2 <ai_platform_network_process+0x34a>
 8005262:	686b      	ldr	r3, [r5, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d02c      	beq.n	80052c2 <ai_platform_network_process+0x34a>
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f04f 0800 	mov.w	r8, #0
 800526e:	b343      	cbz	r3, 80052c2 <ai_platform_network_process+0x34a>
 8005270:	68a9      	ldr	r1, [r5, #8]
 8005272:	699a      	ldr	r2, [r3, #24]
 8005274:	f8d1 a000 	ldr.w	sl, [r1]
 8005278:	6814      	ldr	r4, [r2, #0]
 800527a:	6890      	ldr	r0, [r2, #8]
 800527c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005280:	eb0a 0609 	add.w	r6, sl, r9
 8005284:	00a4      	lsls	r4, r4, #2
 8005286:	6871      	ldr	r1, [r6, #4]
 8005288:	d45f      	bmi.n	800534a <ai_platform_network_process+0x3d2>
 800528a:	68d4      	ldr	r4, [r2, #12]
 800528c:	1b00      	subs	r0, r0, r4
 800528e:	4401      	add	r1, r0
 8005290:	6091      	str	r1, [r2, #8]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	6872      	ldr	r2, [r6, #4]
 8005296:	60da      	str	r2, [r3, #12]
 8005298:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800529c:	f85a 2009 	ldr.w	r2, [sl, r9]
 80052a0:	440b      	add	r3, r1
 80052a2:	4293      	cmp	r3, r2
 80052a4:	bf24      	itt	cs
 80052a6:	68f3      	ldrcs	r3, [r6, #12]
 80052a8:	1ad3      	subcs	r3, r2, r3
 80052aa:	6073      	str	r3, [r6, #4]
 80052ac:	882b      	ldrh	r3, [r5, #0]
 80052ae:	f108 0801 	add.w	r8, r8, #1
 80052b2:	4598      	cmp	r8, r3
 80052b4:	d205      	bcs.n	80052c2 <ai_platform_network_process+0x34a>
 80052b6:	686b      	ldr	r3, [r5, #4]
 80052b8:	b11b      	cbz	r3, 80052c2 <ai_platform_network_process+0x34a>
 80052ba:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1d6      	bne.n	8005270 <ai_platform_network_process+0x2f8>
 80052c2:	4658      	mov	r0, fp
 80052c4:	f000 fd5a 	bl	8005d7c <ai_layers_forward_all>
 80052c8:	2f00      	cmp	r7, #0
 80052ca:	d032      	beq.n	8005332 <ai_platform_network_process+0x3ba>
 80052cc:	883b      	ldrh	r3, [r7, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d02f      	beq.n	8005332 <ai_platform_network_process+0x3ba>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	b36b      	cbz	r3, 8005332 <ai_platform_network_process+0x3ba>
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	b358      	cbz	r0, 8005332 <ai_platform_network_process+0x3ba>
 80052da:	f04f 0800 	mov.w	r8, #0
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6981      	ldr	r1, [r0, #24]
 80052e2:	f8d3 a000 	ldr.w	sl, [r3]
 80052e6:	680c      	ldr	r4, [r1, #0]
 80052e8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80052ec:	eb0a 0609 	add.w	r6, sl, r9
 80052f0:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80052f4:	00a4      	lsls	r4, r4, #2
 80052f6:	eb0c 0302 	add.w	r3, ip, r2
 80052fa:	d42a      	bmi.n	8005352 <ai_platform_network_process+0x3da>
 80052fc:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005300:	4293      	cmp	r3, r2
 8005302:	bf24      	itt	cs
 8005304:	68f3      	ldrcs	r3, [r6, #12]
 8005306:	1ad3      	subcs	r3, r2, r3
 8005308:	6073      	str	r3, [r6, #4]
 800530a:	6981      	ldr	r1, [r0, #24]
 800530c:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8005310:	1b12      	subs	r2, r2, r4
 8005312:	4413      	add	r3, r2
 8005314:	608b      	str	r3, [r1, #8]
 8005316:	6983      	ldr	r3, [r0, #24]
 8005318:	6872      	ldr	r2, [r6, #4]
 800531a:	60da      	str	r2, [r3, #12]
 800531c:	883b      	ldrh	r3, [r7, #0]
 800531e:	f108 0801 	add.w	r8, r8, #1
 8005322:	4598      	cmp	r8, r3
 8005324:	d205      	bcs.n	8005332 <ai_platform_network_process+0x3ba>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	b11b      	cbz	r3, 8005332 <ai_platform_network_process+0x3ba>
 800532a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800532e:	2800      	cmp	r0, #0
 8005330:	d1d5      	bne.n	80052de <ai_platform_network_process+0x366>
 8005332:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8005336:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800533a:	3001      	adds	r0, #1
 800533c:	b280      	uxth	r0, r0
 800533e:	4283      	cmp	r3, r0
 8005340:	f8ab 0016 	strh.w	r0, [fp, #22]
 8005344:	d888      	bhi.n	8005258 <ai_platform_network_process+0x2e0>
 8005346:	4683      	mov	fp, r0
 8005348:	e69e      	b.n	8005088 <ai_platform_network_process+0x110>
 800534a:	68b2      	ldr	r2, [r6, #8]
 800534c:	f000 fdf0 	bl	8005f30 <memcpy>
 8005350:	e7a2      	b.n	8005298 <ai_platform_network_process+0x320>
 8005352:	6889      	ldr	r1, [r1, #8]
 8005354:	4660      	mov	r0, ip
 8005356:	f000 fdeb 	bl	8005f30 <memcpy>
 800535a:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800535e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005362:	440b      	add	r3, r1
 8005364:	4293      	cmp	r3, r2
 8005366:	bf24      	itt	cs
 8005368:	68f3      	ldrcs	r3, [r6, #12]
 800536a:	1ad3      	subcs	r3, r2, r3
 800536c:	6073      	str	r3, [r6, #4]
 800536e:	e7d5      	b.n	800531c <ai_platform_network_process+0x3a4>
 8005370:	2700      	movs	r7, #0
 8005372:	e76c      	b.n	800524e <ai_platform_network_process+0x2d6>
 8005374:	461d      	mov	r5, r3
 8005376:	461f      	mov	r7, r3
 8005378:	e769      	b.n	800524e <ai_platform_network_process+0x2d6>
 800537a:	f104 0010 	add.w	r0, r4, #16
 800537e:	2218      	movs	r2, #24
 8005380:	2113      	movs	r1, #19
 8005382:	f000 f805 	bl	8005390 <core_set_error>
 8005386:	f04f 0b00 	mov.w	fp, #0
 800538a:	e67d      	b.n	8005088 <ai_platform_network_process+0x110>

0800538c <core_init>:
 800538c:	2001      	movs	r0, #1
 800538e:	4770      	bx	lr

08005390 <core_set_error>:
 8005390:	7803      	ldrb	r3, [r0, #0]
 8005392:	b933      	cbnz	r3, 80053a2 <core_set_error+0x12>
 8005394:	7001      	strb	r1, [r0, #0]
 8005396:	6803      	ldr	r3, [r0, #0]
 8005398:	f362 231f 	bfi	r3, r2, #8, #24
 800539c:	6003      	str	r3, [r0, #0]
 800539e:	2001      	movs	r0, #1
 80053a0:	4770      	bx	lr
 80053a2:	2000      	movs	r0, #0
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop

080053a8 <ai_dict8_dot_array_f32>:
 80053a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	f8dd c020 	ldr.w	ip, [sp, #32]
 80053b0:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80053b4:	f000 80c0 	beq.w	8005538 <ai_dict8_dot_array_f32+0x190>
 80053b8:	f101 0408 	add.w	r4, r1, #8
 80053bc:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80053c0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005540 <ai_dict8_dot_array_f32+0x198>
 80053c4:	eb04 0e09 	add.w	lr, r4, r9
 80053c8:	f103 0520 	add.w	r5, r3, #32
 80053cc:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 80053d0:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 80053d4:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 80053d8:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 80053dc:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 80053e0:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 80053e4:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80053e8:	ed55 3a04 	vldr	s7, [r5, #-16]
 80053ec:	ed55 4a03 	vldr	s9, [r5, #-12]
 80053f0:	ed55 5a02 	vldr	s11, [r5, #-8]
 80053f4:	ed55 6a01 	vldr	s13, [r5, #-4]
 80053f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80053fc:	edd6 7a00 	vldr	s15, [r6]
 8005400:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8005404:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005408:	ee67 7a83 	vmul.f32	s15, s15, s6
 800540c:	ed9a 3a00 	vldr	s6, [sl]
 8005410:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8005414:	eee3 7a05 	vfma.f32	s15, s6, s10
 8005418:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800541c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005420:	ed97 3a00 	vldr	s6, [r7]
 8005424:	ed96 5a00 	vldr	s10, [r6]
 8005428:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800542c:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8005430:	eee3 7a04 	vfma.f32	s15, s6, s8
 8005434:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005438:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800543c:	ed9a 3a00 	vldr	s6, [sl]
 8005440:	ed96 4a00 	vldr	s8, [r6]
 8005444:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8005448:	eee5 7a06 	vfma.f32	s15, s10, s12
 800544c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005450:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005454:	ed97 5a00 	vldr	s10, [r7]
 8005458:	ed96 6a00 	vldr	s12, [r6]
 800545c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005460:	3408      	adds	r4, #8
 8005462:	45a6      	cmp	lr, r4
 8005464:	f105 0520 	add.w	r5, r5, #32
 8005468:	eee4 7a24 	vfma.f32	s15, s8, s9
 800546c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005470:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005474:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005478:	d1a8      	bne.n	80053cc <ai_dict8_dot_array_f32+0x24>
 800547a:	4449      	add	r1, r9
 800547c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005480:	f01c 0c07 	ands.w	ip, ip, #7
 8005484:	d050      	beq.n	8005528 <ai_dict8_dot_array_f32+0x180>
 8005486:	780c      	ldrb	r4, [r1, #0]
 8005488:	edd3 6a00 	vldr	s13, [r3]
 800548c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005490:	edd4 7a00 	vldr	s15, [r4]
 8005494:	f1bc 0f01 	cmp.w	ip, #1
 8005498:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800549c:	d044      	beq.n	8005528 <ai_dict8_dot_array_f32+0x180>
 800549e:	784c      	ldrb	r4, [r1, #1]
 80054a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80054a4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80054a8:	edd4 7a00 	vldr	s15, [r4]
 80054ac:	f1bc 0f02 	cmp.w	ip, #2
 80054b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054b4:	d038      	beq.n	8005528 <ai_dict8_dot_array_f32+0x180>
 80054b6:	788c      	ldrb	r4, [r1, #2]
 80054b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80054bc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80054c0:	edd4 7a00 	vldr	s15, [r4]
 80054c4:	f1bc 0f03 	cmp.w	ip, #3
 80054c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054cc:	d02c      	beq.n	8005528 <ai_dict8_dot_array_f32+0x180>
 80054ce:	78cc      	ldrb	r4, [r1, #3]
 80054d0:	edd3 6a03 	vldr	s13, [r3, #12]
 80054d4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80054d8:	edd4 7a00 	vldr	s15, [r4]
 80054dc:	f1bc 0f04 	cmp.w	ip, #4
 80054e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054e4:	d020      	beq.n	8005528 <ai_dict8_dot_array_f32+0x180>
 80054e6:	790c      	ldrb	r4, [r1, #4]
 80054e8:	edd3 6a04 	vldr	s13, [r3, #16]
 80054ec:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80054f0:	edd4 7a00 	vldr	s15, [r4]
 80054f4:	f1bc 0f05 	cmp.w	ip, #5
 80054f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054fc:	d014      	beq.n	8005528 <ai_dict8_dot_array_f32+0x180>
 80054fe:	794c      	ldrb	r4, [r1, #5]
 8005500:	edd3 6a05 	vldr	s13, [r3, #20]
 8005504:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005508:	edd4 7a00 	vldr	s15, [r4]
 800550c:	f1bc 0f06 	cmp.w	ip, #6
 8005510:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005514:	d008      	beq.n	8005528 <ai_dict8_dot_array_f32+0x180>
 8005516:	7989      	ldrb	r1, [r1, #6]
 8005518:	edd3 7a06 	vldr	s15, [r3, #24]
 800551c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005520:	edd2 6a00 	vldr	s13, [r2]
 8005524:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005528:	edd0 7a00 	vldr	s15, [r0]
 800552c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005530:	ed80 7a00 	vstr	s14, [r0]
 8005534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005538:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005540 <ai_dict8_dot_array_f32+0x198>
 800553c:	e7a0      	b.n	8005480 <ai_dict8_dot_array_f32+0xd8>
 800553e:	bf00      	nop
 8005540:	00000000 	.word	0x00000000

08005544 <ai_dict4_dot_array_f32>:
 8005544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005548:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800554a:	f027 0c01 	bic.w	ip, r7, #1
 800554e:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8005552:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8005556:	f000 80ae 	beq.w	80056b6 <ai_dict4_dot_array_f32+0x172>
 800555a:	1d0d      	adds	r5, r1, #4
 800555c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8005560:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80056bc <ai_dict4_dot_array_f32+0x178>
 8005564:	eb05 0e09 	add.w	lr, r5, r9
 8005568:	f103 0420 	add.w	r4, r3, #32
 800556c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8005570:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8005574:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8005578:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800557c:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8005580:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8005584:	ed14 5a04 	vldr	s10, [r4, #-16]
 8005588:	ed54 5a03 	vldr	s11, [r4, #-12]
 800558c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005590:	ed54 6a01 	vldr	s13, [r4, #-4]
 8005594:	f006 0a0f 	and.w	sl, r6, #15
 8005598:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800559c:	edda 7a00 	vldr	s15, [sl]
 80055a0:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 80055a4:	0936      	lsrs	r6, r6, #4
 80055a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80055aa:	ee67 7a83 	vmul.f32	s15, s15, s6
 80055ae:	ed96 3a00 	vldr	s6, [r6]
 80055b2:	ea4f 161b 	mov.w	r6, fp, lsr #4
 80055b6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80055ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80055be:	f00b 0b0f 	and.w	fp, fp, #15
 80055c2:	edd6 3a00 	vldr	s7, [r6]
 80055c6:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80055ca:	eee3 7a84 	vfma.f32	s15, s7, s8
 80055ce:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80055d2:	3504      	adds	r5, #4
 80055d4:	ed9b 4a00 	vldr	s8, [fp]
 80055d8:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80055dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80055e0:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80055e4:	f00a 0a0f 	and.w	sl, sl, #15
 80055e8:	eddb 4a00 	vldr	s9, [fp]
 80055ec:	eee4 7a85 	vfma.f32	s15, s9, s10
 80055f0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80055f4:	45ae      	cmp	lr, r5
 80055f6:	ed9a 5a00 	vldr	s10, [sl]
 80055fa:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80055fe:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005602:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005606:	f006 060f 	and.w	r6, r6, #15
 800560a:	edda 5a00 	vldr	s11, [sl]
 800560e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005612:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005616:	f104 0420 	add.w	r4, r4, #32
 800561a:	ed96 6a00 	vldr	s12, [r6]
 800561e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005626:	d1a1      	bne.n	800556c <ai_dict4_dot_array_f32+0x28>
 8005628:	4449      	add	r1, r9
 800562a:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800562e:	459c      	cmp	ip, r3
 8005630:	d92d      	bls.n	800568e <ai_dict4_dot_array_f32+0x14a>
 8005632:	f10c 0c07 	add.w	ip, ip, #7
 8005636:	f103 0508 	add.w	r5, r3, #8
 800563a:	ebac 0c05 	sub.w	ip, ip, r5
 800563e:	f02c 0407 	bic.w	r4, ip, #7
 8005642:	f103 0810 	add.w	r8, r3, #16
 8005646:	44a0      	add	r8, r4
 8005648:	f101 3eff 	add.w	lr, r1, #4294967295
 800564c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8005650:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005654:	ed55 6a02 	vldr	s13, [r5, #-8]
 8005658:	f004 060f 	and.w	r6, r4, #15
 800565c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005660:	0924      	lsrs	r4, r4, #4
 8005662:	edd6 7a00 	vldr	s15, [r6]
 8005666:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800566a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800566e:	ed94 6a00 	vldr	s12, [r4]
 8005672:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005676:	3508      	adds	r5, #8
 8005678:	45a8      	cmp	r8, r5
 800567a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800567e:	d1e5      	bne.n	800564c <ai_dict4_dot_array_f32+0x108>
 8005680:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005684:	f10c 0c01 	add.w	ip, ip, #1
 8005688:	4461      	add	r1, ip
 800568a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800568e:	07fc      	lsls	r4, r7, #31
 8005690:	d509      	bpl.n	80056a6 <ai_dict4_dot_array_f32+0x162>
 8005692:	7809      	ldrb	r1, [r1, #0]
 8005694:	edd3 7a00 	vldr	s15, [r3]
 8005698:	090b      	lsrs	r3, r1, #4
 800569a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800569e:	edd2 6a00 	vldr	s13, [r2]
 80056a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80056a6:	edd0 7a00 	vldr	s15, [r0]
 80056aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056ae:	ed80 7a00 	vstr	s14, [r0]
 80056b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b6:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80056bc <ai_dict4_dot_array_f32+0x178>
 80056ba:	e7b8      	b.n	800562e <ai_dict4_dot_array_f32+0xea>
 80056bc:	00000000 	.word	0x00000000

080056c0 <forward_dense>:
 80056c0:	6942      	ldr	r2, [r0, #20]
 80056c2:	8813      	ldrh	r3, [r2, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 81ca 	beq.w	8005a5e <forward_dense+0x39e>
 80056ca:	6852      	ldr	r2, [r2, #4]
 80056cc:	6850      	ldr	r0, [r2, #4]
 80056ce:	b100      	cbz	r0, 80056d2 <forward_dense+0x12>
 80056d0:	6800      	ldr	r0, [r0, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	f240 81c0 	bls.w	8005a58 <forward_dense+0x398>
 80056d8:	6911      	ldr	r1, [r2, #16]
 80056da:	b101      	cbz	r1, 80056de <forward_dense+0x1e>
 80056dc:	6809      	ldr	r1, [r1, #0]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	f000 81bf 	beq.w	8005a62 <forward_dense+0x3a2>
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	ed2d 8b10 	vpush	{d8-d15}
 80056ec:	69d3      	ldr	r3, [r2, #28]
 80056ee:	b091      	sub	sp, #68	; 0x44
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 820b 	beq.w	8005b0c <forward_dense+0x44c>
 80056f6:	681c      	ldr	r4, [r3, #0]
 80056f8:	9408      	str	r4, [sp, #32]
 80056fa:	f112 0418 	adds.w	r4, r2, #24
 80056fe:	f000 81df 	beq.w	8005ac0 <forward_dense+0x400>
 8005702:	8b12      	ldrh	r2, [r2, #24]
 8005704:	2a01      	cmp	r2, #1
 8005706:	f240 81fe 	bls.w	8005b06 <forward_dense+0x446>
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 81da 	beq.w	8005ac4 <forward_dense+0x404>
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	9306      	str	r3, [sp, #24]
 8005714:	9b08      	ldr	r3, [sp, #32]
 8005716:	68cc      	ldr	r4, [r1, #12]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	68c5      	ldr	r5, [r0, #12]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005722:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005726:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 800572a:	f3c2 5541 	ubfx	r5, r2, #21, #2
 800572e:	fa4c f505 	asr.w	r5, ip, r5
 8005732:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8005736:	950b      	str	r5, [sp, #44]	; 0x2c
 8005738:	2a04      	cmp	r2, #4
 800573a:	fb07 f506 	mul.w	r5, r7, r6
 800573e:	6864      	ldr	r4, [r4, #4]
 8005740:	9507      	str	r5, [sp, #28]
 8005742:	f000 81dd 	beq.w	8005b00 <forward_dense+0x440>
 8005746:	2a08      	cmp	r2, #8
 8005748:	f000 81da 	beq.w	8005b00 <forward_dense+0x440>
 800574c:	f04f 0a00 	mov.w	sl, #0
 8005750:	698a      	ldr	r2, [r1, #24]
 8005752:	6981      	ldr	r1, [r0, #24]
 8005754:	6890      	ldr	r0, [r2, #8]
 8005756:	9a08      	ldr	r2, [sp, #32]
 8005758:	9004      	str	r0, [sp, #16]
 800575a:	6952      	ldr	r2, [r2, #20]
 800575c:	688f      	ldr	r7, [r1, #8]
 800575e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005762:	00a2      	lsls	r2, r4, #2
 8005764:	9209      	str	r2, [sp, #36]	; 0x24
 8005766:	1886      	adds	r6, r0, r2
 8005768:	9a07      	ldr	r2, [sp, #28]
 800576a:	2a00      	cmp	r2, #0
 800576c:	f000 81c3 	beq.w	8005af6 <forward_dense+0x436>
 8005770:	f1a8 0210 	sub.w	r2, r8, #16
 8005774:	0912      	lsrs	r2, r2, #4
 8005776:	3201      	adds	r2, #1
 8005778:	0192      	lsls	r2, r2, #6
 800577a:	920c      	str	r2, [sp, #48]	; 0x30
 800577c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8005780:	920a      	str	r2, [sp, #40]	; 0x28
 8005782:	689d      	ldr	r5, [r3, #8]
 8005784:	9b06      	ldr	r3, [sp, #24]
 8005786:	eddf aad0 	vldr	s21, [pc, #832]	; 8005ac8 <forward_dense+0x408>
 800578a:	2200      	movs	r2, #0
 800578c:	9205      	str	r2, [sp, #20]
 800578e:	f008 020f 	and.w	r2, r8, #15
 8005792:	920d      	str	r2, [sp, #52]	; 0x34
 8005794:	2b00      	cmp	r3, #0
 8005796:	d043      	beq.n	8005820 <forward_dense+0x160>
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	689c      	ldr	r4, [r3, #8]
 800579c:	9b04      	ldr	r3, [sp, #16]
 800579e:	f1ba 0f00 	cmp.w	sl, #0
 80057a2:	d042      	beq.n	800582a <forward_dense+0x16a>
 80057a4:	42b3      	cmp	r3, r6
 80057a6:	d22a      	bcs.n	80057fe <forward_dense+0x13e>
 80057a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057aa:	469b      	mov	fp, r3
 80057ac:	ab0f      	add	r3, sp, #60	; 0x3c
 80057ae:	9303      	str	r3, [sp, #12]
 80057b0:	2a04      	cmp	r2, #4
 80057b2:	4633      	mov	r3, r6
 80057b4:	4646      	mov	r6, r8
 80057b6:	4698      	mov	r8, r3
 80057b8:	f000 8156 	beq.w	8005a68 <forward_dense+0x3a8>
 80057bc:	2c00      	cmp	r4, #0
 80057be:	f000 8185 	beq.w	8005acc <forward_dense+0x40c>
 80057c2:	f8d4 c000 	ldr.w	ip, [r4]
 80057c6:	9803      	ldr	r0, [sp, #12]
 80057c8:	9600      	str	r6, [sp, #0]
 80057ca:	463b      	mov	r3, r7
 80057cc:	4629      	mov	r1, r5
 80057ce:	4652      	mov	r2, sl
 80057d0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80057d4:	f7ff fde8 	bl	80053a8 <ai_dict8_dot_array_f32>
 80057d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057da:	f84b 3b04 	str.w	r3, [fp], #4
 80057de:	45c3      	cmp	fp, r8
 80057e0:	f104 0404 	add.w	r4, r4, #4
 80057e4:	444d      	add	r5, r9
 80057e6:	d3e9      	bcc.n	80057bc <forward_dense+0xfc>
 80057e8:	4643      	mov	r3, r8
 80057ea:	46b0      	mov	r8, r6
 80057ec:	461e      	mov	r6, r3
 80057ee:	9a04      	ldr	r2, [sp, #16]
 80057f0:	43d3      	mvns	r3, r2
 80057f2:	4433      	add	r3, r6
 80057f4:	f023 0303 	bic.w	r3, r3, #3
 80057f8:	3304      	adds	r3, #4
 80057fa:	18d3      	adds	r3, r2, r3
 80057fc:	9304      	str	r3, [sp, #16]
 80057fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005800:	9b05      	ldr	r3, [sp, #20]
 8005802:	4417      	add	r7, r2
 8005804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005806:	4416      	add	r6, r2
 8005808:	9a07      	ldr	r2, [sp, #28]
 800580a:	3301      	adds	r3, #1
 800580c:	4293      	cmp	r3, r2
 800580e:	9305      	str	r3, [sp, #20]
 8005810:	f000 8171 	beq.w	8005af6 <forward_dense+0x436>
 8005814:	9b08      	ldr	r3, [sp, #32]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	689d      	ldr	r5, [r3, #8]
 800581a:	9b06      	ldr	r3, [sp, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1bb      	bne.n	8005798 <forward_dense+0xd8>
 8005820:	461c      	mov	r4, r3
 8005822:	9b04      	ldr	r3, [sp, #16]
 8005824:	f1ba 0f00 	cmp.w	sl, #0
 8005828:	d1bc      	bne.n	80057a4 <forward_dense+0xe4>
 800582a:	42b3      	cmp	r3, r6
 800582c:	d2e7      	bcs.n	80057fe <forward_dense+0x13e>
 800582e:	4618      	mov	r0, r3
 8005830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005832:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8005836:	eb07 0c03 	add.w	ip, r7, r3
 800583a:	469e      	mov	lr, r3
 800583c:	2c00      	cmp	r4, #0
 800583e:	f000 80ff 	beq.w	8005a40 <forward_dense+0x380>
 8005842:	f1b8 0f0f 	cmp.w	r8, #15
 8005846:	edd4 fa00 	vldr	s31, [r4]
 800584a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8005ac8 <forward_dense+0x408>
 800584e:	f104 0404 	add.w	r4, r4, #4
 8005852:	f240 80fd 	bls.w	8005a50 <forward_dense+0x390>
 8005856:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800585a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800585e:	4641      	mov	r1, r8
 8005860:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8005864:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005868:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800586c:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8005870:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8005874:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8005878:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800587c:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8005880:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8005884:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8005888:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800588c:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8005890:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8005894:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8005898:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800589c:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 80058a0:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 80058a4:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 80058a8:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 80058ac:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 80058b0:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 80058b4:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 80058b8:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 80058bc:	ed13 4a04 	vldr	s8, [r3, #-16]
 80058c0:	ed52 4a04 	vldr	s9, [r2, #-16]
 80058c4:	ed12 5a03 	vldr	s10, [r2, #-12]
 80058c8:	ed53 5a03 	vldr	s11, [r3, #-12]
 80058cc:	ed12 6a02 	vldr	s12, [r2, #-8]
 80058d0:	ed13 7a02 	vldr	s14, [r3, #-8]
 80058d4:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80058d8:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80058dc:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80058e0:	3910      	subs	r1, #16
 80058e2:	290f      	cmp	r1, #15
 80058e4:	ed53 ea01 	vldr	s29, [r3, #-4]
 80058e8:	ed12 ea01 	vldr	s28, [r2, #-4]
 80058ec:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80058f0:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80058f4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80058f8:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80058fc:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8005900:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8005904:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005908:	eee8 7a88 	vfma.f32	s15, s17, s16
 800590c:	eee0 7a20 	vfma.f32	s15, s0, s1
 8005910:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005914:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005918:	eee3 7a23 	vfma.f32	s15, s6, s7
 800591c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005920:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005924:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005928:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800592c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005930:	d896      	bhi.n	8005860 <forward_dense+0x1a0>
 8005932:	eb05 010e 	add.w	r1, r5, lr
 8005936:	465b      	mov	r3, fp
 8005938:	4662      	mov	r2, ip
 800593a:	2b00      	cmp	r3, #0
 800593c:	d075      	beq.n	8005a2a <forward_dense+0x36a>
 800593e:	ed91 7a00 	vldr	s14, [r1]
 8005942:	edd2 7a00 	vldr	s15, [r2]
 8005946:	2b01      	cmp	r3, #1
 8005948:	eee7 6a27 	vfma.f32	s13, s14, s15
 800594c:	d06d      	beq.n	8005a2a <forward_dense+0x36a>
 800594e:	ed91 7a01 	vldr	s14, [r1, #4]
 8005952:	edd2 7a01 	vldr	s15, [r2, #4]
 8005956:	2b02      	cmp	r3, #2
 8005958:	eee7 6a27 	vfma.f32	s13, s14, s15
 800595c:	d065      	beq.n	8005a2a <forward_dense+0x36a>
 800595e:	ed91 7a02 	vldr	s14, [r1, #8]
 8005962:	edd2 7a02 	vldr	s15, [r2, #8]
 8005966:	2b03      	cmp	r3, #3
 8005968:	eee7 6a27 	vfma.f32	s13, s14, s15
 800596c:	d05d      	beq.n	8005a2a <forward_dense+0x36a>
 800596e:	ed91 7a03 	vldr	s14, [r1, #12]
 8005972:	edd2 7a03 	vldr	s15, [r2, #12]
 8005976:	2b04      	cmp	r3, #4
 8005978:	eee7 6a27 	vfma.f32	s13, s14, s15
 800597c:	d055      	beq.n	8005a2a <forward_dense+0x36a>
 800597e:	ed91 7a04 	vldr	s14, [r1, #16]
 8005982:	edd2 7a04 	vldr	s15, [r2, #16]
 8005986:	2b05      	cmp	r3, #5
 8005988:	eee7 6a27 	vfma.f32	s13, s14, s15
 800598c:	d04d      	beq.n	8005a2a <forward_dense+0x36a>
 800598e:	ed91 7a05 	vldr	s14, [r1, #20]
 8005992:	edd2 7a05 	vldr	s15, [r2, #20]
 8005996:	2b06      	cmp	r3, #6
 8005998:	eee7 6a27 	vfma.f32	s13, s14, s15
 800599c:	d045      	beq.n	8005a2a <forward_dense+0x36a>
 800599e:	ed91 7a06 	vldr	s14, [r1, #24]
 80059a2:	edd2 7a06 	vldr	s15, [r2, #24]
 80059a6:	2b07      	cmp	r3, #7
 80059a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80059ac:	d03d      	beq.n	8005a2a <forward_dense+0x36a>
 80059ae:	ed91 7a07 	vldr	s14, [r1, #28]
 80059b2:	edd2 7a07 	vldr	s15, [r2, #28]
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80059bc:	d035      	beq.n	8005a2a <forward_dense+0x36a>
 80059be:	ed91 7a08 	vldr	s14, [r1, #32]
 80059c2:	edd2 7a08 	vldr	s15, [r2, #32]
 80059c6:	2b09      	cmp	r3, #9
 80059c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80059cc:	d02d      	beq.n	8005a2a <forward_dense+0x36a>
 80059ce:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80059d2:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80059d6:	2b0a      	cmp	r3, #10
 80059d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80059dc:	d025      	beq.n	8005a2a <forward_dense+0x36a>
 80059de:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80059e2:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80059e6:	2b0b      	cmp	r3, #11
 80059e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80059ec:	d01d      	beq.n	8005a2a <forward_dense+0x36a>
 80059ee:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80059f2:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80059f6:	2b0c      	cmp	r3, #12
 80059f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80059fc:	d015      	beq.n	8005a2a <forward_dense+0x36a>
 80059fe:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8005a02:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005a06:	2b0d      	cmp	r3, #13
 8005a08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a0c:	d00d      	beq.n	8005a2a <forward_dense+0x36a>
 8005a0e:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8005a12:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005a16:	2b0e      	cmp	r3, #14
 8005a18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a1c:	d005      	beq.n	8005a2a <forward_dense+0x36a>
 8005a1e:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8005a22:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005a26:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a2a:	444d      	add	r5, r9
 8005a2c:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8005a30:	ece0 6a01 	vstmia	r0!, {s13}
 8005a34:	42b0      	cmp	r0, r6
 8005a36:	f4bf aeda 	bcs.w	80057ee <forward_dense+0x12e>
 8005a3a:	2c00      	cmp	r4, #0
 8005a3c:	f47f af01 	bne.w	8005842 <forward_dense+0x182>
 8005a40:	f1b8 0f0f 	cmp.w	r8, #15
 8005a44:	eef0 fa6a 	vmov.f32	s31, s21
 8005a48:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005ac8 <forward_dense+0x408>
 8005a4c:	f63f af03 	bhi.w	8005856 <forward_dense+0x196>
 8005a50:	4643      	mov	r3, r8
 8005a52:	4629      	mov	r1, r5
 8005a54:	463a      	mov	r2, r7
 8005a56:	e770      	b.n	800593a <forward_dense+0x27a>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	deff      	udf	#255	; 0xff
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	deff      	udf	#255	; 0xff
 8005a62:	2300      	movs	r3, #0
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	deff      	udf	#255	; 0xff
 8005a68:	b1ac      	cbz	r4, 8005a96 <forward_dense+0x3d6>
 8005a6a:	f8d4 c000 	ldr.w	ip, [r4]
 8005a6e:	9803      	ldr	r0, [sp, #12]
 8005a70:	9600      	str	r6, [sp, #0]
 8005a72:	463b      	mov	r3, r7
 8005a74:	4629      	mov	r1, r5
 8005a76:	4652      	mov	r2, sl
 8005a78:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005a7c:	f7ff fd62 	bl	8005544 <ai_dict4_dot_array_f32>
 8005a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a82:	f84b 3b04 	str.w	r3, [fp], #4
 8005a86:	45c3      	cmp	fp, r8
 8005a88:	f104 0404 	add.w	r4, r4, #4
 8005a8c:	444d      	add	r5, r9
 8005a8e:	f4bf aeab 	bcs.w	80057e8 <forward_dense+0x128>
 8005a92:	2c00      	cmp	r4, #0
 8005a94:	d1e9      	bne.n	8005a6a <forward_dense+0x3aa>
 8005a96:	4634      	mov	r4, r6
 8005a98:	4646      	mov	r6, r8
 8005a9a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a9e:	9400      	str	r4, [sp, #0]
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	4652      	mov	r2, sl
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005aac:	f7ff fd4a 	bl	8005544 <ai_dict4_dot_array_f32>
 8005ab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ab2:	f84b 3b04 	str.w	r3, [fp], #4
 8005ab6:	45b3      	cmp	fp, r6
 8005ab8:	444d      	add	r5, r9
 8005aba:	d3f0      	bcc.n	8005a9e <forward_dense+0x3de>
 8005abc:	46a0      	mov	r8, r4
 8005abe:	e696      	b.n	80057ee <forward_dense+0x12e>
 8005ac0:	9406      	str	r4, [sp, #24]
 8005ac2:	e627      	b.n	8005714 <forward_dense+0x54>
 8005ac4:	9306      	str	r3, [sp, #24]
 8005ac6:	e625      	b.n	8005714 <forward_dense+0x54>
 8005ac8:	00000000 	.word	0x00000000
 8005acc:	4634      	mov	r4, r6
 8005ace:	4646      	mov	r6, r8
 8005ad0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ad4:	9400      	str	r4, [sp, #0]
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	4629      	mov	r1, r5
 8005ada:	4652      	mov	r2, sl
 8005adc:	4640      	mov	r0, r8
 8005ade:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005ae2:	f7ff fc61 	bl	80053a8 <ai_dict8_dot_array_f32>
 8005ae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ae8:	f84b 3b04 	str.w	r3, [fp], #4
 8005aec:	45b3      	cmp	fp, r6
 8005aee:	444d      	add	r5, r9
 8005af0:	d3f0      	bcc.n	8005ad4 <forward_dense+0x414>
 8005af2:	46a0      	mov	r8, r4
 8005af4:	e67b      	b.n	80057ee <forward_dense+0x12e>
 8005af6:	b011      	add	sp, #68	; 0x44
 8005af8:	ecbd 8b10 	vpop	{d8-d15}
 8005afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b00:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8005b04:	e624      	b.n	8005750 <forward_dense+0x90>
 8005b06:	2300      	movs	r3, #0
 8005b08:	9306      	str	r3, [sp, #24]
 8005b0a:	e603      	b.n	8005714 <forward_dense+0x54>
 8005b0c:	9308      	str	r3, [sp, #32]
 8005b0e:	e5f4      	b.n	80056fa <forward_dense+0x3a>

08005b10 <nl_func_relu_generic_array_f32>:
 8005b10:	b430      	push	{r4, r5}
 8005b12:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b16:	6880      	ldr	r0, [r0, #8]
 8005b18:	688c      	ldr	r4, [r1, #8]
 8005b1a:	ed93 7a00 	vldr	s14, [r3]
 8005b1e:	ed93 6a01 	vldr	s12, [r3, #4]
 8005b22:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005b26:	3a01      	subs	r2, #1
 8005b28:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005b2c:	0092      	lsls	r2, r2, #2
 8005b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b32:	4410      	add	r0, r2
 8005b34:	4422      	add	r2, r4
 8005b36:	d421      	bmi.n	8005b7c <nl_func_relu_generic_array_f32+0x6c>
 8005b38:	42a2      	cmp	r2, r4
 8005b3a:	d33d      	bcc.n	8005bb8 <nl_func_relu_generic_array_f32+0xa8>
 8005b3c:	1d13      	adds	r3, r2, #4
 8005b3e:	1d02      	adds	r2, r0, #4
 8005b40:	e010      	b.n	8005b64 <nl_func_relu_generic_array_f32+0x54>
 8005b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005b4e:	dd01      	ble.n	8005b54 <nl_func_relu_generic_array_f32+0x44>
 8005b50:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005b54:	ed62 7a01 	vstmdb	r2!, {s15}
 8005b58:	6888      	ldr	r0, [r1, #8]
 8005b5a:	f1a3 0408 	sub.w	r4, r3, #8
 8005b5e:	4284      	cmp	r4, r0
 8005b60:	462b      	mov	r3, r5
 8005b62:	d329      	bcc.n	8005bb8 <nl_func_relu_generic_array_f32+0xa8>
 8005b64:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005b68:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b70:	f1a3 0504 	sub.w	r5, r3, #4
 8005b74:	dce5      	bgt.n	8005b42 <nl_func_relu_generic_array_f32+0x32>
 8005b76:	eef0 7a66 	vmov.f32	s15, s13
 8005b7a:	e7eb      	b.n	8005b54 <nl_func_relu_generic_array_f32+0x44>
 8005b7c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b84:	d01a      	beq.n	8005bbc <nl_func_relu_generic_array_f32+0xac>
 8005b86:	42a2      	cmp	r2, r4
 8005b88:	d316      	bcc.n	8005bb8 <nl_func_relu_generic_array_f32+0xa8>
 8005b8a:	1d13      	adds	r3, r2, #4
 8005b8c:	1d02      	adds	r2, r0, #4
 8005b8e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005b92:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b9a:	f1a3 0408 	sub.w	r4, r3, #8
 8005b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba2:	f1a3 0004 	sub.w	r0, r3, #4
 8005ba6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005baa:	4623      	mov	r3, r4
 8005bac:	d51e      	bpl.n	8005bec <nl_func_relu_generic_array_f32+0xdc>
 8005bae:	ed62 6a01 	vstmdb	r2!, {s13}
 8005bb2:	688b      	ldr	r3, [r1, #8]
 8005bb4:	42a3      	cmp	r3, r4
 8005bb6:	d91e      	bls.n	8005bf6 <nl_func_relu_generic_array_f32+0xe6>
 8005bb8:	bc30      	pop	{r4, r5}
 8005bba:	4770      	bx	lr
 8005bbc:	42a2      	cmp	r2, r4
 8005bbe:	d3fb      	bcc.n	8005bb8 <nl_func_relu_generic_array_f32+0xa8>
 8005bc0:	1d13      	adds	r3, r2, #4
 8005bc2:	2500      	movs	r5, #0
 8005bc4:	1d02      	adds	r2, r0, #4
 8005bc6:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005bca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bce:	f1a3 0408 	sub.w	r4, r3, #8
 8005bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd6:	f1a3 0004 	sub.w	r0, r3, #4
 8005bda:	4623      	mov	r3, r4
 8005bdc:	d80d      	bhi.n	8005bfa <nl_func_relu_generic_array_f32+0xea>
 8005bde:	ed62 7a01 	vstmdb	r2!, {s15}
 8005be2:	688b      	ldr	r3, [r1, #8]
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	d8e7      	bhi.n	8005bb8 <nl_func_relu_generic_array_f32+0xa8>
 8005be8:	4603      	mov	r3, r0
 8005bea:	e7ec      	b.n	8005bc6 <nl_func_relu_generic_array_f32+0xb6>
 8005bec:	ed62 7a01 	vstmdb	r2!, {s15}
 8005bf0:	688c      	ldr	r4, [r1, #8]
 8005bf2:	429c      	cmp	r4, r3
 8005bf4:	d8e0      	bhi.n	8005bb8 <nl_func_relu_generic_array_f32+0xa8>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	e7c9      	b.n	8005b8e <nl_func_relu_generic_array_f32+0x7e>
 8005bfa:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005bfe:	688c      	ldr	r4, [r1, #8]
 8005c00:	429c      	cmp	r4, r3
 8005c02:	d8d9      	bhi.n	8005bb8 <nl_func_relu_generic_array_f32+0xa8>
 8005c04:	4603      	mov	r3, r0
 8005c06:	e7de      	b.n	8005bc6 <nl_func_relu_generic_array_f32+0xb6>

08005c08 <forward_relu>:
 8005c08:	6942      	ldr	r2, [r0, #20]
 8005c0a:	8813      	ldrh	r3, [r2, #0]
 8005c0c:	b33b      	cbz	r3, 8005c5e <forward_relu+0x56>
 8005c0e:	b470      	push	{r4, r5, r6}
 8005c10:	6852      	ldr	r2, [r2, #4]
 8005c12:	6856      	ldr	r6, [r2, #4]
 8005c14:	b106      	cbz	r6, 8005c18 <forward_relu+0x10>
 8005c16:	6836      	ldr	r6, [r6, #0]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d91d      	bls.n	8005c58 <forward_relu+0x50>
 8005c1c:	6913      	ldr	r3, [r2, #16]
 8005c1e:	b103      	cbz	r3, 8005c22 <forward_relu+0x1a>
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6982      	ldr	r2, [r0, #24]
 8005c24:	68b4      	ldr	r4, [r6, #8]
 8005c26:	6998      	ldr	r0, [r3, #24]
 8005c28:	69b1      	ldr	r1, [r6, #24]
 8005c2a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8005c2e:	2a00      	cmp	r2, #0
 8005c30:	d041      	beq.n	8005cb6 <forward_relu+0xae>
 8005c32:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8005c36:	2d01      	cmp	r5, #1
 8005c38:	d013      	beq.n	8005c62 <forward_relu+0x5a>
 8005c3a:	2c00      	cmp	r4, #0
 8005c3c:	d06f      	beq.n	8005d1e <forward_relu+0x116>
 8005c3e:	68f6      	ldr	r6, [r6, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005c46:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c4a:	42a6      	cmp	r6, r4
 8005c4c:	fb05 f202 	mul.w	r2, r5, r2
 8005c50:	d1f9      	bne.n	8005c46 <forward_relu+0x3e>
 8005c52:	bc70      	pop	{r4, r5, r6}
 8005c54:	f7ff bf5c 	b.w	8005b10 <nl_func_relu_generic_array_f32>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	deff      	udf	#255	; 0xff
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	deff      	udf	#255	; 0xff
 8005c62:	6880      	ldr	r0, [r0, #8]
 8005c64:	688a      	ldr	r2, [r1, #8]
 8005c66:	ed93 7a00 	vldr	s14, [r3]
 8005c6a:	b184      	cbz	r4, 8005c8e <forward_relu+0x86>
 8005c6c:	68f6      	ldr	r6, [r6, #12]
 8005c6e:	462b      	mov	r3, r5
 8005c70:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005c74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c78:	42a6      	cmp	r6, r4
 8005c7a:	fb05 f303 	mul.w	r3, r5, r3
 8005c7e:	d1f9      	bne.n	8005c74 <forward_relu+0x6c>
 8005c80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c84:	3b01      	subs	r3, #1
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	18d2      	adds	r2, r2, r3
 8005c8a:	4418      	add	r0, r3
 8005c8c:	d23d      	bcs.n	8005d0a <forward_relu+0x102>
 8005c8e:	1d13      	adds	r3, r2, #4
 8005c90:	2500      	movs	r5, #0
 8005c92:	1d02      	adds	r2, r0, #4
 8005c94:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005c98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca0:	f1a3 0004 	sub.w	r0, r3, #4
 8005ca4:	d833      	bhi.n	8005d0e <forward_relu+0x106>
 8005ca6:	ed62 7a01 	vstmdb	r2!, {s15}
 8005caa:	688c      	ldr	r4, [r1, #8]
 8005cac:	3b08      	subs	r3, #8
 8005cae:	429c      	cmp	r4, r3
 8005cb0:	d82b      	bhi.n	8005d0a <forward_relu+0x102>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	e7ee      	b.n	8005c94 <forward_relu+0x8c>
 8005cb6:	6880      	ldr	r0, [r0, #8]
 8005cb8:	688b      	ldr	r3, [r1, #8]
 8005cba:	b184      	cbz	r4, 8005cde <forward_relu+0xd6>
 8005cbc:	68f6      	ldr	r6, [r6, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005cc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005cc8:	42a6      	cmp	r6, r4
 8005cca:	fb05 f202 	mul.w	r2, r5, r2
 8005cce:	d1f9      	bne.n	8005cc4 <forward_relu+0xbc>
 8005cd0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005cd4:	3a01      	subs	r2, #1
 8005cd6:	0092      	lsls	r2, r2, #2
 8005cd8:	189b      	adds	r3, r3, r2
 8005cda:	4410      	add	r0, r2
 8005cdc:	d215      	bcs.n	8005d0a <forward_relu+0x102>
 8005cde:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005d24 <forward_relu+0x11c>
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	3004      	adds	r0, #4
 8005ce6:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005cea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf2:	bfb8      	it	lt
 8005cf4:	eef0 7a47 	vmovlt.f32	s15, s14
 8005cf8:	ed60 7a01 	vstmdb	r0!, {s15}
 8005cfc:	688c      	ldr	r4, [r1, #8]
 8005cfe:	f1a3 0208 	sub.w	r2, r3, #8
 8005d02:	4294      	cmp	r4, r2
 8005d04:	f1a3 0304 	sub.w	r3, r3, #4
 8005d08:	d9ed      	bls.n	8005ce6 <forward_relu+0xde>
 8005d0a:	bc70      	pop	{r4, r5, r6}
 8005d0c:	4770      	bx	lr
 8005d0e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005d12:	688c      	ldr	r4, [r1, #8]
 8005d14:	3b08      	subs	r3, #8
 8005d16:	429c      	cmp	r4, r3
 8005d18:	d8f7      	bhi.n	8005d0a <forward_relu+0x102>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	e7ba      	b.n	8005c94 <forward_relu+0x8c>
 8005d1e:	2201      	movs	r2, #1
 8005d20:	e797      	b.n	8005c52 <forward_relu+0x4a>
 8005d22:	bf00      	nop
 8005d24:	00000000 	.word	0x00000000

08005d28 <ai_check_custom_types>:
 8005d28:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <ai_check_custom_types+0x50>)
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	b118      	cbz	r0, 8005d3a <ai_check_custom_types+0x12>
 8005d32:	7803      	ldrb	r3, [r0, #0]
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d002      	beq.n	8005d3e <ai_check_custom_types+0x16>
 8005d38:	2000      	movs	r0, #0
 8005d3a:	b002      	add	sp, #8
 8005d3c:	4770      	bx	lr
 8005d3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d004      	beq.n	8005d50 <ai_check_custom_types+0x28>
 8005d46:	2001      	movs	r0, #1
 8005d48:	f080 0001 	eor.w	r0, r0, #1
 8005d4c:	b002      	add	sp, #8
 8005d4e:	4770      	bx	lr
 8005d50:	7842      	ldrb	r2, [r0, #1]
 8005d52:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	f100 0001 	add.w	r0, r0, #1
 8005d5c:	d1f3      	bne.n	8005d46 <ai_check_custom_types+0x1e>
 8005d5e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005d62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d1ed      	bne.n	8005d46 <ai_check_custom_types+0x1e>
 8005d6a:	7842      	ldrb	r2, [r0, #1]
 8005d6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d1e8      	bne.n	8005d46 <ai_check_custom_types+0x1e>
 8005d74:	2000      	movs	r0, #0
 8005d76:	e7e7      	b.n	8005d48 <ai_check_custom_types+0x20>
 8005d78:	08008d34 	.word	0x08008d34

08005d7c <ai_layers_forward_all>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8005d80:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8005d82:	4604      	mov	r4, r0
 8005d84:	b31e      	cbz	r6, 8005dce <ai_layers_forward_all+0x52>
 8005d86:	b1cd      	cbz	r5, 8005dbc <ai_layers_forward_all+0x40>
 8005d88:	6545      	str	r5, [r0, #84]	; 0x54
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005d8e:	2001      	movs	r0, #1
 8005d90:	47b0      	blx	r6
 8005d92:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005d94:	2700      	movs	r7, #0
 8005d96:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005d98:	2002      	movs	r0, #2
 8005d9a:	47b0      	blx	r6
 8005d9c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005d9e:	692b      	ldr	r3, [r5, #16]
 8005da0:	4628      	mov	r0, r5
 8005da2:	4798      	blx	r3
 8005da4:	68eb      	ldr	r3, [r5, #12]
 8005da6:	429d      	cmp	r5, r3
 8005da8:	f04f 0003 	mov.w	r0, #3
 8005dac:	4619      	mov	r1, r3
 8005dae:	d006      	beq.n	8005dbe <ai_layers_forward_all+0x42>
 8005db0:	6563      	str	r3, [r4, #84]	; 0x54
 8005db2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005db4:	47b0      	blx	r6
 8005db6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005db8:	2900      	cmp	r1, #0
 8005dba:	d1ec      	bne.n	8005d96 <ai_layers_forward_all+0x1a>
 8005dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	6567      	str	r7, [r4, #84]	; 0x54
 8005dc2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005dc4:	47b0      	blx	r6
 8005dc6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	d1e4      	bne.n	8005d96 <ai_layers_forward_all+0x1a>
 8005dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dce:	2d00      	cmp	r5, #0
 8005dd0:	d0f4      	beq.n	8005dbc <ai_layers_forward_all+0x40>
 8005dd2:	6545      	str	r5, [r0, #84]	; 0x54
 8005dd4:	692b      	ldr	r3, [r5, #16]
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	4798      	blx	r3
 8005dda:	68eb      	ldr	r3, [r5, #12]
 8005ddc:	42ab      	cmp	r3, r5
 8005dde:	d004      	beq.n	8005dea <ai_layers_forward_all+0x6e>
 8005de0:	6563      	str	r3, [r4, #84]	; 0x54
 8005de2:	461d      	mov	r5, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1f5      	bne.n	8005dd4 <ai_layers_forward_all+0x58>
 8005de8:	e7e8      	b.n	8005dbc <ai_layers_forward_all+0x40>
 8005dea:	2300      	movs	r3, #0
 8005dec:	6563      	str	r3, [r4, #84]	; 0x54
 8005dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005df0 <ai_array_to_buffer_fmt>:
 8005df0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d01f      	beq.n	8005e38 <ai_array_to_buffer_fmt+0x48>
 8005df8:	4a1c      	ldr	r2, [pc, #112]	; (8005e6c <ai_array_to_buffer_fmt+0x7c>)
 8005dfa:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00a      	beq.n	8005e18 <ai_array_to_buffer_fmt+0x28>
 8005e02:	dc0d      	bgt.n	8005e20 <ai_array_to_buffer_fmt+0x30>
 8005e04:	4a1a      	ldr	r2, [pc, #104]	; (8005e70 <ai_array_to_buffer_fmt+0x80>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d006      	beq.n	8005e18 <ai_array_to_buffer_fmt+0x28>
 8005e0a:	dd1d      	ble.n	8005e48 <ai_array_to_buffer_fmt+0x58>
 8005e0c:	4a19      	ldr	r2, [pc, #100]	; (8005e74 <ai_array_to_buffer_fmt+0x84>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d002      	beq.n	8005e18 <ai_array_to_buffer_fmt+0x28>
 8005e12:	320f      	adds	r2, #15
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d10d      	bne.n	8005e34 <ai_array_to_buffer_fmt+0x44>
 8005e18:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005e1c:	4318      	orrs	r0, r3
 8005e1e:	4770      	bx	lr
 8005e20:	4a15      	ldr	r2, [pc, #84]	; (8005e78 <ai_array_to_buffer_fmt+0x88>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d0f8      	beq.n	8005e18 <ai_array_to_buffer_fmt+0x28>
 8005e26:	dd18      	ble.n	8005e5a <ai_array_to_buffer_fmt+0x6a>
 8005e28:	4a14      	ldr	r2, [pc, #80]	; (8005e7c <ai_array_to_buffer_fmt+0x8c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d0f4      	beq.n	8005e18 <ai_array_to_buffer_fmt+0x28>
 8005e2e:	4a14      	ldr	r2, [pc, #80]	; (8005e80 <ai_array_to_buffer_fmt+0x90>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d0f1      	beq.n	8005e18 <ai_array_to_buffer_fmt+0x28>
 8005e34:	2340      	movs	r3, #64	; 0x40
 8005e36:	e7ef      	b.n	8005e18 <ai_array_to_buffer_fmt+0x28>
 8005e38:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <ai_array_to_buffer_fmt+0x94>)
 8005e3a:	4003      	ands	r3, r0
 8005e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e40:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005e44:	4318      	orrs	r0, r3
 8005e46:	4770      	bx	lr
 8005e48:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d0e3      	beq.n	8005e18 <ai_array_to_buffer_fmt+0x28>
 8005e50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d0df      	beq.n	8005e18 <ai_array_to_buffer_fmt+0x28>
 8005e58:	e7ec      	b.n	8005e34 <ai_array_to_buffer_fmt+0x44>
 8005e5a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d0da      	beq.n	8005e18 <ai_array_to_buffer_fmt+0x28>
 8005e62:	3207      	adds	r2, #7
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d0d7      	beq.n	8005e18 <ai_array_to_buffer_fmt+0x28>
 8005e68:	e7e4      	b.n	8005e34 <ai_array_to_buffer_fmt+0x44>
 8005e6a:	bf00      	nop
 8005e6c:	00840040 	.word	0x00840040
 8005e70:	00040447 	.word	0x00040447
 8005e74:	00040840 	.word	0x00040840
 8005e78:	00840840 	.word	0x00840840
 8005e7c:	0084084f 	.word	0x0084084f
 8005e80:	01821040 	.word	0x01821040
 8005e84:	00803fff 	.word	0x00803fff

08005e88 <ai_array_get_byte_size>:
 8005e88:	b1c1      	cbz	r1, 8005ebc <ai_array_get_byte_size+0x34>
 8005e8a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8005e8e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005e92:	4413      	add	r3, r2
 8005e94:	fb01 f103 	mul.w	r1, r1, r3
 8005e98:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8005e9c:	3107      	adds	r1, #7
 8005e9e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8005ea2:	f021 0107 	bic.w	r1, r1, #7
 8005ea6:	2804      	cmp	r0, #4
 8005ea8:	fa21 f102 	lsr.w	r1, r1, r2
 8005eac:	d008      	beq.n	8005ec0 <ai_array_get_byte_size+0x38>
 8005eae:	2808      	cmp	r0, #8
 8005eb0:	d101      	bne.n	8005eb6 <ai_array_get_byte_size+0x2e>
 8005eb2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8005eb6:	3107      	adds	r1, #7
 8005eb8:	08c8      	lsrs	r0, r1, #3
 8005eba:	4770      	bx	lr
 8005ebc:	4608      	mov	r0, r1
 8005ebe:	4770      	bx	lr
 8005ec0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8005ec4:	3107      	adds	r1, #7
 8005ec6:	08c8      	lsrs	r0, r1, #3
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop

08005ecc <__errno>:
 8005ecc:	4b01      	ldr	r3, [pc, #4]	; (8005ed4 <__errno+0x8>)
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	200005e4 	.word	0x200005e4

08005ed8 <__libc_init_array>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	4d0d      	ldr	r5, [pc, #52]	; (8005f10 <__libc_init_array+0x38>)
 8005edc:	4c0d      	ldr	r4, [pc, #52]	; (8005f14 <__libc_init_array+0x3c>)
 8005ede:	1b64      	subs	r4, r4, r5
 8005ee0:	10a4      	asrs	r4, r4, #2
 8005ee2:	2600      	movs	r6, #0
 8005ee4:	42a6      	cmp	r6, r4
 8005ee6:	d109      	bne.n	8005efc <__libc_init_array+0x24>
 8005ee8:	4d0b      	ldr	r5, [pc, #44]	; (8005f18 <__libc_init_array+0x40>)
 8005eea:	4c0c      	ldr	r4, [pc, #48]	; (8005f1c <__libc_init_array+0x44>)
 8005eec:	f002 feb4 	bl	8008c58 <_init>
 8005ef0:	1b64      	subs	r4, r4, r5
 8005ef2:	10a4      	asrs	r4, r4, #2
 8005ef4:	2600      	movs	r6, #0
 8005ef6:	42a6      	cmp	r6, r4
 8005ef8:	d105      	bne.n	8005f06 <__libc_init_array+0x2e>
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
 8005efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f00:	4798      	blx	r3
 8005f02:	3601      	adds	r6, #1
 8005f04:	e7ee      	b.n	8005ee4 <__libc_init_array+0xc>
 8005f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f0a:	4798      	blx	r3
 8005f0c:	3601      	adds	r6, #1
 8005f0e:	e7f2      	b.n	8005ef6 <__libc_init_array+0x1e>
 8005f10:	0800bbec 	.word	0x0800bbec
 8005f14:	0800bbec 	.word	0x0800bbec
 8005f18:	0800bbec 	.word	0x0800bbec
 8005f1c:	0800bbf0 	.word	0x0800bbf0

08005f20 <malloc>:
 8005f20:	4b02      	ldr	r3, [pc, #8]	; (8005f2c <malloc+0xc>)
 8005f22:	4601      	mov	r1, r0
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	f000 b869 	b.w	8005ffc <_malloc_r>
 8005f2a:	bf00      	nop
 8005f2c:	200005e4 	.word	0x200005e4

08005f30 <memcpy>:
 8005f30:	440a      	add	r2, r1
 8005f32:	4291      	cmp	r1, r2
 8005f34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f38:	d100      	bne.n	8005f3c <memcpy+0xc>
 8005f3a:	4770      	bx	lr
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f46:	4291      	cmp	r1, r2
 8005f48:	d1f9      	bne.n	8005f3e <memcpy+0xe>
 8005f4a:	bd10      	pop	{r4, pc}

08005f4c <memset>:
 8005f4c:	4402      	add	r2, r0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d100      	bne.n	8005f56 <memset+0xa>
 8005f54:	4770      	bx	lr
 8005f56:	f803 1b01 	strb.w	r1, [r3], #1
 8005f5a:	e7f9      	b.n	8005f50 <memset+0x4>

08005f5c <_free_r>:
 8005f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f5e:	2900      	cmp	r1, #0
 8005f60:	d048      	beq.n	8005ff4 <_free_r+0x98>
 8005f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f66:	9001      	str	r0, [sp, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f6e:	bfb8      	it	lt
 8005f70:	18e4      	addlt	r4, r4, r3
 8005f72:	f001 fbb5 	bl	80076e0 <__malloc_lock>
 8005f76:	4a20      	ldr	r2, [pc, #128]	; (8005ff8 <_free_r+0x9c>)
 8005f78:	9801      	ldr	r0, [sp, #4]
 8005f7a:	6813      	ldr	r3, [r2, #0]
 8005f7c:	4615      	mov	r5, r2
 8005f7e:	b933      	cbnz	r3, 8005f8e <_free_r+0x32>
 8005f80:	6063      	str	r3, [r4, #4]
 8005f82:	6014      	str	r4, [r2, #0]
 8005f84:	b003      	add	sp, #12
 8005f86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f8a:	f001 bbaf 	b.w	80076ec <__malloc_unlock>
 8005f8e:	42a3      	cmp	r3, r4
 8005f90:	d90b      	bls.n	8005faa <_free_r+0x4e>
 8005f92:	6821      	ldr	r1, [r4, #0]
 8005f94:	1862      	adds	r2, r4, r1
 8005f96:	4293      	cmp	r3, r2
 8005f98:	bf04      	itt	eq
 8005f9a:	681a      	ldreq	r2, [r3, #0]
 8005f9c:	685b      	ldreq	r3, [r3, #4]
 8005f9e:	6063      	str	r3, [r4, #4]
 8005fa0:	bf04      	itt	eq
 8005fa2:	1852      	addeq	r2, r2, r1
 8005fa4:	6022      	streq	r2, [r4, #0]
 8005fa6:	602c      	str	r4, [r5, #0]
 8005fa8:	e7ec      	b.n	8005f84 <_free_r+0x28>
 8005faa:	461a      	mov	r2, r3
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	b10b      	cbz	r3, 8005fb4 <_free_r+0x58>
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	d9fa      	bls.n	8005faa <_free_r+0x4e>
 8005fb4:	6811      	ldr	r1, [r2, #0]
 8005fb6:	1855      	adds	r5, r2, r1
 8005fb8:	42a5      	cmp	r5, r4
 8005fba:	d10b      	bne.n	8005fd4 <_free_r+0x78>
 8005fbc:	6824      	ldr	r4, [r4, #0]
 8005fbe:	4421      	add	r1, r4
 8005fc0:	1854      	adds	r4, r2, r1
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	6011      	str	r1, [r2, #0]
 8005fc6:	d1dd      	bne.n	8005f84 <_free_r+0x28>
 8005fc8:	681c      	ldr	r4, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	6053      	str	r3, [r2, #4]
 8005fce:	4421      	add	r1, r4
 8005fd0:	6011      	str	r1, [r2, #0]
 8005fd2:	e7d7      	b.n	8005f84 <_free_r+0x28>
 8005fd4:	d902      	bls.n	8005fdc <_free_r+0x80>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	6003      	str	r3, [r0, #0]
 8005fda:	e7d3      	b.n	8005f84 <_free_r+0x28>
 8005fdc:	6825      	ldr	r5, [r4, #0]
 8005fde:	1961      	adds	r1, r4, r5
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	bf04      	itt	eq
 8005fe4:	6819      	ldreq	r1, [r3, #0]
 8005fe6:	685b      	ldreq	r3, [r3, #4]
 8005fe8:	6063      	str	r3, [r4, #4]
 8005fea:	bf04      	itt	eq
 8005fec:	1949      	addeq	r1, r1, r5
 8005fee:	6021      	streq	r1, [r4, #0]
 8005ff0:	6054      	str	r4, [r2, #4]
 8005ff2:	e7c7      	b.n	8005f84 <_free_r+0x28>
 8005ff4:	b003      	add	sp, #12
 8005ff6:	bd30      	pop	{r4, r5, pc}
 8005ff8:	20000850 	.word	0x20000850

08005ffc <_malloc_r>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	1ccd      	adds	r5, r1, #3
 8006000:	f025 0503 	bic.w	r5, r5, #3
 8006004:	3508      	adds	r5, #8
 8006006:	2d0c      	cmp	r5, #12
 8006008:	bf38      	it	cc
 800600a:	250c      	movcc	r5, #12
 800600c:	2d00      	cmp	r5, #0
 800600e:	4606      	mov	r6, r0
 8006010:	db01      	blt.n	8006016 <_malloc_r+0x1a>
 8006012:	42a9      	cmp	r1, r5
 8006014:	d903      	bls.n	800601e <_malloc_r+0x22>
 8006016:	230c      	movs	r3, #12
 8006018:	6033      	str	r3, [r6, #0]
 800601a:	2000      	movs	r0, #0
 800601c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800601e:	f001 fb5f 	bl	80076e0 <__malloc_lock>
 8006022:	4921      	ldr	r1, [pc, #132]	; (80060a8 <_malloc_r+0xac>)
 8006024:	680a      	ldr	r2, [r1, #0]
 8006026:	4614      	mov	r4, r2
 8006028:	b99c      	cbnz	r4, 8006052 <_malloc_r+0x56>
 800602a:	4f20      	ldr	r7, [pc, #128]	; (80060ac <_malloc_r+0xb0>)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	b923      	cbnz	r3, 800603a <_malloc_r+0x3e>
 8006030:	4621      	mov	r1, r4
 8006032:	4630      	mov	r0, r6
 8006034:	f000 fca6 	bl	8006984 <_sbrk_r>
 8006038:	6038      	str	r0, [r7, #0]
 800603a:	4629      	mov	r1, r5
 800603c:	4630      	mov	r0, r6
 800603e:	f000 fca1 	bl	8006984 <_sbrk_r>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	d123      	bne.n	800608e <_malloc_r+0x92>
 8006046:	230c      	movs	r3, #12
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	4630      	mov	r0, r6
 800604c:	f001 fb4e 	bl	80076ec <__malloc_unlock>
 8006050:	e7e3      	b.n	800601a <_malloc_r+0x1e>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	1b5b      	subs	r3, r3, r5
 8006056:	d417      	bmi.n	8006088 <_malloc_r+0x8c>
 8006058:	2b0b      	cmp	r3, #11
 800605a:	d903      	bls.n	8006064 <_malloc_r+0x68>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	441c      	add	r4, r3
 8006060:	6025      	str	r5, [r4, #0]
 8006062:	e004      	b.n	800606e <_malloc_r+0x72>
 8006064:	6863      	ldr	r3, [r4, #4]
 8006066:	42a2      	cmp	r2, r4
 8006068:	bf0c      	ite	eq
 800606a:	600b      	streq	r3, [r1, #0]
 800606c:	6053      	strne	r3, [r2, #4]
 800606e:	4630      	mov	r0, r6
 8006070:	f001 fb3c 	bl	80076ec <__malloc_unlock>
 8006074:	f104 000b 	add.w	r0, r4, #11
 8006078:	1d23      	adds	r3, r4, #4
 800607a:	f020 0007 	bic.w	r0, r0, #7
 800607e:	1ac2      	subs	r2, r0, r3
 8006080:	d0cc      	beq.n	800601c <_malloc_r+0x20>
 8006082:	1a1b      	subs	r3, r3, r0
 8006084:	50a3      	str	r3, [r4, r2]
 8006086:	e7c9      	b.n	800601c <_malloc_r+0x20>
 8006088:	4622      	mov	r2, r4
 800608a:	6864      	ldr	r4, [r4, #4]
 800608c:	e7cc      	b.n	8006028 <_malloc_r+0x2c>
 800608e:	1cc4      	adds	r4, r0, #3
 8006090:	f024 0403 	bic.w	r4, r4, #3
 8006094:	42a0      	cmp	r0, r4
 8006096:	d0e3      	beq.n	8006060 <_malloc_r+0x64>
 8006098:	1a21      	subs	r1, r4, r0
 800609a:	4630      	mov	r0, r6
 800609c:	f000 fc72 	bl	8006984 <_sbrk_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d1dd      	bne.n	8006060 <_malloc_r+0x64>
 80060a4:	e7cf      	b.n	8006046 <_malloc_r+0x4a>
 80060a6:	bf00      	nop
 80060a8:	20000850 	.word	0x20000850
 80060ac:	20000854 	.word	0x20000854

080060b0 <__cvt>:
 80060b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b4:	ec55 4b10 	vmov	r4, r5, d0
 80060b8:	2d00      	cmp	r5, #0
 80060ba:	460e      	mov	r6, r1
 80060bc:	4619      	mov	r1, r3
 80060be:	462b      	mov	r3, r5
 80060c0:	bfbb      	ittet	lt
 80060c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80060c6:	461d      	movlt	r5, r3
 80060c8:	2300      	movge	r3, #0
 80060ca:	232d      	movlt	r3, #45	; 0x2d
 80060cc:	700b      	strb	r3, [r1, #0]
 80060ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80060d4:	4691      	mov	r9, r2
 80060d6:	f023 0820 	bic.w	r8, r3, #32
 80060da:	bfbc      	itt	lt
 80060dc:	4622      	movlt	r2, r4
 80060de:	4614      	movlt	r4, r2
 80060e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060e4:	d005      	beq.n	80060f2 <__cvt+0x42>
 80060e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060ea:	d100      	bne.n	80060ee <__cvt+0x3e>
 80060ec:	3601      	adds	r6, #1
 80060ee:	2102      	movs	r1, #2
 80060f0:	e000      	b.n	80060f4 <__cvt+0x44>
 80060f2:	2103      	movs	r1, #3
 80060f4:	ab03      	add	r3, sp, #12
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	ab02      	add	r3, sp, #8
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	ec45 4b10 	vmov	d0, r4, r5
 8006100:	4653      	mov	r3, sl
 8006102:	4632      	mov	r2, r6
 8006104:	f000 fcfc 	bl	8006b00 <_dtoa_r>
 8006108:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800610c:	4607      	mov	r7, r0
 800610e:	d102      	bne.n	8006116 <__cvt+0x66>
 8006110:	f019 0f01 	tst.w	r9, #1
 8006114:	d022      	beq.n	800615c <__cvt+0xac>
 8006116:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800611a:	eb07 0906 	add.w	r9, r7, r6
 800611e:	d110      	bne.n	8006142 <__cvt+0x92>
 8006120:	783b      	ldrb	r3, [r7, #0]
 8006122:	2b30      	cmp	r3, #48	; 0x30
 8006124:	d10a      	bne.n	800613c <__cvt+0x8c>
 8006126:	2200      	movs	r2, #0
 8006128:	2300      	movs	r3, #0
 800612a:	4620      	mov	r0, r4
 800612c:	4629      	mov	r1, r5
 800612e:	f7fa fce3 	bl	8000af8 <__aeabi_dcmpeq>
 8006132:	b918      	cbnz	r0, 800613c <__cvt+0x8c>
 8006134:	f1c6 0601 	rsb	r6, r6, #1
 8006138:	f8ca 6000 	str.w	r6, [sl]
 800613c:	f8da 3000 	ldr.w	r3, [sl]
 8006140:	4499      	add	r9, r3
 8006142:	2200      	movs	r2, #0
 8006144:	2300      	movs	r3, #0
 8006146:	4620      	mov	r0, r4
 8006148:	4629      	mov	r1, r5
 800614a:	f7fa fcd5 	bl	8000af8 <__aeabi_dcmpeq>
 800614e:	b108      	cbz	r0, 8006154 <__cvt+0xa4>
 8006150:	f8cd 900c 	str.w	r9, [sp, #12]
 8006154:	2230      	movs	r2, #48	; 0x30
 8006156:	9b03      	ldr	r3, [sp, #12]
 8006158:	454b      	cmp	r3, r9
 800615a:	d307      	bcc.n	800616c <__cvt+0xbc>
 800615c:	9b03      	ldr	r3, [sp, #12]
 800615e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006160:	1bdb      	subs	r3, r3, r7
 8006162:	4638      	mov	r0, r7
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	b004      	add	sp, #16
 8006168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616c:	1c59      	adds	r1, r3, #1
 800616e:	9103      	str	r1, [sp, #12]
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	e7f0      	b.n	8006156 <__cvt+0xa6>

08006174 <__exponent>:
 8006174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006176:	4603      	mov	r3, r0
 8006178:	2900      	cmp	r1, #0
 800617a:	bfb8      	it	lt
 800617c:	4249      	neglt	r1, r1
 800617e:	f803 2b02 	strb.w	r2, [r3], #2
 8006182:	bfb4      	ite	lt
 8006184:	222d      	movlt	r2, #45	; 0x2d
 8006186:	222b      	movge	r2, #43	; 0x2b
 8006188:	2909      	cmp	r1, #9
 800618a:	7042      	strb	r2, [r0, #1]
 800618c:	dd2a      	ble.n	80061e4 <__exponent+0x70>
 800618e:	f10d 0407 	add.w	r4, sp, #7
 8006192:	46a4      	mov	ip, r4
 8006194:	270a      	movs	r7, #10
 8006196:	46a6      	mov	lr, r4
 8006198:	460a      	mov	r2, r1
 800619a:	fb91 f6f7 	sdiv	r6, r1, r7
 800619e:	fb07 1516 	mls	r5, r7, r6, r1
 80061a2:	3530      	adds	r5, #48	; 0x30
 80061a4:	2a63      	cmp	r2, #99	; 0x63
 80061a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80061aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80061ae:	4631      	mov	r1, r6
 80061b0:	dcf1      	bgt.n	8006196 <__exponent+0x22>
 80061b2:	3130      	adds	r1, #48	; 0x30
 80061b4:	f1ae 0502 	sub.w	r5, lr, #2
 80061b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80061bc:	1c44      	adds	r4, r0, #1
 80061be:	4629      	mov	r1, r5
 80061c0:	4561      	cmp	r1, ip
 80061c2:	d30a      	bcc.n	80061da <__exponent+0x66>
 80061c4:	f10d 0209 	add.w	r2, sp, #9
 80061c8:	eba2 020e 	sub.w	r2, r2, lr
 80061cc:	4565      	cmp	r5, ip
 80061ce:	bf88      	it	hi
 80061d0:	2200      	movhi	r2, #0
 80061d2:	4413      	add	r3, r2
 80061d4:	1a18      	subs	r0, r3, r0
 80061d6:	b003      	add	sp, #12
 80061d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80061e2:	e7ed      	b.n	80061c0 <__exponent+0x4c>
 80061e4:	2330      	movs	r3, #48	; 0x30
 80061e6:	3130      	adds	r1, #48	; 0x30
 80061e8:	7083      	strb	r3, [r0, #2]
 80061ea:	70c1      	strb	r1, [r0, #3]
 80061ec:	1d03      	adds	r3, r0, #4
 80061ee:	e7f1      	b.n	80061d4 <__exponent+0x60>

080061f0 <_printf_float>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	ed2d 8b02 	vpush	{d8}
 80061f8:	b08d      	sub	sp, #52	; 0x34
 80061fa:	460c      	mov	r4, r1
 80061fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006200:	4616      	mov	r6, r2
 8006202:	461f      	mov	r7, r3
 8006204:	4605      	mov	r5, r0
 8006206:	f001 fa67 	bl	80076d8 <_localeconv_r>
 800620a:	f8d0 a000 	ldr.w	sl, [r0]
 800620e:	4650      	mov	r0, sl
 8006210:	f7f9 fff6 	bl	8000200 <strlen>
 8006214:	2300      	movs	r3, #0
 8006216:	930a      	str	r3, [sp, #40]	; 0x28
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	9305      	str	r3, [sp, #20]
 800621c:	f8d8 3000 	ldr.w	r3, [r8]
 8006220:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006224:	3307      	adds	r3, #7
 8006226:	f023 0307 	bic.w	r3, r3, #7
 800622a:	f103 0208 	add.w	r2, r3, #8
 800622e:	f8c8 2000 	str.w	r2, [r8]
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800623a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800623e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006242:	9307      	str	r3, [sp, #28]
 8006244:	f8cd 8018 	str.w	r8, [sp, #24]
 8006248:	ee08 0a10 	vmov	s16, r0
 800624c:	4b9f      	ldr	r3, [pc, #636]	; (80064cc <_printf_float+0x2dc>)
 800624e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006252:	f04f 32ff 	mov.w	r2, #4294967295
 8006256:	f7fa fc81 	bl	8000b5c <__aeabi_dcmpun>
 800625a:	bb88      	cbnz	r0, 80062c0 <_printf_float+0xd0>
 800625c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006260:	4b9a      	ldr	r3, [pc, #616]	; (80064cc <_printf_float+0x2dc>)
 8006262:	f04f 32ff 	mov.w	r2, #4294967295
 8006266:	f7fa fc5b 	bl	8000b20 <__aeabi_dcmple>
 800626a:	bb48      	cbnz	r0, 80062c0 <_printf_float+0xd0>
 800626c:	2200      	movs	r2, #0
 800626e:	2300      	movs	r3, #0
 8006270:	4640      	mov	r0, r8
 8006272:	4649      	mov	r1, r9
 8006274:	f7fa fc4a 	bl	8000b0c <__aeabi_dcmplt>
 8006278:	b110      	cbz	r0, 8006280 <_printf_float+0x90>
 800627a:	232d      	movs	r3, #45	; 0x2d
 800627c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006280:	4b93      	ldr	r3, [pc, #588]	; (80064d0 <_printf_float+0x2e0>)
 8006282:	4894      	ldr	r0, [pc, #592]	; (80064d4 <_printf_float+0x2e4>)
 8006284:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006288:	bf94      	ite	ls
 800628a:	4698      	movls	r8, r3
 800628c:	4680      	movhi	r8, r0
 800628e:	2303      	movs	r3, #3
 8006290:	6123      	str	r3, [r4, #16]
 8006292:	9b05      	ldr	r3, [sp, #20]
 8006294:	f023 0204 	bic.w	r2, r3, #4
 8006298:	6022      	str	r2, [r4, #0]
 800629a:	f04f 0900 	mov.w	r9, #0
 800629e:	9700      	str	r7, [sp, #0]
 80062a0:	4633      	mov	r3, r6
 80062a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80062a4:	4621      	mov	r1, r4
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 f9d8 	bl	800665c <_printf_common>
 80062ac:	3001      	adds	r0, #1
 80062ae:	f040 8090 	bne.w	80063d2 <_printf_float+0x1e2>
 80062b2:	f04f 30ff 	mov.w	r0, #4294967295
 80062b6:	b00d      	add	sp, #52	; 0x34
 80062b8:	ecbd 8b02 	vpop	{d8}
 80062bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	4649      	mov	r1, r9
 80062c8:	f7fa fc48 	bl	8000b5c <__aeabi_dcmpun>
 80062cc:	b140      	cbz	r0, 80062e0 <_printf_float+0xf0>
 80062ce:	464b      	mov	r3, r9
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bfbc      	itt	lt
 80062d4:	232d      	movlt	r3, #45	; 0x2d
 80062d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062da:	487f      	ldr	r0, [pc, #508]	; (80064d8 <_printf_float+0x2e8>)
 80062dc:	4b7f      	ldr	r3, [pc, #508]	; (80064dc <_printf_float+0x2ec>)
 80062de:	e7d1      	b.n	8006284 <_printf_float+0x94>
 80062e0:	6863      	ldr	r3, [r4, #4]
 80062e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80062e6:	9206      	str	r2, [sp, #24]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	d13f      	bne.n	800636c <_printf_float+0x17c>
 80062ec:	2306      	movs	r3, #6
 80062ee:	6063      	str	r3, [r4, #4]
 80062f0:	9b05      	ldr	r3, [sp, #20]
 80062f2:	6861      	ldr	r1, [r4, #4]
 80062f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80062f8:	2300      	movs	r3, #0
 80062fa:	9303      	str	r3, [sp, #12]
 80062fc:	ab0a      	add	r3, sp, #40	; 0x28
 80062fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006302:	ab09      	add	r3, sp, #36	; 0x24
 8006304:	ec49 8b10 	vmov	d0, r8, r9
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	6022      	str	r2, [r4, #0]
 800630c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006310:	4628      	mov	r0, r5
 8006312:	f7ff fecd 	bl	80060b0 <__cvt>
 8006316:	9b06      	ldr	r3, [sp, #24]
 8006318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800631a:	2b47      	cmp	r3, #71	; 0x47
 800631c:	4680      	mov	r8, r0
 800631e:	d108      	bne.n	8006332 <_printf_float+0x142>
 8006320:	1cc8      	adds	r0, r1, #3
 8006322:	db02      	blt.n	800632a <_printf_float+0x13a>
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	4299      	cmp	r1, r3
 8006328:	dd41      	ble.n	80063ae <_printf_float+0x1be>
 800632a:	f1ab 0b02 	sub.w	fp, fp, #2
 800632e:	fa5f fb8b 	uxtb.w	fp, fp
 8006332:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006336:	d820      	bhi.n	800637a <_printf_float+0x18a>
 8006338:	3901      	subs	r1, #1
 800633a:	465a      	mov	r2, fp
 800633c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006340:	9109      	str	r1, [sp, #36]	; 0x24
 8006342:	f7ff ff17 	bl	8006174 <__exponent>
 8006346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006348:	1813      	adds	r3, r2, r0
 800634a:	2a01      	cmp	r2, #1
 800634c:	4681      	mov	r9, r0
 800634e:	6123      	str	r3, [r4, #16]
 8006350:	dc02      	bgt.n	8006358 <_printf_float+0x168>
 8006352:	6822      	ldr	r2, [r4, #0]
 8006354:	07d2      	lsls	r2, r2, #31
 8006356:	d501      	bpl.n	800635c <_printf_float+0x16c>
 8006358:	3301      	adds	r3, #1
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006360:	2b00      	cmp	r3, #0
 8006362:	d09c      	beq.n	800629e <_printf_float+0xae>
 8006364:	232d      	movs	r3, #45	; 0x2d
 8006366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800636a:	e798      	b.n	800629e <_printf_float+0xae>
 800636c:	9a06      	ldr	r2, [sp, #24]
 800636e:	2a47      	cmp	r2, #71	; 0x47
 8006370:	d1be      	bne.n	80062f0 <_printf_float+0x100>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1bc      	bne.n	80062f0 <_printf_float+0x100>
 8006376:	2301      	movs	r3, #1
 8006378:	e7b9      	b.n	80062ee <_printf_float+0xfe>
 800637a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800637e:	d118      	bne.n	80063b2 <_printf_float+0x1c2>
 8006380:	2900      	cmp	r1, #0
 8006382:	6863      	ldr	r3, [r4, #4]
 8006384:	dd0b      	ble.n	800639e <_printf_float+0x1ae>
 8006386:	6121      	str	r1, [r4, #16]
 8006388:	b913      	cbnz	r3, 8006390 <_printf_float+0x1a0>
 800638a:	6822      	ldr	r2, [r4, #0]
 800638c:	07d0      	lsls	r0, r2, #31
 800638e:	d502      	bpl.n	8006396 <_printf_float+0x1a6>
 8006390:	3301      	adds	r3, #1
 8006392:	440b      	add	r3, r1
 8006394:	6123      	str	r3, [r4, #16]
 8006396:	65a1      	str	r1, [r4, #88]	; 0x58
 8006398:	f04f 0900 	mov.w	r9, #0
 800639c:	e7de      	b.n	800635c <_printf_float+0x16c>
 800639e:	b913      	cbnz	r3, 80063a6 <_printf_float+0x1b6>
 80063a0:	6822      	ldr	r2, [r4, #0]
 80063a2:	07d2      	lsls	r2, r2, #31
 80063a4:	d501      	bpl.n	80063aa <_printf_float+0x1ba>
 80063a6:	3302      	adds	r3, #2
 80063a8:	e7f4      	b.n	8006394 <_printf_float+0x1a4>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e7f2      	b.n	8006394 <_printf_float+0x1a4>
 80063ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80063b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063b4:	4299      	cmp	r1, r3
 80063b6:	db05      	blt.n	80063c4 <_printf_float+0x1d4>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	6121      	str	r1, [r4, #16]
 80063bc:	07d8      	lsls	r0, r3, #31
 80063be:	d5ea      	bpl.n	8006396 <_printf_float+0x1a6>
 80063c0:	1c4b      	adds	r3, r1, #1
 80063c2:	e7e7      	b.n	8006394 <_printf_float+0x1a4>
 80063c4:	2900      	cmp	r1, #0
 80063c6:	bfd4      	ite	le
 80063c8:	f1c1 0202 	rsble	r2, r1, #2
 80063cc:	2201      	movgt	r2, #1
 80063ce:	4413      	add	r3, r2
 80063d0:	e7e0      	b.n	8006394 <_printf_float+0x1a4>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	055a      	lsls	r2, r3, #21
 80063d6:	d407      	bmi.n	80063e8 <_printf_float+0x1f8>
 80063d8:	6923      	ldr	r3, [r4, #16]
 80063da:	4642      	mov	r2, r8
 80063dc:	4631      	mov	r1, r6
 80063de:	4628      	mov	r0, r5
 80063e0:	47b8      	blx	r7
 80063e2:	3001      	adds	r0, #1
 80063e4:	d12c      	bne.n	8006440 <_printf_float+0x250>
 80063e6:	e764      	b.n	80062b2 <_printf_float+0xc2>
 80063e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063ec:	f240 80e0 	bls.w	80065b0 <_printf_float+0x3c0>
 80063f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063f4:	2200      	movs	r2, #0
 80063f6:	2300      	movs	r3, #0
 80063f8:	f7fa fb7e 	bl	8000af8 <__aeabi_dcmpeq>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d034      	beq.n	800646a <_printf_float+0x27a>
 8006400:	4a37      	ldr	r2, [pc, #220]	; (80064e0 <_printf_float+0x2f0>)
 8006402:	2301      	movs	r3, #1
 8006404:	4631      	mov	r1, r6
 8006406:	4628      	mov	r0, r5
 8006408:	47b8      	blx	r7
 800640a:	3001      	adds	r0, #1
 800640c:	f43f af51 	beq.w	80062b2 <_printf_float+0xc2>
 8006410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006414:	429a      	cmp	r2, r3
 8006416:	db02      	blt.n	800641e <_printf_float+0x22e>
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	07d8      	lsls	r0, r3, #31
 800641c:	d510      	bpl.n	8006440 <_printf_float+0x250>
 800641e:	ee18 3a10 	vmov	r3, s16
 8006422:	4652      	mov	r2, sl
 8006424:	4631      	mov	r1, r6
 8006426:	4628      	mov	r0, r5
 8006428:	47b8      	blx	r7
 800642a:	3001      	adds	r0, #1
 800642c:	f43f af41 	beq.w	80062b2 <_printf_float+0xc2>
 8006430:	f04f 0800 	mov.w	r8, #0
 8006434:	f104 091a 	add.w	r9, r4, #26
 8006438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800643a:	3b01      	subs	r3, #1
 800643c:	4543      	cmp	r3, r8
 800643e:	dc09      	bgt.n	8006454 <_printf_float+0x264>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	079b      	lsls	r3, r3, #30
 8006444:	f100 8105 	bmi.w	8006652 <_printf_float+0x462>
 8006448:	68e0      	ldr	r0, [r4, #12]
 800644a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800644c:	4298      	cmp	r0, r3
 800644e:	bfb8      	it	lt
 8006450:	4618      	movlt	r0, r3
 8006452:	e730      	b.n	80062b6 <_printf_float+0xc6>
 8006454:	2301      	movs	r3, #1
 8006456:	464a      	mov	r2, r9
 8006458:	4631      	mov	r1, r6
 800645a:	4628      	mov	r0, r5
 800645c:	47b8      	blx	r7
 800645e:	3001      	adds	r0, #1
 8006460:	f43f af27 	beq.w	80062b2 <_printf_float+0xc2>
 8006464:	f108 0801 	add.w	r8, r8, #1
 8006468:	e7e6      	b.n	8006438 <_printf_float+0x248>
 800646a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	dc39      	bgt.n	80064e4 <_printf_float+0x2f4>
 8006470:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <_printf_float+0x2f0>)
 8006472:	2301      	movs	r3, #1
 8006474:	4631      	mov	r1, r6
 8006476:	4628      	mov	r0, r5
 8006478:	47b8      	blx	r7
 800647a:	3001      	adds	r0, #1
 800647c:	f43f af19 	beq.w	80062b2 <_printf_float+0xc2>
 8006480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006484:	4313      	orrs	r3, r2
 8006486:	d102      	bne.n	800648e <_printf_float+0x29e>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	07d9      	lsls	r1, r3, #31
 800648c:	d5d8      	bpl.n	8006440 <_printf_float+0x250>
 800648e:	ee18 3a10 	vmov	r3, s16
 8006492:	4652      	mov	r2, sl
 8006494:	4631      	mov	r1, r6
 8006496:	4628      	mov	r0, r5
 8006498:	47b8      	blx	r7
 800649a:	3001      	adds	r0, #1
 800649c:	f43f af09 	beq.w	80062b2 <_printf_float+0xc2>
 80064a0:	f04f 0900 	mov.w	r9, #0
 80064a4:	f104 0a1a 	add.w	sl, r4, #26
 80064a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064aa:	425b      	negs	r3, r3
 80064ac:	454b      	cmp	r3, r9
 80064ae:	dc01      	bgt.n	80064b4 <_printf_float+0x2c4>
 80064b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b2:	e792      	b.n	80063da <_printf_float+0x1ea>
 80064b4:	2301      	movs	r3, #1
 80064b6:	4652      	mov	r2, sl
 80064b8:	4631      	mov	r1, r6
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b8      	blx	r7
 80064be:	3001      	adds	r0, #1
 80064c0:	f43f aef7 	beq.w	80062b2 <_printf_float+0xc2>
 80064c4:	f109 0901 	add.w	r9, r9, #1
 80064c8:	e7ee      	b.n	80064a8 <_printf_float+0x2b8>
 80064ca:	bf00      	nop
 80064cc:	7fefffff 	.word	0x7fefffff
 80064d0:	0800b808 	.word	0x0800b808
 80064d4:	0800b80c 	.word	0x0800b80c
 80064d8:	0800b814 	.word	0x0800b814
 80064dc:	0800b810 	.word	0x0800b810
 80064e0:	0800b818 	.word	0x0800b818
 80064e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064e8:	429a      	cmp	r2, r3
 80064ea:	bfa8      	it	ge
 80064ec:	461a      	movge	r2, r3
 80064ee:	2a00      	cmp	r2, #0
 80064f0:	4691      	mov	r9, r2
 80064f2:	dc37      	bgt.n	8006564 <_printf_float+0x374>
 80064f4:	f04f 0b00 	mov.w	fp, #0
 80064f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064fc:	f104 021a 	add.w	r2, r4, #26
 8006500:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006502:	9305      	str	r3, [sp, #20]
 8006504:	eba3 0309 	sub.w	r3, r3, r9
 8006508:	455b      	cmp	r3, fp
 800650a:	dc33      	bgt.n	8006574 <_printf_float+0x384>
 800650c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006510:	429a      	cmp	r2, r3
 8006512:	db3b      	blt.n	800658c <_printf_float+0x39c>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	07da      	lsls	r2, r3, #31
 8006518:	d438      	bmi.n	800658c <_printf_float+0x39c>
 800651a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800651c:	9b05      	ldr	r3, [sp, #20]
 800651e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	eba2 0901 	sub.w	r9, r2, r1
 8006526:	4599      	cmp	r9, r3
 8006528:	bfa8      	it	ge
 800652a:	4699      	movge	r9, r3
 800652c:	f1b9 0f00 	cmp.w	r9, #0
 8006530:	dc35      	bgt.n	800659e <_printf_float+0x3ae>
 8006532:	f04f 0800 	mov.w	r8, #0
 8006536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800653a:	f104 0a1a 	add.w	sl, r4, #26
 800653e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	eba3 0309 	sub.w	r3, r3, r9
 8006548:	4543      	cmp	r3, r8
 800654a:	f77f af79 	ble.w	8006440 <_printf_float+0x250>
 800654e:	2301      	movs	r3, #1
 8006550:	4652      	mov	r2, sl
 8006552:	4631      	mov	r1, r6
 8006554:	4628      	mov	r0, r5
 8006556:	47b8      	blx	r7
 8006558:	3001      	adds	r0, #1
 800655a:	f43f aeaa 	beq.w	80062b2 <_printf_float+0xc2>
 800655e:	f108 0801 	add.w	r8, r8, #1
 8006562:	e7ec      	b.n	800653e <_printf_float+0x34e>
 8006564:	4613      	mov	r3, r2
 8006566:	4631      	mov	r1, r6
 8006568:	4642      	mov	r2, r8
 800656a:	4628      	mov	r0, r5
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	d1c0      	bne.n	80064f4 <_printf_float+0x304>
 8006572:	e69e      	b.n	80062b2 <_printf_float+0xc2>
 8006574:	2301      	movs	r3, #1
 8006576:	4631      	mov	r1, r6
 8006578:	4628      	mov	r0, r5
 800657a:	9205      	str	r2, [sp, #20]
 800657c:	47b8      	blx	r7
 800657e:	3001      	adds	r0, #1
 8006580:	f43f ae97 	beq.w	80062b2 <_printf_float+0xc2>
 8006584:	9a05      	ldr	r2, [sp, #20]
 8006586:	f10b 0b01 	add.w	fp, fp, #1
 800658a:	e7b9      	b.n	8006500 <_printf_float+0x310>
 800658c:	ee18 3a10 	vmov	r3, s16
 8006590:	4652      	mov	r2, sl
 8006592:	4631      	mov	r1, r6
 8006594:	4628      	mov	r0, r5
 8006596:	47b8      	blx	r7
 8006598:	3001      	adds	r0, #1
 800659a:	d1be      	bne.n	800651a <_printf_float+0x32a>
 800659c:	e689      	b.n	80062b2 <_printf_float+0xc2>
 800659e:	9a05      	ldr	r2, [sp, #20]
 80065a0:	464b      	mov	r3, r9
 80065a2:	4442      	add	r2, r8
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	d1c1      	bne.n	8006532 <_printf_float+0x342>
 80065ae:	e680      	b.n	80062b2 <_printf_float+0xc2>
 80065b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065b2:	2a01      	cmp	r2, #1
 80065b4:	dc01      	bgt.n	80065ba <_printf_float+0x3ca>
 80065b6:	07db      	lsls	r3, r3, #31
 80065b8:	d538      	bpl.n	800662c <_printf_float+0x43c>
 80065ba:	2301      	movs	r3, #1
 80065bc:	4642      	mov	r2, r8
 80065be:	4631      	mov	r1, r6
 80065c0:	4628      	mov	r0, r5
 80065c2:	47b8      	blx	r7
 80065c4:	3001      	adds	r0, #1
 80065c6:	f43f ae74 	beq.w	80062b2 <_printf_float+0xc2>
 80065ca:	ee18 3a10 	vmov	r3, s16
 80065ce:	4652      	mov	r2, sl
 80065d0:	4631      	mov	r1, r6
 80065d2:	4628      	mov	r0, r5
 80065d4:	47b8      	blx	r7
 80065d6:	3001      	adds	r0, #1
 80065d8:	f43f ae6b 	beq.w	80062b2 <_printf_float+0xc2>
 80065dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065e0:	2200      	movs	r2, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	f7fa fa88 	bl	8000af8 <__aeabi_dcmpeq>
 80065e8:	b9d8      	cbnz	r0, 8006622 <_printf_float+0x432>
 80065ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ec:	f108 0201 	add.w	r2, r8, #1
 80065f0:	3b01      	subs	r3, #1
 80065f2:	4631      	mov	r1, r6
 80065f4:	4628      	mov	r0, r5
 80065f6:	47b8      	blx	r7
 80065f8:	3001      	adds	r0, #1
 80065fa:	d10e      	bne.n	800661a <_printf_float+0x42a>
 80065fc:	e659      	b.n	80062b2 <_printf_float+0xc2>
 80065fe:	2301      	movs	r3, #1
 8006600:	4652      	mov	r2, sl
 8006602:	4631      	mov	r1, r6
 8006604:	4628      	mov	r0, r5
 8006606:	47b8      	blx	r7
 8006608:	3001      	adds	r0, #1
 800660a:	f43f ae52 	beq.w	80062b2 <_printf_float+0xc2>
 800660e:	f108 0801 	add.w	r8, r8, #1
 8006612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006614:	3b01      	subs	r3, #1
 8006616:	4543      	cmp	r3, r8
 8006618:	dcf1      	bgt.n	80065fe <_printf_float+0x40e>
 800661a:	464b      	mov	r3, r9
 800661c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006620:	e6dc      	b.n	80063dc <_printf_float+0x1ec>
 8006622:	f04f 0800 	mov.w	r8, #0
 8006626:	f104 0a1a 	add.w	sl, r4, #26
 800662a:	e7f2      	b.n	8006612 <_printf_float+0x422>
 800662c:	2301      	movs	r3, #1
 800662e:	4642      	mov	r2, r8
 8006630:	e7df      	b.n	80065f2 <_printf_float+0x402>
 8006632:	2301      	movs	r3, #1
 8006634:	464a      	mov	r2, r9
 8006636:	4631      	mov	r1, r6
 8006638:	4628      	mov	r0, r5
 800663a:	47b8      	blx	r7
 800663c:	3001      	adds	r0, #1
 800663e:	f43f ae38 	beq.w	80062b2 <_printf_float+0xc2>
 8006642:	f108 0801 	add.w	r8, r8, #1
 8006646:	68e3      	ldr	r3, [r4, #12]
 8006648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800664a:	1a5b      	subs	r3, r3, r1
 800664c:	4543      	cmp	r3, r8
 800664e:	dcf0      	bgt.n	8006632 <_printf_float+0x442>
 8006650:	e6fa      	b.n	8006448 <_printf_float+0x258>
 8006652:	f04f 0800 	mov.w	r8, #0
 8006656:	f104 0919 	add.w	r9, r4, #25
 800665a:	e7f4      	b.n	8006646 <_printf_float+0x456>

0800665c <_printf_common>:
 800665c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006660:	4616      	mov	r6, r2
 8006662:	4699      	mov	r9, r3
 8006664:	688a      	ldr	r2, [r1, #8]
 8006666:	690b      	ldr	r3, [r1, #16]
 8006668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800666c:	4293      	cmp	r3, r2
 800666e:	bfb8      	it	lt
 8006670:	4613      	movlt	r3, r2
 8006672:	6033      	str	r3, [r6, #0]
 8006674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006678:	4607      	mov	r7, r0
 800667a:	460c      	mov	r4, r1
 800667c:	b10a      	cbz	r2, 8006682 <_printf_common+0x26>
 800667e:	3301      	adds	r3, #1
 8006680:	6033      	str	r3, [r6, #0]
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	0699      	lsls	r1, r3, #26
 8006686:	bf42      	ittt	mi
 8006688:	6833      	ldrmi	r3, [r6, #0]
 800668a:	3302      	addmi	r3, #2
 800668c:	6033      	strmi	r3, [r6, #0]
 800668e:	6825      	ldr	r5, [r4, #0]
 8006690:	f015 0506 	ands.w	r5, r5, #6
 8006694:	d106      	bne.n	80066a4 <_printf_common+0x48>
 8006696:	f104 0a19 	add.w	sl, r4, #25
 800669a:	68e3      	ldr	r3, [r4, #12]
 800669c:	6832      	ldr	r2, [r6, #0]
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	42ab      	cmp	r3, r5
 80066a2:	dc26      	bgt.n	80066f2 <_printf_common+0x96>
 80066a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066a8:	1e13      	subs	r3, r2, #0
 80066aa:	6822      	ldr	r2, [r4, #0]
 80066ac:	bf18      	it	ne
 80066ae:	2301      	movne	r3, #1
 80066b0:	0692      	lsls	r2, r2, #26
 80066b2:	d42b      	bmi.n	800670c <_printf_common+0xb0>
 80066b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066b8:	4649      	mov	r1, r9
 80066ba:	4638      	mov	r0, r7
 80066bc:	47c0      	blx	r8
 80066be:	3001      	adds	r0, #1
 80066c0:	d01e      	beq.n	8006700 <_printf_common+0xa4>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	68e5      	ldr	r5, [r4, #12]
 80066c6:	6832      	ldr	r2, [r6, #0]
 80066c8:	f003 0306 	and.w	r3, r3, #6
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	bf08      	it	eq
 80066d0:	1aad      	subeq	r5, r5, r2
 80066d2:	68a3      	ldr	r3, [r4, #8]
 80066d4:	6922      	ldr	r2, [r4, #16]
 80066d6:	bf0c      	ite	eq
 80066d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066dc:	2500      	movne	r5, #0
 80066de:	4293      	cmp	r3, r2
 80066e0:	bfc4      	itt	gt
 80066e2:	1a9b      	subgt	r3, r3, r2
 80066e4:	18ed      	addgt	r5, r5, r3
 80066e6:	2600      	movs	r6, #0
 80066e8:	341a      	adds	r4, #26
 80066ea:	42b5      	cmp	r5, r6
 80066ec:	d11a      	bne.n	8006724 <_printf_common+0xc8>
 80066ee:	2000      	movs	r0, #0
 80066f0:	e008      	b.n	8006704 <_printf_common+0xa8>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4652      	mov	r2, sl
 80066f6:	4649      	mov	r1, r9
 80066f8:	4638      	mov	r0, r7
 80066fa:	47c0      	blx	r8
 80066fc:	3001      	adds	r0, #1
 80066fe:	d103      	bne.n	8006708 <_printf_common+0xac>
 8006700:	f04f 30ff 	mov.w	r0, #4294967295
 8006704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006708:	3501      	adds	r5, #1
 800670a:	e7c6      	b.n	800669a <_printf_common+0x3e>
 800670c:	18e1      	adds	r1, r4, r3
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	2030      	movs	r0, #48	; 0x30
 8006712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006716:	4422      	add	r2, r4
 8006718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800671c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006720:	3302      	adds	r3, #2
 8006722:	e7c7      	b.n	80066b4 <_printf_common+0x58>
 8006724:	2301      	movs	r3, #1
 8006726:	4622      	mov	r2, r4
 8006728:	4649      	mov	r1, r9
 800672a:	4638      	mov	r0, r7
 800672c:	47c0      	blx	r8
 800672e:	3001      	adds	r0, #1
 8006730:	d0e6      	beq.n	8006700 <_printf_common+0xa4>
 8006732:	3601      	adds	r6, #1
 8006734:	e7d9      	b.n	80066ea <_printf_common+0x8e>
	...

08006738 <_printf_i>:
 8006738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800673c:	460c      	mov	r4, r1
 800673e:	4691      	mov	r9, r2
 8006740:	7e27      	ldrb	r7, [r4, #24]
 8006742:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006744:	2f78      	cmp	r7, #120	; 0x78
 8006746:	4680      	mov	r8, r0
 8006748:	469a      	mov	sl, r3
 800674a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800674e:	d807      	bhi.n	8006760 <_printf_i+0x28>
 8006750:	2f62      	cmp	r7, #98	; 0x62
 8006752:	d80a      	bhi.n	800676a <_printf_i+0x32>
 8006754:	2f00      	cmp	r7, #0
 8006756:	f000 80d8 	beq.w	800690a <_printf_i+0x1d2>
 800675a:	2f58      	cmp	r7, #88	; 0x58
 800675c:	f000 80a3 	beq.w	80068a6 <_printf_i+0x16e>
 8006760:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006768:	e03a      	b.n	80067e0 <_printf_i+0xa8>
 800676a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800676e:	2b15      	cmp	r3, #21
 8006770:	d8f6      	bhi.n	8006760 <_printf_i+0x28>
 8006772:	a001      	add	r0, pc, #4	; (adr r0, 8006778 <_printf_i+0x40>)
 8006774:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006778:	080067d1 	.word	0x080067d1
 800677c:	080067e5 	.word	0x080067e5
 8006780:	08006761 	.word	0x08006761
 8006784:	08006761 	.word	0x08006761
 8006788:	08006761 	.word	0x08006761
 800678c:	08006761 	.word	0x08006761
 8006790:	080067e5 	.word	0x080067e5
 8006794:	08006761 	.word	0x08006761
 8006798:	08006761 	.word	0x08006761
 800679c:	08006761 	.word	0x08006761
 80067a0:	08006761 	.word	0x08006761
 80067a4:	080068f1 	.word	0x080068f1
 80067a8:	08006815 	.word	0x08006815
 80067ac:	080068d3 	.word	0x080068d3
 80067b0:	08006761 	.word	0x08006761
 80067b4:	08006761 	.word	0x08006761
 80067b8:	08006913 	.word	0x08006913
 80067bc:	08006761 	.word	0x08006761
 80067c0:	08006815 	.word	0x08006815
 80067c4:	08006761 	.word	0x08006761
 80067c8:	08006761 	.word	0x08006761
 80067cc:	080068db 	.word	0x080068db
 80067d0:	680b      	ldr	r3, [r1, #0]
 80067d2:	1d1a      	adds	r2, r3, #4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	600a      	str	r2, [r1, #0]
 80067d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0a3      	b.n	800692c <_printf_i+0x1f4>
 80067e4:	6825      	ldr	r5, [r4, #0]
 80067e6:	6808      	ldr	r0, [r1, #0]
 80067e8:	062e      	lsls	r6, r5, #24
 80067ea:	f100 0304 	add.w	r3, r0, #4
 80067ee:	d50a      	bpl.n	8006806 <_printf_i+0xce>
 80067f0:	6805      	ldr	r5, [r0, #0]
 80067f2:	600b      	str	r3, [r1, #0]
 80067f4:	2d00      	cmp	r5, #0
 80067f6:	da03      	bge.n	8006800 <_printf_i+0xc8>
 80067f8:	232d      	movs	r3, #45	; 0x2d
 80067fa:	426d      	negs	r5, r5
 80067fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006800:	485e      	ldr	r0, [pc, #376]	; (800697c <_printf_i+0x244>)
 8006802:	230a      	movs	r3, #10
 8006804:	e019      	b.n	800683a <_printf_i+0x102>
 8006806:	f015 0f40 	tst.w	r5, #64	; 0x40
 800680a:	6805      	ldr	r5, [r0, #0]
 800680c:	600b      	str	r3, [r1, #0]
 800680e:	bf18      	it	ne
 8006810:	b22d      	sxthne	r5, r5
 8006812:	e7ef      	b.n	80067f4 <_printf_i+0xbc>
 8006814:	680b      	ldr	r3, [r1, #0]
 8006816:	6825      	ldr	r5, [r4, #0]
 8006818:	1d18      	adds	r0, r3, #4
 800681a:	6008      	str	r0, [r1, #0]
 800681c:	0628      	lsls	r0, r5, #24
 800681e:	d501      	bpl.n	8006824 <_printf_i+0xec>
 8006820:	681d      	ldr	r5, [r3, #0]
 8006822:	e002      	b.n	800682a <_printf_i+0xf2>
 8006824:	0669      	lsls	r1, r5, #25
 8006826:	d5fb      	bpl.n	8006820 <_printf_i+0xe8>
 8006828:	881d      	ldrh	r5, [r3, #0]
 800682a:	4854      	ldr	r0, [pc, #336]	; (800697c <_printf_i+0x244>)
 800682c:	2f6f      	cmp	r7, #111	; 0x6f
 800682e:	bf0c      	ite	eq
 8006830:	2308      	moveq	r3, #8
 8006832:	230a      	movne	r3, #10
 8006834:	2100      	movs	r1, #0
 8006836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800683a:	6866      	ldr	r6, [r4, #4]
 800683c:	60a6      	str	r6, [r4, #8]
 800683e:	2e00      	cmp	r6, #0
 8006840:	bfa2      	ittt	ge
 8006842:	6821      	ldrge	r1, [r4, #0]
 8006844:	f021 0104 	bicge.w	r1, r1, #4
 8006848:	6021      	strge	r1, [r4, #0]
 800684a:	b90d      	cbnz	r5, 8006850 <_printf_i+0x118>
 800684c:	2e00      	cmp	r6, #0
 800684e:	d04d      	beq.n	80068ec <_printf_i+0x1b4>
 8006850:	4616      	mov	r6, r2
 8006852:	fbb5 f1f3 	udiv	r1, r5, r3
 8006856:	fb03 5711 	mls	r7, r3, r1, r5
 800685a:	5dc7      	ldrb	r7, [r0, r7]
 800685c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006860:	462f      	mov	r7, r5
 8006862:	42bb      	cmp	r3, r7
 8006864:	460d      	mov	r5, r1
 8006866:	d9f4      	bls.n	8006852 <_printf_i+0x11a>
 8006868:	2b08      	cmp	r3, #8
 800686a:	d10b      	bne.n	8006884 <_printf_i+0x14c>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	07df      	lsls	r7, r3, #31
 8006870:	d508      	bpl.n	8006884 <_printf_i+0x14c>
 8006872:	6923      	ldr	r3, [r4, #16]
 8006874:	6861      	ldr	r1, [r4, #4]
 8006876:	4299      	cmp	r1, r3
 8006878:	bfde      	ittt	le
 800687a:	2330      	movle	r3, #48	; 0x30
 800687c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006880:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006884:	1b92      	subs	r2, r2, r6
 8006886:	6122      	str	r2, [r4, #16]
 8006888:	f8cd a000 	str.w	sl, [sp]
 800688c:	464b      	mov	r3, r9
 800688e:	aa03      	add	r2, sp, #12
 8006890:	4621      	mov	r1, r4
 8006892:	4640      	mov	r0, r8
 8006894:	f7ff fee2 	bl	800665c <_printf_common>
 8006898:	3001      	adds	r0, #1
 800689a:	d14c      	bne.n	8006936 <_printf_i+0x1fe>
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	b004      	add	sp, #16
 80068a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a6:	4835      	ldr	r0, [pc, #212]	; (800697c <_printf_i+0x244>)
 80068a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	680e      	ldr	r6, [r1, #0]
 80068b0:	061f      	lsls	r7, r3, #24
 80068b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80068b6:	600e      	str	r6, [r1, #0]
 80068b8:	d514      	bpl.n	80068e4 <_printf_i+0x1ac>
 80068ba:	07d9      	lsls	r1, r3, #31
 80068bc:	bf44      	itt	mi
 80068be:	f043 0320 	orrmi.w	r3, r3, #32
 80068c2:	6023      	strmi	r3, [r4, #0]
 80068c4:	b91d      	cbnz	r5, 80068ce <_printf_i+0x196>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	f023 0320 	bic.w	r3, r3, #32
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	2310      	movs	r3, #16
 80068d0:	e7b0      	b.n	8006834 <_printf_i+0xfc>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	f043 0320 	orr.w	r3, r3, #32
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	2378      	movs	r3, #120	; 0x78
 80068dc:	4828      	ldr	r0, [pc, #160]	; (8006980 <_printf_i+0x248>)
 80068de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068e2:	e7e3      	b.n	80068ac <_printf_i+0x174>
 80068e4:	065e      	lsls	r6, r3, #25
 80068e6:	bf48      	it	mi
 80068e8:	b2ad      	uxthmi	r5, r5
 80068ea:	e7e6      	b.n	80068ba <_printf_i+0x182>
 80068ec:	4616      	mov	r6, r2
 80068ee:	e7bb      	b.n	8006868 <_printf_i+0x130>
 80068f0:	680b      	ldr	r3, [r1, #0]
 80068f2:	6826      	ldr	r6, [r4, #0]
 80068f4:	6960      	ldr	r0, [r4, #20]
 80068f6:	1d1d      	adds	r5, r3, #4
 80068f8:	600d      	str	r5, [r1, #0]
 80068fa:	0635      	lsls	r5, r6, #24
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	d501      	bpl.n	8006904 <_printf_i+0x1cc>
 8006900:	6018      	str	r0, [r3, #0]
 8006902:	e002      	b.n	800690a <_printf_i+0x1d2>
 8006904:	0671      	lsls	r1, r6, #25
 8006906:	d5fb      	bpl.n	8006900 <_printf_i+0x1c8>
 8006908:	8018      	strh	r0, [r3, #0]
 800690a:	2300      	movs	r3, #0
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	4616      	mov	r6, r2
 8006910:	e7ba      	b.n	8006888 <_printf_i+0x150>
 8006912:	680b      	ldr	r3, [r1, #0]
 8006914:	1d1a      	adds	r2, r3, #4
 8006916:	600a      	str	r2, [r1, #0]
 8006918:	681e      	ldr	r6, [r3, #0]
 800691a:	6862      	ldr	r2, [r4, #4]
 800691c:	2100      	movs	r1, #0
 800691e:	4630      	mov	r0, r6
 8006920:	f7f9 fc76 	bl	8000210 <memchr>
 8006924:	b108      	cbz	r0, 800692a <_printf_i+0x1f2>
 8006926:	1b80      	subs	r0, r0, r6
 8006928:	6060      	str	r0, [r4, #4]
 800692a:	6863      	ldr	r3, [r4, #4]
 800692c:	6123      	str	r3, [r4, #16]
 800692e:	2300      	movs	r3, #0
 8006930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006934:	e7a8      	b.n	8006888 <_printf_i+0x150>
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	4632      	mov	r2, r6
 800693a:	4649      	mov	r1, r9
 800693c:	4640      	mov	r0, r8
 800693e:	47d0      	blx	sl
 8006940:	3001      	adds	r0, #1
 8006942:	d0ab      	beq.n	800689c <_printf_i+0x164>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	079b      	lsls	r3, r3, #30
 8006948:	d413      	bmi.n	8006972 <_printf_i+0x23a>
 800694a:	68e0      	ldr	r0, [r4, #12]
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	4298      	cmp	r0, r3
 8006950:	bfb8      	it	lt
 8006952:	4618      	movlt	r0, r3
 8006954:	e7a4      	b.n	80068a0 <_printf_i+0x168>
 8006956:	2301      	movs	r3, #1
 8006958:	4632      	mov	r2, r6
 800695a:	4649      	mov	r1, r9
 800695c:	4640      	mov	r0, r8
 800695e:	47d0      	blx	sl
 8006960:	3001      	adds	r0, #1
 8006962:	d09b      	beq.n	800689c <_printf_i+0x164>
 8006964:	3501      	adds	r5, #1
 8006966:	68e3      	ldr	r3, [r4, #12]
 8006968:	9903      	ldr	r1, [sp, #12]
 800696a:	1a5b      	subs	r3, r3, r1
 800696c:	42ab      	cmp	r3, r5
 800696e:	dcf2      	bgt.n	8006956 <_printf_i+0x21e>
 8006970:	e7eb      	b.n	800694a <_printf_i+0x212>
 8006972:	2500      	movs	r5, #0
 8006974:	f104 0619 	add.w	r6, r4, #25
 8006978:	e7f5      	b.n	8006966 <_printf_i+0x22e>
 800697a:	bf00      	nop
 800697c:	0800b81a 	.word	0x0800b81a
 8006980:	0800b82b 	.word	0x0800b82b

08006984 <_sbrk_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d06      	ldr	r5, [pc, #24]	; (80069a0 <_sbrk_r+0x1c>)
 8006988:	2300      	movs	r3, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	602b      	str	r3, [r5, #0]
 8006990:	f7fa ff86 	bl	80018a0 <_sbrk>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_sbrk_r+0x1a>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_sbrk_r+0x1a>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	200009ec 	.word	0x200009ec

080069a4 <siprintf>:
 80069a4:	b40e      	push	{r1, r2, r3}
 80069a6:	b500      	push	{lr}
 80069a8:	b09c      	sub	sp, #112	; 0x70
 80069aa:	ab1d      	add	r3, sp, #116	; 0x74
 80069ac:	9002      	str	r0, [sp, #8]
 80069ae:	9006      	str	r0, [sp, #24]
 80069b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069b4:	4809      	ldr	r0, [pc, #36]	; (80069dc <siprintf+0x38>)
 80069b6:	9107      	str	r1, [sp, #28]
 80069b8:	9104      	str	r1, [sp, #16]
 80069ba:	4909      	ldr	r1, [pc, #36]	; (80069e0 <siprintf+0x3c>)
 80069bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c0:	9105      	str	r1, [sp, #20]
 80069c2:	6800      	ldr	r0, [r0, #0]
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	a902      	add	r1, sp, #8
 80069c8:	f001 faa4 	bl	8007f14 <_svfiprintf_r>
 80069cc:	9b02      	ldr	r3, [sp, #8]
 80069ce:	2200      	movs	r2, #0
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	b01c      	add	sp, #112	; 0x70
 80069d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d8:	b003      	add	sp, #12
 80069da:	4770      	bx	lr
 80069dc:	200005e4 	.word	0x200005e4
 80069e0:	ffff0208 	.word	0xffff0208

080069e4 <quorem>:
 80069e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	6903      	ldr	r3, [r0, #16]
 80069ea:	690c      	ldr	r4, [r1, #16]
 80069ec:	42a3      	cmp	r3, r4
 80069ee:	4607      	mov	r7, r0
 80069f0:	f2c0 8081 	blt.w	8006af6 <quorem+0x112>
 80069f4:	3c01      	subs	r4, #1
 80069f6:	f101 0814 	add.w	r8, r1, #20
 80069fa:	f100 0514 	add.w	r5, r0, #20
 80069fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a18:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a1c:	d331      	bcc.n	8006a82 <quorem+0x9e>
 8006a1e:	f04f 0e00 	mov.w	lr, #0
 8006a22:	4640      	mov	r0, r8
 8006a24:	46ac      	mov	ip, r5
 8006a26:	46f2      	mov	sl, lr
 8006a28:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a2c:	b293      	uxth	r3, r2
 8006a2e:	fb06 e303 	mla	r3, r6, r3, lr
 8006a32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	ebaa 0303 	sub.w	r3, sl, r3
 8006a3c:	0c12      	lsrs	r2, r2, #16
 8006a3e:	f8dc a000 	ldr.w	sl, [ip]
 8006a42:	fb06 e202 	mla	r2, r6, r2, lr
 8006a46:	fa13 f38a 	uxtah	r3, r3, sl
 8006a4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a4e:	fa1f fa82 	uxth.w	sl, r2
 8006a52:	f8dc 2000 	ldr.w	r2, [ip]
 8006a56:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006a5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a64:	4581      	cmp	r9, r0
 8006a66:	f84c 3b04 	str.w	r3, [ip], #4
 8006a6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a6e:	d2db      	bcs.n	8006a28 <quorem+0x44>
 8006a70:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a74:	b92b      	cbnz	r3, 8006a82 <quorem+0x9e>
 8006a76:	9b01      	ldr	r3, [sp, #4]
 8006a78:	3b04      	subs	r3, #4
 8006a7a:	429d      	cmp	r5, r3
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	d32e      	bcc.n	8006ade <quorem+0xfa>
 8006a80:	613c      	str	r4, [r7, #16]
 8006a82:	4638      	mov	r0, r7
 8006a84:	f001 f8b6 	bl	8007bf4 <__mcmp>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	db24      	blt.n	8006ad6 <quorem+0xf2>
 8006a8c:	3601      	adds	r6, #1
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f04f 0c00 	mov.w	ip, #0
 8006a94:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a98:	f8d0 e000 	ldr.w	lr, [r0]
 8006a9c:	b293      	uxth	r3, r2
 8006a9e:	ebac 0303 	sub.w	r3, ip, r3
 8006aa2:	0c12      	lsrs	r2, r2, #16
 8006aa4:	fa13 f38e 	uxtah	r3, r3, lr
 8006aa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006aac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ab6:	45c1      	cmp	r9, r8
 8006ab8:	f840 3b04 	str.w	r3, [r0], #4
 8006abc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ac0:	d2e8      	bcs.n	8006a94 <quorem+0xb0>
 8006ac2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ac6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aca:	b922      	cbnz	r2, 8006ad6 <quorem+0xf2>
 8006acc:	3b04      	subs	r3, #4
 8006ace:	429d      	cmp	r5, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	d30a      	bcc.n	8006aea <quorem+0x106>
 8006ad4:	613c      	str	r4, [r7, #16]
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	b003      	add	sp, #12
 8006ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	3b04      	subs	r3, #4
 8006ae2:	2a00      	cmp	r2, #0
 8006ae4:	d1cc      	bne.n	8006a80 <quorem+0x9c>
 8006ae6:	3c01      	subs	r4, #1
 8006ae8:	e7c7      	b.n	8006a7a <quorem+0x96>
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	3b04      	subs	r3, #4
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	d1f0      	bne.n	8006ad4 <quorem+0xf0>
 8006af2:	3c01      	subs	r4, #1
 8006af4:	e7eb      	b.n	8006ace <quorem+0xea>
 8006af6:	2000      	movs	r0, #0
 8006af8:	e7ee      	b.n	8006ad8 <quorem+0xf4>
 8006afa:	0000      	movs	r0, r0
 8006afc:	0000      	movs	r0, r0
	...

08006b00 <_dtoa_r>:
 8006b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	ed2d 8b02 	vpush	{d8}
 8006b08:	ec57 6b10 	vmov	r6, r7, d0
 8006b0c:	b095      	sub	sp, #84	; 0x54
 8006b0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b14:	9105      	str	r1, [sp, #20]
 8006b16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b20:	b975      	cbnz	r5, 8006b40 <_dtoa_r+0x40>
 8006b22:	2010      	movs	r0, #16
 8006b24:	f7ff f9fc 	bl	8005f20 <malloc>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	6260      	str	r0, [r4, #36]	; 0x24
 8006b2c:	b920      	cbnz	r0, 8006b38 <_dtoa_r+0x38>
 8006b2e:	4bb2      	ldr	r3, [pc, #712]	; (8006df8 <_dtoa_r+0x2f8>)
 8006b30:	21ea      	movs	r1, #234	; 0xea
 8006b32:	48b2      	ldr	r0, [pc, #712]	; (8006dfc <_dtoa_r+0x2fc>)
 8006b34:	f001 faee 	bl	8008114 <__assert_func>
 8006b38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b3c:	6005      	str	r5, [r0, #0]
 8006b3e:	60c5      	str	r5, [r0, #12]
 8006b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b42:	6819      	ldr	r1, [r3, #0]
 8006b44:	b151      	cbz	r1, 8006b5c <_dtoa_r+0x5c>
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	604a      	str	r2, [r1, #4]
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4093      	lsls	r3, r2
 8006b4e:	608b      	str	r3, [r1, #8]
 8006b50:	4620      	mov	r0, r4
 8006b52:	f000 fe11 	bl	8007778 <_Bfree>
 8006b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	1e3b      	subs	r3, r7, #0
 8006b5e:	bfb9      	ittee	lt
 8006b60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b64:	9303      	strlt	r3, [sp, #12]
 8006b66:	2300      	movge	r3, #0
 8006b68:	f8c8 3000 	strge.w	r3, [r8]
 8006b6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006b70:	4ba3      	ldr	r3, [pc, #652]	; (8006e00 <_dtoa_r+0x300>)
 8006b72:	bfbc      	itt	lt
 8006b74:	2201      	movlt	r2, #1
 8006b76:	f8c8 2000 	strlt.w	r2, [r8]
 8006b7a:	ea33 0309 	bics.w	r3, r3, r9
 8006b7e:	d11b      	bne.n	8006bb8 <_dtoa_r+0xb8>
 8006b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b82:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b8c:	4333      	orrs	r3, r6
 8006b8e:	f000 857a 	beq.w	8007686 <_dtoa_r+0xb86>
 8006b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b94:	b963      	cbnz	r3, 8006bb0 <_dtoa_r+0xb0>
 8006b96:	4b9b      	ldr	r3, [pc, #620]	; (8006e04 <_dtoa_r+0x304>)
 8006b98:	e024      	b.n	8006be4 <_dtoa_r+0xe4>
 8006b9a:	4b9b      	ldr	r3, [pc, #620]	; (8006e08 <_dtoa_r+0x308>)
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	9800      	ldr	r0, [sp, #0]
 8006ba6:	b015      	add	sp, #84	; 0x54
 8006ba8:	ecbd 8b02 	vpop	{d8}
 8006bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb0:	4b94      	ldr	r3, [pc, #592]	; (8006e04 <_dtoa_r+0x304>)
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	3303      	adds	r3, #3
 8006bb6:	e7f3      	b.n	8006ba0 <_dtoa_r+0xa0>
 8006bb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	ec51 0b17 	vmov	r0, r1, d7
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006bc8:	f7f9 ff96 	bl	8000af8 <__aeabi_dcmpeq>
 8006bcc:	4680      	mov	r8, r0
 8006bce:	b158      	cbz	r0, 8006be8 <_dtoa_r+0xe8>
 8006bd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 8551 	beq.w	8007680 <_dtoa_r+0xb80>
 8006bde:	488b      	ldr	r0, [pc, #556]	; (8006e0c <_dtoa_r+0x30c>)
 8006be0:	6018      	str	r0, [r3, #0]
 8006be2:	1e43      	subs	r3, r0, #1
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	e7dd      	b.n	8006ba4 <_dtoa_r+0xa4>
 8006be8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006bec:	aa12      	add	r2, sp, #72	; 0x48
 8006bee:	a913      	add	r1, sp, #76	; 0x4c
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f001 f8a3 	bl	8007d3c <__d2b>
 8006bf6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bfa:	4683      	mov	fp, r0
 8006bfc:	2d00      	cmp	r5, #0
 8006bfe:	d07c      	beq.n	8006cfa <_dtoa_r+0x1fa>
 8006c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006c0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c1a:	4b7d      	ldr	r3, [pc, #500]	; (8006e10 <_dtoa_r+0x310>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4630      	mov	r0, r6
 8006c20:	4639      	mov	r1, r7
 8006c22:	f7f9 fb49 	bl	80002b8 <__aeabi_dsub>
 8006c26:	a36e      	add	r3, pc, #440	; (adr r3, 8006de0 <_dtoa_r+0x2e0>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	f7f9 fcfc 	bl	8000628 <__aeabi_dmul>
 8006c30:	a36d      	add	r3, pc, #436	; (adr r3, 8006de8 <_dtoa_r+0x2e8>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f7f9 fb41 	bl	80002bc <__adddf3>
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	460f      	mov	r7, r1
 8006c40:	f7f9 fc88 	bl	8000554 <__aeabi_i2d>
 8006c44:	a36a      	add	r3, pc, #424	; (adr r3, 8006df0 <_dtoa_r+0x2f0>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f7f9 fced 	bl	8000628 <__aeabi_dmul>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4630      	mov	r0, r6
 8006c54:	4639      	mov	r1, r7
 8006c56:	f7f9 fb31 	bl	80002bc <__adddf3>
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	460f      	mov	r7, r1
 8006c5e:	f7f9 ff93 	bl	8000b88 <__aeabi_d2iz>
 8006c62:	2200      	movs	r2, #0
 8006c64:	4682      	mov	sl, r0
 8006c66:	2300      	movs	r3, #0
 8006c68:	4630      	mov	r0, r6
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	f7f9 ff4e 	bl	8000b0c <__aeabi_dcmplt>
 8006c70:	b148      	cbz	r0, 8006c86 <_dtoa_r+0x186>
 8006c72:	4650      	mov	r0, sl
 8006c74:	f7f9 fc6e 	bl	8000554 <__aeabi_i2d>
 8006c78:	4632      	mov	r2, r6
 8006c7a:	463b      	mov	r3, r7
 8006c7c:	f7f9 ff3c 	bl	8000af8 <__aeabi_dcmpeq>
 8006c80:	b908      	cbnz	r0, 8006c86 <_dtoa_r+0x186>
 8006c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c86:	f1ba 0f16 	cmp.w	sl, #22
 8006c8a:	d854      	bhi.n	8006d36 <_dtoa_r+0x236>
 8006c8c:	4b61      	ldr	r3, [pc, #388]	; (8006e14 <_dtoa_r+0x314>)
 8006c8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c9a:	f7f9 ff37 	bl	8000b0c <__aeabi_dcmplt>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d04b      	beq.n	8006d3a <_dtoa_r+0x23a>
 8006ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	930e      	str	r3, [sp, #56]	; 0x38
 8006caa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cac:	1b5d      	subs	r5, r3, r5
 8006cae:	1e6b      	subs	r3, r5, #1
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	bf43      	ittte	mi
 8006cb4:	2300      	movmi	r3, #0
 8006cb6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006cba:	9304      	strmi	r3, [sp, #16]
 8006cbc:	f04f 0800 	movpl.w	r8, #0
 8006cc0:	f1ba 0f00 	cmp.w	sl, #0
 8006cc4:	db3b      	blt.n	8006d3e <_dtoa_r+0x23e>
 8006cc6:	9b04      	ldr	r3, [sp, #16]
 8006cc8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006ccc:	4453      	add	r3, sl
 8006cce:	9304      	str	r3, [sp, #16]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9306      	str	r3, [sp, #24]
 8006cd4:	9b05      	ldr	r3, [sp, #20]
 8006cd6:	2b09      	cmp	r3, #9
 8006cd8:	d869      	bhi.n	8006dae <_dtoa_r+0x2ae>
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	bfc4      	itt	gt
 8006cde:	3b04      	subgt	r3, #4
 8006ce0:	9305      	strgt	r3, [sp, #20]
 8006ce2:	9b05      	ldr	r3, [sp, #20]
 8006ce4:	f1a3 0302 	sub.w	r3, r3, #2
 8006ce8:	bfcc      	ite	gt
 8006cea:	2500      	movgt	r5, #0
 8006cec:	2501      	movle	r5, #1
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d869      	bhi.n	8006dc6 <_dtoa_r+0x2c6>
 8006cf2:	e8df f003 	tbb	[pc, r3]
 8006cf6:	4e2c      	.short	0x4e2c
 8006cf8:	5a4c      	.short	0x5a4c
 8006cfa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006cfe:	441d      	add	r5, r3
 8006d00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d04:	2b20      	cmp	r3, #32
 8006d06:	bfc1      	itttt	gt
 8006d08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d10:	fa09 f303 	lslgt.w	r3, r9, r3
 8006d14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d18:	bfda      	itte	le
 8006d1a:	f1c3 0320 	rsble	r3, r3, #32
 8006d1e:	fa06 f003 	lslle.w	r0, r6, r3
 8006d22:	4318      	orrgt	r0, r3
 8006d24:	f7f9 fc06 	bl	8000534 <__aeabi_ui2d>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d30:	3d01      	subs	r5, #1
 8006d32:	9310      	str	r3, [sp, #64]	; 0x40
 8006d34:	e771      	b.n	8006c1a <_dtoa_r+0x11a>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e7b6      	b.n	8006ca8 <_dtoa_r+0x1a8>
 8006d3a:	900e      	str	r0, [sp, #56]	; 0x38
 8006d3c:	e7b5      	b.n	8006caa <_dtoa_r+0x1aa>
 8006d3e:	f1ca 0300 	rsb	r3, sl, #0
 8006d42:	9306      	str	r3, [sp, #24]
 8006d44:	2300      	movs	r3, #0
 8006d46:	eba8 080a 	sub.w	r8, r8, sl
 8006d4a:	930d      	str	r3, [sp, #52]	; 0x34
 8006d4c:	e7c2      	b.n	8006cd4 <_dtoa_r+0x1d4>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9308      	str	r3, [sp, #32]
 8006d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	dc39      	bgt.n	8006dcc <_dtoa_r+0x2cc>
 8006d58:	f04f 0901 	mov.w	r9, #1
 8006d5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d60:	464b      	mov	r3, r9
 8006d62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006d66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d68:	2200      	movs	r2, #0
 8006d6a:	6042      	str	r2, [r0, #4]
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	f102 0614 	add.w	r6, r2, #20
 8006d72:	429e      	cmp	r6, r3
 8006d74:	6841      	ldr	r1, [r0, #4]
 8006d76:	d92f      	bls.n	8006dd8 <_dtoa_r+0x2d8>
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 fcbd 	bl	80076f8 <_Balloc>
 8006d7e:	9000      	str	r0, [sp, #0]
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d14b      	bne.n	8006e1c <_dtoa_r+0x31c>
 8006d84:	4b24      	ldr	r3, [pc, #144]	; (8006e18 <_dtoa_r+0x318>)
 8006d86:	4602      	mov	r2, r0
 8006d88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d8c:	e6d1      	b.n	8006b32 <_dtoa_r+0x32>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e7de      	b.n	8006d50 <_dtoa_r+0x250>
 8006d92:	2300      	movs	r3, #0
 8006d94:	9308      	str	r3, [sp, #32]
 8006d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d98:	eb0a 0903 	add.w	r9, sl, r3
 8006d9c:	f109 0301 	add.w	r3, r9, #1
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	9301      	str	r3, [sp, #4]
 8006da4:	bfb8      	it	lt
 8006da6:	2301      	movlt	r3, #1
 8006da8:	e7dd      	b.n	8006d66 <_dtoa_r+0x266>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e7f2      	b.n	8006d94 <_dtoa_r+0x294>
 8006dae:	2501      	movs	r5, #1
 8006db0:	2300      	movs	r3, #0
 8006db2:	9305      	str	r3, [sp, #20]
 8006db4:	9508      	str	r5, [sp, #32]
 8006db6:	f04f 39ff 	mov.w	r9, #4294967295
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006dc0:	2312      	movs	r3, #18
 8006dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8006dc4:	e7cf      	b.n	8006d66 <_dtoa_r+0x266>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	9308      	str	r3, [sp, #32]
 8006dca:	e7f4      	b.n	8006db6 <_dtoa_r+0x2b6>
 8006dcc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006dd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	e7c6      	b.n	8006d66 <_dtoa_r+0x266>
 8006dd8:	3101      	adds	r1, #1
 8006dda:	6041      	str	r1, [r0, #4]
 8006ddc:	0052      	lsls	r2, r2, #1
 8006dde:	e7c6      	b.n	8006d6e <_dtoa_r+0x26e>
 8006de0:	636f4361 	.word	0x636f4361
 8006de4:	3fd287a7 	.word	0x3fd287a7
 8006de8:	8b60c8b3 	.word	0x8b60c8b3
 8006dec:	3fc68a28 	.word	0x3fc68a28
 8006df0:	509f79fb 	.word	0x509f79fb
 8006df4:	3fd34413 	.word	0x3fd34413
 8006df8:	0800b849 	.word	0x0800b849
 8006dfc:	0800b860 	.word	0x0800b860
 8006e00:	7ff00000 	.word	0x7ff00000
 8006e04:	0800b845 	.word	0x0800b845
 8006e08:	0800b83c 	.word	0x0800b83c
 8006e0c:	0800b819 	.word	0x0800b819
 8006e10:	3ff80000 	.word	0x3ff80000
 8006e14:	0800b958 	.word	0x0800b958
 8006e18:	0800b8bf 	.word	0x0800b8bf
 8006e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e1e:	9a00      	ldr	r2, [sp, #0]
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	9b01      	ldr	r3, [sp, #4]
 8006e24:	2b0e      	cmp	r3, #14
 8006e26:	f200 80ad 	bhi.w	8006f84 <_dtoa_r+0x484>
 8006e2a:	2d00      	cmp	r5, #0
 8006e2c:	f000 80aa 	beq.w	8006f84 <_dtoa_r+0x484>
 8006e30:	f1ba 0f00 	cmp.w	sl, #0
 8006e34:	dd36      	ble.n	8006ea4 <_dtoa_r+0x3a4>
 8006e36:	4ac3      	ldr	r2, [pc, #780]	; (8007144 <_dtoa_r+0x644>)
 8006e38:	f00a 030f 	and.w	r3, sl, #15
 8006e3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e40:	ed93 7b00 	vldr	d7, [r3]
 8006e44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006e48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006e4c:	eeb0 8a47 	vmov.f32	s16, s14
 8006e50:	eef0 8a67 	vmov.f32	s17, s15
 8006e54:	d016      	beq.n	8006e84 <_dtoa_r+0x384>
 8006e56:	4bbc      	ldr	r3, [pc, #752]	; (8007148 <_dtoa_r+0x648>)
 8006e58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e60:	f7f9 fd0c 	bl	800087c <__aeabi_ddiv>
 8006e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e68:	f007 070f 	and.w	r7, r7, #15
 8006e6c:	2503      	movs	r5, #3
 8006e6e:	4eb6      	ldr	r6, [pc, #728]	; (8007148 <_dtoa_r+0x648>)
 8006e70:	b957      	cbnz	r7, 8006e88 <_dtoa_r+0x388>
 8006e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e76:	ec53 2b18 	vmov	r2, r3, d8
 8006e7a:	f7f9 fcff 	bl	800087c <__aeabi_ddiv>
 8006e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e82:	e029      	b.n	8006ed8 <_dtoa_r+0x3d8>
 8006e84:	2502      	movs	r5, #2
 8006e86:	e7f2      	b.n	8006e6e <_dtoa_r+0x36e>
 8006e88:	07f9      	lsls	r1, r7, #31
 8006e8a:	d508      	bpl.n	8006e9e <_dtoa_r+0x39e>
 8006e8c:	ec51 0b18 	vmov	r0, r1, d8
 8006e90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e94:	f7f9 fbc8 	bl	8000628 <__aeabi_dmul>
 8006e98:	ec41 0b18 	vmov	d8, r0, r1
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	107f      	asrs	r7, r7, #1
 8006ea0:	3608      	adds	r6, #8
 8006ea2:	e7e5      	b.n	8006e70 <_dtoa_r+0x370>
 8006ea4:	f000 80a6 	beq.w	8006ff4 <_dtoa_r+0x4f4>
 8006ea8:	f1ca 0600 	rsb	r6, sl, #0
 8006eac:	4ba5      	ldr	r3, [pc, #660]	; (8007144 <_dtoa_r+0x644>)
 8006eae:	4fa6      	ldr	r7, [pc, #664]	; (8007148 <_dtoa_r+0x648>)
 8006eb0:	f006 020f 	and.w	r2, r6, #15
 8006eb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ec0:	f7f9 fbb2 	bl	8000628 <__aeabi_dmul>
 8006ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ec8:	1136      	asrs	r6, r6, #4
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2502      	movs	r5, #2
 8006ece:	2e00      	cmp	r6, #0
 8006ed0:	f040 8085 	bne.w	8006fde <_dtoa_r+0x4de>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1d2      	bne.n	8006e7e <_dtoa_r+0x37e>
 8006ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 808c 	beq.w	8006ff8 <_dtoa_r+0x4f8>
 8006ee0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ee4:	4b99      	ldr	r3, [pc, #612]	; (800714c <_dtoa_r+0x64c>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	4630      	mov	r0, r6
 8006eea:	4639      	mov	r1, r7
 8006eec:	f7f9 fe0e 	bl	8000b0c <__aeabi_dcmplt>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	f000 8081 	beq.w	8006ff8 <_dtoa_r+0x4f8>
 8006ef6:	9b01      	ldr	r3, [sp, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d07d      	beq.n	8006ff8 <_dtoa_r+0x4f8>
 8006efc:	f1b9 0f00 	cmp.w	r9, #0
 8006f00:	dd3c      	ble.n	8006f7c <_dtoa_r+0x47c>
 8006f02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f06:	9307      	str	r3, [sp, #28]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4b91      	ldr	r3, [pc, #580]	; (8007150 <_dtoa_r+0x650>)
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	4639      	mov	r1, r7
 8006f10:	f7f9 fb8a 	bl	8000628 <__aeabi_dmul>
 8006f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f18:	3501      	adds	r5, #1
 8006f1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006f1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f22:	4628      	mov	r0, r5
 8006f24:	f7f9 fb16 	bl	8000554 <__aeabi_i2d>
 8006f28:	4632      	mov	r2, r6
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	f7f9 fb7c 	bl	8000628 <__aeabi_dmul>
 8006f30:	4b88      	ldr	r3, [pc, #544]	; (8007154 <_dtoa_r+0x654>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	f7f9 f9c2 	bl	80002bc <__adddf3>
 8006f38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f40:	9303      	str	r3, [sp, #12]
 8006f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d15c      	bne.n	8007002 <_dtoa_r+0x502>
 8006f48:	4b83      	ldr	r3, [pc, #524]	; (8007158 <_dtoa_r+0x658>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	4639      	mov	r1, r7
 8006f50:	f7f9 f9b2 	bl	80002b8 <__aeabi_dsub>
 8006f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f58:	4606      	mov	r6, r0
 8006f5a:	460f      	mov	r7, r1
 8006f5c:	f7f9 fdf4 	bl	8000b48 <__aeabi_dcmpgt>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	f040 8296 	bne.w	8007492 <_dtoa_r+0x992>
 8006f66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f70:	4639      	mov	r1, r7
 8006f72:	f7f9 fdcb 	bl	8000b0c <__aeabi_dcmplt>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f040 8288 	bne.w	800748c <_dtoa_r+0x98c>
 8006f7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f2c0 8158 	blt.w	800723c <_dtoa_r+0x73c>
 8006f8c:	f1ba 0f0e 	cmp.w	sl, #14
 8006f90:	f300 8154 	bgt.w	800723c <_dtoa_r+0x73c>
 8006f94:	4b6b      	ldr	r3, [pc, #428]	; (8007144 <_dtoa_r+0x644>)
 8006f96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f280 80e3 	bge.w	800716c <_dtoa_r+0x66c>
 8006fa6:	9b01      	ldr	r3, [sp, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f300 80df 	bgt.w	800716c <_dtoa_r+0x66c>
 8006fae:	f040 826d 	bne.w	800748c <_dtoa_r+0x98c>
 8006fb2:	4b69      	ldr	r3, [pc, #420]	; (8007158 <_dtoa_r+0x658>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	4649      	mov	r1, r9
 8006fba:	f7f9 fb35 	bl	8000628 <__aeabi_dmul>
 8006fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fc2:	f7f9 fdb7 	bl	8000b34 <__aeabi_dcmpge>
 8006fc6:	9e01      	ldr	r6, [sp, #4]
 8006fc8:	4637      	mov	r7, r6
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	f040 8243 	bne.w	8007456 <_dtoa_r+0x956>
 8006fd0:	9d00      	ldr	r5, [sp, #0]
 8006fd2:	2331      	movs	r3, #49	; 0x31
 8006fd4:	f805 3b01 	strb.w	r3, [r5], #1
 8006fd8:	f10a 0a01 	add.w	sl, sl, #1
 8006fdc:	e23f      	b.n	800745e <_dtoa_r+0x95e>
 8006fde:	07f2      	lsls	r2, r6, #31
 8006fe0:	d505      	bpl.n	8006fee <_dtoa_r+0x4ee>
 8006fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe6:	f7f9 fb1f 	bl	8000628 <__aeabi_dmul>
 8006fea:	3501      	adds	r5, #1
 8006fec:	2301      	movs	r3, #1
 8006fee:	1076      	asrs	r6, r6, #1
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	e76c      	b.n	8006ece <_dtoa_r+0x3ce>
 8006ff4:	2502      	movs	r5, #2
 8006ff6:	e76f      	b.n	8006ed8 <_dtoa_r+0x3d8>
 8006ff8:	9b01      	ldr	r3, [sp, #4]
 8006ffa:	f8cd a01c 	str.w	sl, [sp, #28]
 8006ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8007000:	e78d      	b.n	8006f1e <_dtoa_r+0x41e>
 8007002:	9900      	ldr	r1, [sp, #0]
 8007004:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007008:	4b4e      	ldr	r3, [pc, #312]	; (8007144 <_dtoa_r+0x644>)
 800700a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800700e:	4401      	add	r1, r0
 8007010:	9102      	str	r1, [sp, #8]
 8007012:	9908      	ldr	r1, [sp, #32]
 8007014:	eeb0 8a47 	vmov.f32	s16, s14
 8007018:	eef0 8a67 	vmov.f32	s17, s15
 800701c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007020:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007024:	2900      	cmp	r1, #0
 8007026:	d045      	beq.n	80070b4 <_dtoa_r+0x5b4>
 8007028:	494c      	ldr	r1, [pc, #304]	; (800715c <_dtoa_r+0x65c>)
 800702a:	2000      	movs	r0, #0
 800702c:	f7f9 fc26 	bl	800087c <__aeabi_ddiv>
 8007030:	ec53 2b18 	vmov	r2, r3, d8
 8007034:	f7f9 f940 	bl	80002b8 <__aeabi_dsub>
 8007038:	9d00      	ldr	r5, [sp, #0]
 800703a:	ec41 0b18 	vmov	d8, r0, r1
 800703e:	4639      	mov	r1, r7
 8007040:	4630      	mov	r0, r6
 8007042:	f7f9 fda1 	bl	8000b88 <__aeabi_d2iz>
 8007046:	900c      	str	r0, [sp, #48]	; 0x30
 8007048:	f7f9 fa84 	bl	8000554 <__aeabi_i2d>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4630      	mov	r0, r6
 8007052:	4639      	mov	r1, r7
 8007054:	f7f9 f930 	bl	80002b8 <__aeabi_dsub>
 8007058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800705a:	3330      	adds	r3, #48	; 0x30
 800705c:	f805 3b01 	strb.w	r3, [r5], #1
 8007060:	ec53 2b18 	vmov	r2, r3, d8
 8007064:	4606      	mov	r6, r0
 8007066:	460f      	mov	r7, r1
 8007068:	f7f9 fd50 	bl	8000b0c <__aeabi_dcmplt>
 800706c:	2800      	cmp	r0, #0
 800706e:	d165      	bne.n	800713c <_dtoa_r+0x63c>
 8007070:	4632      	mov	r2, r6
 8007072:	463b      	mov	r3, r7
 8007074:	4935      	ldr	r1, [pc, #212]	; (800714c <_dtoa_r+0x64c>)
 8007076:	2000      	movs	r0, #0
 8007078:	f7f9 f91e 	bl	80002b8 <__aeabi_dsub>
 800707c:	ec53 2b18 	vmov	r2, r3, d8
 8007080:	f7f9 fd44 	bl	8000b0c <__aeabi_dcmplt>
 8007084:	2800      	cmp	r0, #0
 8007086:	f040 80b9 	bne.w	80071fc <_dtoa_r+0x6fc>
 800708a:	9b02      	ldr	r3, [sp, #8]
 800708c:	429d      	cmp	r5, r3
 800708e:	f43f af75 	beq.w	8006f7c <_dtoa_r+0x47c>
 8007092:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <_dtoa_r+0x650>)
 8007094:	ec51 0b18 	vmov	r0, r1, d8
 8007098:	2200      	movs	r2, #0
 800709a:	f7f9 fac5 	bl	8000628 <__aeabi_dmul>
 800709e:	4b2c      	ldr	r3, [pc, #176]	; (8007150 <_dtoa_r+0x650>)
 80070a0:	ec41 0b18 	vmov	d8, r0, r1
 80070a4:	2200      	movs	r2, #0
 80070a6:	4630      	mov	r0, r6
 80070a8:	4639      	mov	r1, r7
 80070aa:	f7f9 fabd 	bl	8000628 <__aeabi_dmul>
 80070ae:	4606      	mov	r6, r0
 80070b0:	460f      	mov	r7, r1
 80070b2:	e7c4      	b.n	800703e <_dtoa_r+0x53e>
 80070b4:	ec51 0b17 	vmov	r0, r1, d7
 80070b8:	f7f9 fab6 	bl	8000628 <__aeabi_dmul>
 80070bc:	9b02      	ldr	r3, [sp, #8]
 80070be:	9d00      	ldr	r5, [sp, #0]
 80070c0:	930c      	str	r3, [sp, #48]	; 0x30
 80070c2:	ec41 0b18 	vmov	d8, r0, r1
 80070c6:	4639      	mov	r1, r7
 80070c8:	4630      	mov	r0, r6
 80070ca:	f7f9 fd5d 	bl	8000b88 <__aeabi_d2iz>
 80070ce:	9011      	str	r0, [sp, #68]	; 0x44
 80070d0:	f7f9 fa40 	bl	8000554 <__aeabi_i2d>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4630      	mov	r0, r6
 80070da:	4639      	mov	r1, r7
 80070dc:	f7f9 f8ec 	bl	80002b8 <__aeabi_dsub>
 80070e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070e2:	3330      	adds	r3, #48	; 0x30
 80070e4:	f805 3b01 	strb.w	r3, [r5], #1
 80070e8:	9b02      	ldr	r3, [sp, #8]
 80070ea:	429d      	cmp	r5, r3
 80070ec:	4606      	mov	r6, r0
 80070ee:	460f      	mov	r7, r1
 80070f0:	f04f 0200 	mov.w	r2, #0
 80070f4:	d134      	bne.n	8007160 <_dtoa_r+0x660>
 80070f6:	4b19      	ldr	r3, [pc, #100]	; (800715c <_dtoa_r+0x65c>)
 80070f8:	ec51 0b18 	vmov	r0, r1, d8
 80070fc:	f7f9 f8de 	bl	80002bc <__adddf3>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	4630      	mov	r0, r6
 8007106:	4639      	mov	r1, r7
 8007108:	f7f9 fd1e 	bl	8000b48 <__aeabi_dcmpgt>
 800710c:	2800      	cmp	r0, #0
 800710e:	d175      	bne.n	80071fc <_dtoa_r+0x6fc>
 8007110:	ec53 2b18 	vmov	r2, r3, d8
 8007114:	4911      	ldr	r1, [pc, #68]	; (800715c <_dtoa_r+0x65c>)
 8007116:	2000      	movs	r0, #0
 8007118:	f7f9 f8ce 	bl	80002b8 <__aeabi_dsub>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4630      	mov	r0, r6
 8007122:	4639      	mov	r1, r7
 8007124:	f7f9 fcf2 	bl	8000b0c <__aeabi_dcmplt>
 8007128:	2800      	cmp	r0, #0
 800712a:	f43f af27 	beq.w	8006f7c <_dtoa_r+0x47c>
 800712e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007130:	1e6b      	subs	r3, r5, #1
 8007132:	930c      	str	r3, [sp, #48]	; 0x30
 8007134:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007138:	2b30      	cmp	r3, #48	; 0x30
 800713a:	d0f8      	beq.n	800712e <_dtoa_r+0x62e>
 800713c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007140:	e04a      	b.n	80071d8 <_dtoa_r+0x6d8>
 8007142:	bf00      	nop
 8007144:	0800b958 	.word	0x0800b958
 8007148:	0800b930 	.word	0x0800b930
 800714c:	3ff00000 	.word	0x3ff00000
 8007150:	40240000 	.word	0x40240000
 8007154:	401c0000 	.word	0x401c0000
 8007158:	40140000 	.word	0x40140000
 800715c:	3fe00000 	.word	0x3fe00000
 8007160:	4baf      	ldr	r3, [pc, #700]	; (8007420 <_dtoa_r+0x920>)
 8007162:	f7f9 fa61 	bl	8000628 <__aeabi_dmul>
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	e7ac      	b.n	80070c6 <_dtoa_r+0x5c6>
 800716c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007170:	9d00      	ldr	r5, [sp, #0]
 8007172:	4642      	mov	r2, r8
 8007174:	464b      	mov	r3, r9
 8007176:	4630      	mov	r0, r6
 8007178:	4639      	mov	r1, r7
 800717a:	f7f9 fb7f 	bl	800087c <__aeabi_ddiv>
 800717e:	f7f9 fd03 	bl	8000b88 <__aeabi_d2iz>
 8007182:	9002      	str	r0, [sp, #8]
 8007184:	f7f9 f9e6 	bl	8000554 <__aeabi_i2d>
 8007188:	4642      	mov	r2, r8
 800718a:	464b      	mov	r3, r9
 800718c:	f7f9 fa4c 	bl	8000628 <__aeabi_dmul>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4630      	mov	r0, r6
 8007196:	4639      	mov	r1, r7
 8007198:	f7f9 f88e 	bl	80002b8 <__aeabi_dsub>
 800719c:	9e02      	ldr	r6, [sp, #8]
 800719e:	9f01      	ldr	r7, [sp, #4]
 80071a0:	3630      	adds	r6, #48	; 0x30
 80071a2:	f805 6b01 	strb.w	r6, [r5], #1
 80071a6:	9e00      	ldr	r6, [sp, #0]
 80071a8:	1bae      	subs	r6, r5, r6
 80071aa:	42b7      	cmp	r7, r6
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	d137      	bne.n	8007222 <_dtoa_r+0x722>
 80071b2:	f7f9 f883 	bl	80002bc <__adddf3>
 80071b6:	4642      	mov	r2, r8
 80071b8:	464b      	mov	r3, r9
 80071ba:	4606      	mov	r6, r0
 80071bc:	460f      	mov	r7, r1
 80071be:	f7f9 fcc3 	bl	8000b48 <__aeabi_dcmpgt>
 80071c2:	b9c8      	cbnz	r0, 80071f8 <_dtoa_r+0x6f8>
 80071c4:	4642      	mov	r2, r8
 80071c6:	464b      	mov	r3, r9
 80071c8:	4630      	mov	r0, r6
 80071ca:	4639      	mov	r1, r7
 80071cc:	f7f9 fc94 	bl	8000af8 <__aeabi_dcmpeq>
 80071d0:	b110      	cbz	r0, 80071d8 <_dtoa_r+0x6d8>
 80071d2:	9b02      	ldr	r3, [sp, #8]
 80071d4:	07d9      	lsls	r1, r3, #31
 80071d6:	d40f      	bmi.n	80071f8 <_dtoa_r+0x6f8>
 80071d8:	4620      	mov	r0, r4
 80071da:	4659      	mov	r1, fp
 80071dc:	f000 facc 	bl	8007778 <_Bfree>
 80071e0:	2300      	movs	r3, #0
 80071e2:	702b      	strb	r3, [r5, #0]
 80071e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071e6:	f10a 0001 	add.w	r0, sl, #1
 80071ea:	6018      	str	r0, [r3, #0]
 80071ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f43f acd8 	beq.w	8006ba4 <_dtoa_r+0xa4>
 80071f4:	601d      	str	r5, [r3, #0]
 80071f6:	e4d5      	b.n	8006ba4 <_dtoa_r+0xa4>
 80071f8:	f8cd a01c 	str.w	sl, [sp, #28]
 80071fc:	462b      	mov	r3, r5
 80071fe:	461d      	mov	r5, r3
 8007200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007204:	2a39      	cmp	r2, #57	; 0x39
 8007206:	d108      	bne.n	800721a <_dtoa_r+0x71a>
 8007208:	9a00      	ldr	r2, [sp, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d1f7      	bne.n	80071fe <_dtoa_r+0x6fe>
 800720e:	9a07      	ldr	r2, [sp, #28]
 8007210:	9900      	ldr	r1, [sp, #0]
 8007212:	3201      	adds	r2, #1
 8007214:	9207      	str	r2, [sp, #28]
 8007216:	2230      	movs	r2, #48	; 0x30
 8007218:	700a      	strb	r2, [r1, #0]
 800721a:	781a      	ldrb	r2, [r3, #0]
 800721c:	3201      	adds	r2, #1
 800721e:	701a      	strb	r2, [r3, #0]
 8007220:	e78c      	b.n	800713c <_dtoa_r+0x63c>
 8007222:	4b7f      	ldr	r3, [pc, #508]	; (8007420 <_dtoa_r+0x920>)
 8007224:	2200      	movs	r2, #0
 8007226:	f7f9 f9ff 	bl	8000628 <__aeabi_dmul>
 800722a:	2200      	movs	r2, #0
 800722c:	2300      	movs	r3, #0
 800722e:	4606      	mov	r6, r0
 8007230:	460f      	mov	r7, r1
 8007232:	f7f9 fc61 	bl	8000af8 <__aeabi_dcmpeq>
 8007236:	2800      	cmp	r0, #0
 8007238:	d09b      	beq.n	8007172 <_dtoa_r+0x672>
 800723a:	e7cd      	b.n	80071d8 <_dtoa_r+0x6d8>
 800723c:	9a08      	ldr	r2, [sp, #32]
 800723e:	2a00      	cmp	r2, #0
 8007240:	f000 80c4 	beq.w	80073cc <_dtoa_r+0x8cc>
 8007244:	9a05      	ldr	r2, [sp, #20]
 8007246:	2a01      	cmp	r2, #1
 8007248:	f300 80a8 	bgt.w	800739c <_dtoa_r+0x89c>
 800724c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800724e:	2a00      	cmp	r2, #0
 8007250:	f000 80a0 	beq.w	8007394 <_dtoa_r+0x894>
 8007254:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007258:	9e06      	ldr	r6, [sp, #24]
 800725a:	4645      	mov	r5, r8
 800725c:	9a04      	ldr	r2, [sp, #16]
 800725e:	2101      	movs	r1, #1
 8007260:	441a      	add	r2, r3
 8007262:	4620      	mov	r0, r4
 8007264:	4498      	add	r8, r3
 8007266:	9204      	str	r2, [sp, #16]
 8007268:	f000 fb42 	bl	80078f0 <__i2b>
 800726c:	4607      	mov	r7, r0
 800726e:	2d00      	cmp	r5, #0
 8007270:	dd0b      	ble.n	800728a <_dtoa_r+0x78a>
 8007272:	9b04      	ldr	r3, [sp, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	dd08      	ble.n	800728a <_dtoa_r+0x78a>
 8007278:	42ab      	cmp	r3, r5
 800727a:	9a04      	ldr	r2, [sp, #16]
 800727c:	bfa8      	it	ge
 800727e:	462b      	movge	r3, r5
 8007280:	eba8 0803 	sub.w	r8, r8, r3
 8007284:	1aed      	subs	r5, r5, r3
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	9304      	str	r3, [sp, #16]
 800728a:	9b06      	ldr	r3, [sp, #24]
 800728c:	b1fb      	cbz	r3, 80072ce <_dtoa_r+0x7ce>
 800728e:	9b08      	ldr	r3, [sp, #32]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 809f 	beq.w	80073d4 <_dtoa_r+0x8d4>
 8007296:	2e00      	cmp	r6, #0
 8007298:	dd11      	ble.n	80072be <_dtoa_r+0x7be>
 800729a:	4639      	mov	r1, r7
 800729c:	4632      	mov	r2, r6
 800729e:	4620      	mov	r0, r4
 80072a0:	f000 fbe2 	bl	8007a68 <__pow5mult>
 80072a4:	465a      	mov	r2, fp
 80072a6:	4601      	mov	r1, r0
 80072a8:	4607      	mov	r7, r0
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 fb36 	bl	800791c <__multiply>
 80072b0:	4659      	mov	r1, fp
 80072b2:	9007      	str	r0, [sp, #28]
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fa5f 	bl	8007778 <_Bfree>
 80072ba:	9b07      	ldr	r3, [sp, #28]
 80072bc:	469b      	mov	fp, r3
 80072be:	9b06      	ldr	r3, [sp, #24]
 80072c0:	1b9a      	subs	r2, r3, r6
 80072c2:	d004      	beq.n	80072ce <_dtoa_r+0x7ce>
 80072c4:	4659      	mov	r1, fp
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 fbce 	bl	8007a68 <__pow5mult>
 80072cc:	4683      	mov	fp, r0
 80072ce:	2101      	movs	r1, #1
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 fb0d 	bl	80078f0 <__i2b>
 80072d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072d8:	2b00      	cmp	r3, #0
 80072da:	4606      	mov	r6, r0
 80072dc:	dd7c      	ble.n	80073d8 <_dtoa_r+0x8d8>
 80072de:	461a      	mov	r2, r3
 80072e0:	4601      	mov	r1, r0
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 fbc0 	bl	8007a68 <__pow5mult>
 80072e8:	9b05      	ldr	r3, [sp, #20]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	4606      	mov	r6, r0
 80072ee:	dd76      	ble.n	80073de <_dtoa_r+0x8de>
 80072f0:	2300      	movs	r3, #0
 80072f2:	9306      	str	r3, [sp, #24]
 80072f4:	6933      	ldr	r3, [r6, #16]
 80072f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072fa:	6918      	ldr	r0, [r3, #16]
 80072fc:	f000 faa8 	bl	8007850 <__hi0bits>
 8007300:	f1c0 0020 	rsb	r0, r0, #32
 8007304:	9b04      	ldr	r3, [sp, #16]
 8007306:	4418      	add	r0, r3
 8007308:	f010 001f 	ands.w	r0, r0, #31
 800730c:	f000 8086 	beq.w	800741c <_dtoa_r+0x91c>
 8007310:	f1c0 0320 	rsb	r3, r0, #32
 8007314:	2b04      	cmp	r3, #4
 8007316:	dd7f      	ble.n	8007418 <_dtoa_r+0x918>
 8007318:	f1c0 001c 	rsb	r0, r0, #28
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	4403      	add	r3, r0
 8007320:	4480      	add	r8, r0
 8007322:	4405      	add	r5, r0
 8007324:	9304      	str	r3, [sp, #16]
 8007326:	f1b8 0f00 	cmp.w	r8, #0
 800732a:	dd05      	ble.n	8007338 <_dtoa_r+0x838>
 800732c:	4659      	mov	r1, fp
 800732e:	4642      	mov	r2, r8
 8007330:	4620      	mov	r0, r4
 8007332:	f000 fbf3 	bl	8007b1c <__lshift>
 8007336:	4683      	mov	fp, r0
 8007338:	9b04      	ldr	r3, [sp, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	dd05      	ble.n	800734a <_dtoa_r+0x84a>
 800733e:	4631      	mov	r1, r6
 8007340:	461a      	mov	r2, r3
 8007342:	4620      	mov	r0, r4
 8007344:	f000 fbea 	bl	8007b1c <__lshift>
 8007348:	4606      	mov	r6, r0
 800734a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	d069      	beq.n	8007424 <_dtoa_r+0x924>
 8007350:	4631      	mov	r1, r6
 8007352:	4658      	mov	r0, fp
 8007354:	f000 fc4e 	bl	8007bf4 <__mcmp>
 8007358:	2800      	cmp	r0, #0
 800735a:	da63      	bge.n	8007424 <_dtoa_r+0x924>
 800735c:	2300      	movs	r3, #0
 800735e:	4659      	mov	r1, fp
 8007360:	220a      	movs	r2, #10
 8007362:	4620      	mov	r0, r4
 8007364:	f000 fa2a 	bl	80077bc <__multadd>
 8007368:	9b08      	ldr	r3, [sp, #32]
 800736a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800736e:	4683      	mov	fp, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 818f 	beq.w	8007694 <_dtoa_r+0xb94>
 8007376:	4639      	mov	r1, r7
 8007378:	2300      	movs	r3, #0
 800737a:	220a      	movs	r2, #10
 800737c:	4620      	mov	r0, r4
 800737e:	f000 fa1d 	bl	80077bc <__multadd>
 8007382:	f1b9 0f00 	cmp.w	r9, #0
 8007386:	4607      	mov	r7, r0
 8007388:	f300 808e 	bgt.w	80074a8 <_dtoa_r+0x9a8>
 800738c:	9b05      	ldr	r3, [sp, #20]
 800738e:	2b02      	cmp	r3, #2
 8007390:	dc50      	bgt.n	8007434 <_dtoa_r+0x934>
 8007392:	e089      	b.n	80074a8 <_dtoa_r+0x9a8>
 8007394:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800739a:	e75d      	b.n	8007258 <_dtoa_r+0x758>
 800739c:	9b01      	ldr	r3, [sp, #4]
 800739e:	1e5e      	subs	r6, r3, #1
 80073a0:	9b06      	ldr	r3, [sp, #24]
 80073a2:	42b3      	cmp	r3, r6
 80073a4:	bfbf      	itttt	lt
 80073a6:	9b06      	ldrlt	r3, [sp, #24]
 80073a8:	9606      	strlt	r6, [sp, #24]
 80073aa:	1af2      	sublt	r2, r6, r3
 80073ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80073ae:	bfb6      	itet	lt
 80073b0:	189b      	addlt	r3, r3, r2
 80073b2:	1b9e      	subge	r6, r3, r6
 80073b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80073b6:	9b01      	ldr	r3, [sp, #4]
 80073b8:	bfb8      	it	lt
 80073ba:	2600      	movlt	r6, #0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	bfb5      	itete	lt
 80073c0:	eba8 0503 	sublt.w	r5, r8, r3
 80073c4:	9b01      	ldrge	r3, [sp, #4]
 80073c6:	2300      	movlt	r3, #0
 80073c8:	4645      	movge	r5, r8
 80073ca:	e747      	b.n	800725c <_dtoa_r+0x75c>
 80073cc:	9e06      	ldr	r6, [sp, #24]
 80073ce:	9f08      	ldr	r7, [sp, #32]
 80073d0:	4645      	mov	r5, r8
 80073d2:	e74c      	b.n	800726e <_dtoa_r+0x76e>
 80073d4:	9a06      	ldr	r2, [sp, #24]
 80073d6:	e775      	b.n	80072c4 <_dtoa_r+0x7c4>
 80073d8:	9b05      	ldr	r3, [sp, #20]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	dc18      	bgt.n	8007410 <_dtoa_r+0x910>
 80073de:	9b02      	ldr	r3, [sp, #8]
 80073e0:	b9b3      	cbnz	r3, 8007410 <_dtoa_r+0x910>
 80073e2:	9b03      	ldr	r3, [sp, #12]
 80073e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073e8:	b9a3      	cbnz	r3, 8007414 <_dtoa_r+0x914>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073f0:	0d1b      	lsrs	r3, r3, #20
 80073f2:	051b      	lsls	r3, r3, #20
 80073f4:	b12b      	cbz	r3, 8007402 <_dtoa_r+0x902>
 80073f6:	9b04      	ldr	r3, [sp, #16]
 80073f8:	3301      	adds	r3, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	f108 0801 	add.w	r8, r8, #1
 8007400:	2301      	movs	r3, #1
 8007402:	9306      	str	r3, [sp, #24]
 8007404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007406:	2b00      	cmp	r3, #0
 8007408:	f47f af74 	bne.w	80072f4 <_dtoa_r+0x7f4>
 800740c:	2001      	movs	r0, #1
 800740e:	e779      	b.n	8007304 <_dtoa_r+0x804>
 8007410:	2300      	movs	r3, #0
 8007412:	e7f6      	b.n	8007402 <_dtoa_r+0x902>
 8007414:	9b02      	ldr	r3, [sp, #8]
 8007416:	e7f4      	b.n	8007402 <_dtoa_r+0x902>
 8007418:	d085      	beq.n	8007326 <_dtoa_r+0x826>
 800741a:	4618      	mov	r0, r3
 800741c:	301c      	adds	r0, #28
 800741e:	e77d      	b.n	800731c <_dtoa_r+0x81c>
 8007420:	40240000 	.word	0x40240000
 8007424:	9b01      	ldr	r3, [sp, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	dc38      	bgt.n	800749c <_dtoa_r+0x99c>
 800742a:	9b05      	ldr	r3, [sp, #20]
 800742c:	2b02      	cmp	r3, #2
 800742e:	dd35      	ble.n	800749c <_dtoa_r+0x99c>
 8007430:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007434:	f1b9 0f00 	cmp.w	r9, #0
 8007438:	d10d      	bne.n	8007456 <_dtoa_r+0x956>
 800743a:	4631      	mov	r1, r6
 800743c:	464b      	mov	r3, r9
 800743e:	2205      	movs	r2, #5
 8007440:	4620      	mov	r0, r4
 8007442:	f000 f9bb 	bl	80077bc <__multadd>
 8007446:	4601      	mov	r1, r0
 8007448:	4606      	mov	r6, r0
 800744a:	4658      	mov	r0, fp
 800744c:	f000 fbd2 	bl	8007bf4 <__mcmp>
 8007450:	2800      	cmp	r0, #0
 8007452:	f73f adbd 	bgt.w	8006fd0 <_dtoa_r+0x4d0>
 8007456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007458:	9d00      	ldr	r5, [sp, #0]
 800745a:	ea6f 0a03 	mvn.w	sl, r3
 800745e:	f04f 0800 	mov.w	r8, #0
 8007462:	4631      	mov	r1, r6
 8007464:	4620      	mov	r0, r4
 8007466:	f000 f987 	bl	8007778 <_Bfree>
 800746a:	2f00      	cmp	r7, #0
 800746c:	f43f aeb4 	beq.w	80071d8 <_dtoa_r+0x6d8>
 8007470:	f1b8 0f00 	cmp.w	r8, #0
 8007474:	d005      	beq.n	8007482 <_dtoa_r+0x982>
 8007476:	45b8      	cmp	r8, r7
 8007478:	d003      	beq.n	8007482 <_dtoa_r+0x982>
 800747a:	4641      	mov	r1, r8
 800747c:	4620      	mov	r0, r4
 800747e:	f000 f97b 	bl	8007778 <_Bfree>
 8007482:	4639      	mov	r1, r7
 8007484:	4620      	mov	r0, r4
 8007486:	f000 f977 	bl	8007778 <_Bfree>
 800748a:	e6a5      	b.n	80071d8 <_dtoa_r+0x6d8>
 800748c:	2600      	movs	r6, #0
 800748e:	4637      	mov	r7, r6
 8007490:	e7e1      	b.n	8007456 <_dtoa_r+0x956>
 8007492:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007494:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007498:	4637      	mov	r7, r6
 800749a:	e599      	b.n	8006fd0 <_dtoa_r+0x4d0>
 800749c:	9b08      	ldr	r3, [sp, #32]
 800749e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 80fd 	beq.w	80076a2 <_dtoa_r+0xba2>
 80074a8:	2d00      	cmp	r5, #0
 80074aa:	dd05      	ble.n	80074b8 <_dtoa_r+0x9b8>
 80074ac:	4639      	mov	r1, r7
 80074ae:	462a      	mov	r2, r5
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 fb33 	bl	8007b1c <__lshift>
 80074b6:	4607      	mov	r7, r0
 80074b8:	9b06      	ldr	r3, [sp, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d05c      	beq.n	8007578 <_dtoa_r+0xa78>
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4620      	mov	r0, r4
 80074c2:	f000 f919 	bl	80076f8 <_Balloc>
 80074c6:	4605      	mov	r5, r0
 80074c8:	b928      	cbnz	r0, 80074d6 <_dtoa_r+0x9d6>
 80074ca:	4b80      	ldr	r3, [pc, #512]	; (80076cc <_dtoa_r+0xbcc>)
 80074cc:	4602      	mov	r2, r0
 80074ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80074d2:	f7ff bb2e 	b.w	8006b32 <_dtoa_r+0x32>
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	3202      	adds	r2, #2
 80074da:	0092      	lsls	r2, r2, #2
 80074dc:	f107 010c 	add.w	r1, r7, #12
 80074e0:	300c      	adds	r0, #12
 80074e2:	f7fe fd25 	bl	8005f30 <memcpy>
 80074e6:	2201      	movs	r2, #1
 80074e8:	4629      	mov	r1, r5
 80074ea:	4620      	mov	r0, r4
 80074ec:	f000 fb16 	bl	8007b1c <__lshift>
 80074f0:	9b00      	ldr	r3, [sp, #0]
 80074f2:	3301      	adds	r3, #1
 80074f4:	9301      	str	r3, [sp, #4]
 80074f6:	9b00      	ldr	r3, [sp, #0]
 80074f8:	444b      	add	r3, r9
 80074fa:	9307      	str	r3, [sp, #28]
 80074fc:	9b02      	ldr	r3, [sp, #8]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	46b8      	mov	r8, r7
 8007504:	9306      	str	r3, [sp, #24]
 8007506:	4607      	mov	r7, r0
 8007508:	9b01      	ldr	r3, [sp, #4]
 800750a:	4631      	mov	r1, r6
 800750c:	3b01      	subs	r3, #1
 800750e:	4658      	mov	r0, fp
 8007510:	9302      	str	r3, [sp, #8]
 8007512:	f7ff fa67 	bl	80069e4 <quorem>
 8007516:	4603      	mov	r3, r0
 8007518:	3330      	adds	r3, #48	; 0x30
 800751a:	9004      	str	r0, [sp, #16]
 800751c:	4641      	mov	r1, r8
 800751e:	4658      	mov	r0, fp
 8007520:	9308      	str	r3, [sp, #32]
 8007522:	f000 fb67 	bl	8007bf4 <__mcmp>
 8007526:	463a      	mov	r2, r7
 8007528:	4681      	mov	r9, r0
 800752a:	4631      	mov	r1, r6
 800752c:	4620      	mov	r0, r4
 800752e:	f000 fb7d 	bl	8007c2c <__mdiff>
 8007532:	68c2      	ldr	r2, [r0, #12]
 8007534:	9b08      	ldr	r3, [sp, #32]
 8007536:	4605      	mov	r5, r0
 8007538:	bb02      	cbnz	r2, 800757c <_dtoa_r+0xa7c>
 800753a:	4601      	mov	r1, r0
 800753c:	4658      	mov	r0, fp
 800753e:	f000 fb59 	bl	8007bf4 <__mcmp>
 8007542:	9b08      	ldr	r3, [sp, #32]
 8007544:	4602      	mov	r2, r0
 8007546:	4629      	mov	r1, r5
 8007548:	4620      	mov	r0, r4
 800754a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800754e:	f000 f913 	bl	8007778 <_Bfree>
 8007552:	9b05      	ldr	r3, [sp, #20]
 8007554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007556:	9d01      	ldr	r5, [sp, #4]
 8007558:	ea43 0102 	orr.w	r1, r3, r2
 800755c:	9b06      	ldr	r3, [sp, #24]
 800755e:	430b      	orrs	r3, r1
 8007560:	9b08      	ldr	r3, [sp, #32]
 8007562:	d10d      	bne.n	8007580 <_dtoa_r+0xa80>
 8007564:	2b39      	cmp	r3, #57	; 0x39
 8007566:	d029      	beq.n	80075bc <_dtoa_r+0xabc>
 8007568:	f1b9 0f00 	cmp.w	r9, #0
 800756c:	dd01      	ble.n	8007572 <_dtoa_r+0xa72>
 800756e:	9b04      	ldr	r3, [sp, #16]
 8007570:	3331      	adds	r3, #49	; 0x31
 8007572:	9a02      	ldr	r2, [sp, #8]
 8007574:	7013      	strb	r3, [r2, #0]
 8007576:	e774      	b.n	8007462 <_dtoa_r+0x962>
 8007578:	4638      	mov	r0, r7
 800757a:	e7b9      	b.n	80074f0 <_dtoa_r+0x9f0>
 800757c:	2201      	movs	r2, #1
 800757e:	e7e2      	b.n	8007546 <_dtoa_r+0xa46>
 8007580:	f1b9 0f00 	cmp.w	r9, #0
 8007584:	db06      	blt.n	8007594 <_dtoa_r+0xa94>
 8007586:	9905      	ldr	r1, [sp, #20]
 8007588:	ea41 0909 	orr.w	r9, r1, r9
 800758c:	9906      	ldr	r1, [sp, #24]
 800758e:	ea59 0101 	orrs.w	r1, r9, r1
 8007592:	d120      	bne.n	80075d6 <_dtoa_r+0xad6>
 8007594:	2a00      	cmp	r2, #0
 8007596:	ddec      	ble.n	8007572 <_dtoa_r+0xa72>
 8007598:	4659      	mov	r1, fp
 800759a:	2201      	movs	r2, #1
 800759c:	4620      	mov	r0, r4
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	f000 fabc 	bl	8007b1c <__lshift>
 80075a4:	4631      	mov	r1, r6
 80075a6:	4683      	mov	fp, r0
 80075a8:	f000 fb24 	bl	8007bf4 <__mcmp>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	9b01      	ldr	r3, [sp, #4]
 80075b0:	dc02      	bgt.n	80075b8 <_dtoa_r+0xab8>
 80075b2:	d1de      	bne.n	8007572 <_dtoa_r+0xa72>
 80075b4:	07da      	lsls	r2, r3, #31
 80075b6:	d5dc      	bpl.n	8007572 <_dtoa_r+0xa72>
 80075b8:	2b39      	cmp	r3, #57	; 0x39
 80075ba:	d1d8      	bne.n	800756e <_dtoa_r+0xa6e>
 80075bc:	9a02      	ldr	r2, [sp, #8]
 80075be:	2339      	movs	r3, #57	; 0x39
 80075c0:	7013      	strb	r3, [r2, #0]
 80075c2:	462b      	mov	r3, r5
 80075c4:	461d      	mov	r5, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075cc:	2a39      	cmp	r2, #57	; 0x39
 80075ce:	d050      	beq.n	8007672 <_dtoa_r+0xb72>
 80075d0:	3201      	adds	r2, #1
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	e745      	b.n	8007462 <_dtoa_r+0x962>
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	dd03      	ble.n	80075e2 <_dtoa_r+0xae2>
 80075da:	2b39      	cmp	r3, #57	; 0x39
 80075dc:	d0ee      	beq.n	80075bc <_dtoa_r+0xabc>
 80075de:	3301      	adds	r3, #1
 80075e0:	e7c7      	b.n	8007572 <_dtoa_r+0xa72>
 80075e2:	9a01      	ldr	r2, [sp, #4]
 80075e4:	9907      	ldr	r1, [sp, #28]
 80075e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80075ea:	428a      	cmp	r2, r1
 80075ec:	d02a      	beq.n	8007644 <_dtoa_r+0xb44>
 80075ee:	4659      	mov	r1, fp
 80075f0:	2300      	movs	r3, #0
 80075f2:	220a      	movs	r2, #10
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 f8e1 	bl	80077bc <__multadd>
 80075fa:	45b8      	cmp	r8, r7
 80075fc:	4683      	mov	fp, r0
 80075fe:	f04f 0300 	mov.w	r3, #0
 8007602:	f04f 020a 	mov.w	r2, #10
 8007606:	4641      	mov	r1, r8
 8007608:	4620      	mov	r0, r4
 800760a:	d107      	bne.n	800761c <_dtoa_r+0xb1c>
 800760c:	f000 f8d6 	bl	80077bc <__multadd>
 8007610:	4680      	mov	r8, r0
 8007612:	4607      	mov	r7, r0
 8007614:	9b01      	ldr	r3, [sp, #4]
 8007616:	3301      	adds	r3, #1
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	e775      	b.n	8007508 <_dtoa_r+0xa08>
 800761c:	f000 f8ce 	bl	80077bc <__multadd>
 8007620:	4639      	mov	r1, r7
 8007622:	4680      	mov	r8, r0
 8007624:	2300      	movs	r3, #0
 8007626:	220a      	movs	r2, #10
 8007628:	4620      	mov	r0, r4
 800762a:	f000 f8c7 	bl	80077bc <__multadd>
 800762e:	4607      	mov	r7, r0
 8007630:	e7f0      	b.n	8007614 <_dtoa_r+0xb14>
 8007632:	f1b9 0f00 	cmp.w	r9, #0
 8007636:	9a00      	ldr	r2, [sp, #0]
 8007638:	bfcc      	ite	gt
 800763a:	464d      	movgt	r5, r9
 800763c:	2501      	movle	r5, #1
 800763e:	4415      	add	r5, r2
 8007640:	f04f 0800 	mov.w	r8, #0
 8007644:	4659      	mov	r1, fp
 8007646:	2201      	movs	r2, #1
 8007648:	4620      	mov	r0, r4
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	f000 fa66 	bl	8007b1c <__lshift>
 8007650:	4631      	mov	r1, r6
 8007652:	4683      	mov	fp, r0
 8007654:	f000 face 	bl	8007bf4 <__mcmp>
 8007658:	2800      	cmp	r0, #0
 800765a:	dcb2      	bgt.n	80075c2 <_dtoa_r+0xac2>
 800765c:	d102      	bne.n	8007664 <_dtoa_r+0xb64>
 800765e:	9b01      	ldr	r3, [sp, #4]
 8007660:	07db      	lsls	r3, r3, #31
 8007662:	d4ae      	bmi.n	80075c2 <_dtoa_r+0xac2>
 8007664:	462b      	mov	r3, r5
 8007666:	461d      	mov	r5, r3
 8007668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800766c:	2a30      	cmp	r2, #48	; 0x30
 800766e:	d0fa      	beq.n	8007666 <_dtoa_r+0xb66>
 8007670:	e6f7      	b.n	8007462 <_dtoa_r+0x962>
 8007672:	9a00      	ldr	r2, [sp, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	d1a5      	bne.n	80075c4 <_dtoa_r+0xac4>
 8007678:	f10a 0a01 	add.w	sl, sl, #1
 800767c:	2331      	movs	r3, #49	; 0x31
 800767e:	e779      	b.n	8007574 <_dtoa_r+0xa74>
 8007680:	4b13      	ldr	r3, [pc, #76]	; (80076d0 <_dtoa_r+0xbd0>)
 8007682:	f7ff baaf 	b.w	8006be4 <_dtoa_r+0xe4>
 8007686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007688:	2b00      	cmp	r3, #0
 800768a:	f47f aa86 	bne.w	8006b9a <_dtoa_r+0x9a>
 800768e:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <_dtoa_r+0xbd4>)
 8007690:	f7ff baa8 	b.w	8006be4 <_dtoa_r+0xe4>
 8007694:	f1b9 0f00 	cmp.w	r9, #0
 8007698:	dc03      	bgt.n	80076a2 <_dtoa_r+0xba2>
 800769a:	9b05      	ldr	r3, [sp, #20]
 800769c:	2b02      	cmp	r3, #2
 800769e:	f73f aec9 	bgt.w	8007434 <_dtoa_r+0x934>
 80076a2:	9d00      	ldr	r5, [sp, #0]
 80076a4:	4631      	mov	r1, r6
 80076a6:	4658      	mov	r0, fp
 80076a8:	f7ff f99c 	bl	80069e4 <quorem>
 80076ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80076b0:	f805 3b01 	strb.w	r3, [r5], #1
 80076b4:	9a00      	ldr	r2, [sp, #0]
 80076b6:	1aaa      	subs	r2, r5, r2
 80076b8:	4591      	cmp	r9, r2
 80076ba:	ddba      	ble.n	8007632 <_dtoa_r+0xb32>
 80076bc:	4659      	mov	r1, fp
 80076be:	2300      	movs	r3, #0
 80076c0:	220a      	movs	r2, #10
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 f87a 	bl	80077bc <__multadd>
 80076c8:	4683      	mov	fp, r0
 80076ca:	e7eb      	b.n	80076a4 <_dtoa_r+0xba4>
 80076cc:	0800b8bf 	.word	0x0800b8bf
 80076d0:	0800b818 	.word	0x0800b818
 80076d4:	0800b83c 	.word	0x0800b83c

080076d8 <_localeconv_r>:
 80076d8:	4800      	ldr	r0, [pc, #0]	; (80076dc <_localeconv_r+0x4>)
 80076da:	4770      	bx	lr
 80076dc:	20000738 	.word	0x20000738

080076e0 <__malloc_lock>:
 80076e0:	4801      	ldr	r0, [pc, #4]	; (80076e8 <__malloc_lock+0x8>)
 80076e2:	f000 bd48 	b.w	8008176 <__retarget_lock_acquire_recursive>
 80076e6:	bf00      	nop
 80076e8:	200009f4 	.word	0x200009f4

080076ec <__malloc_unlock>:
 80076ec:	4801      	ldr	r0, [pc, #4]	; (80076f4 <__malloc_unlock+0x8>)
 80076ee:	f000 bd43 	b.w	8008178 <__retarget_lock_release_recursive>
 80076f2:	bf00      	nop
 80076f4:	200009f4 	.word	0x200009f4

080076f8 <_Balloc>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076fc:	4604      	mov	r4, r0
 80076fe:	460d      	mov	r5, r1
 8007700:	b976      	cbnz	r6, 8007720 <_Balloc+0x28>
 8007702:	2010      	movs	r0, #16
 8007704:	f7fe fc0c 	bl	8005f20 <malloc>
 8007708:	4602      	mov	r2, r0
 800770a:	6260      	str	r0, [r4, #36]	; 0x24
 800770c:	b920      	cbnz	r0, 8007718 <_Balloc+0x20>
 800770e:	4b18      	ldr	r3, [pc, #96]	; (8007770 <_Balloc+0x78>)
 8007710:	4818      	ldr	r0, [pc, #96]	; (8007774 <_Balloc+0x7c>)
 8007712:	2166      	movs	r1, #102	; 0x66
 8007714:	f000 fcfe 	bl	8008114 <__assert_func>
 8007718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800771c:	6006      	str	r6, [r0, #0]
 800771e:	60c6      	str	r6, [r0, #12]
 8007720:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007722:	68f3      	ldr	r3, [r6, #12]
 8007724:	b183      	cbz	r3, 8007748 <_Balloc+0x50>
 8007726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800772e:	b9b8      	cbnz	r0, 8007760 <_Balloc+0x68>
 8007730:	2101      	movs	r1, #1
 8007732:	fa01 f605 	lsl.w	r6, r1, r5
 8007736:	1d72      	adds	r2, r6, #5
 8007738:	0092      	lsls	r2, r2, #2
 800773a:	4620      	mov	r0, r4
 800773c:	f000 fb5a 	bl	8007df4 <_calloc_r>
 8007740:	b160      	cbz	r0, 800775c <_Balloc+0x64>
 8007742:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007746:	e00e      	b.n	8007766 <_Balloc+0x6e>
 8007748:	2221      	movs	r2, #33	; 0x21
 800774a:	2104      	movs	r1, #4
 800774c:	4620      	mov	r0, r4
 800774e:	f000 fb51 	bl	8007df4 <_calloc_r>
 8007752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007754:	60f0      	str	r0, [r6, #12]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e4      	bne.n	8007726 <_Balloc+0x2e>
 800775c:	2000      	movs	r0, #0
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	6802      	ldr	r2, [r0, #0]
 8007762:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007766:	2300      	movs	r3, #0
 8007768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800776c:	e7f7      	b.n	800775e <_Balloc+0x66>
 800776e:	bf00      	nop
 8007770:	0800b849 	.word	0x0800b849
 8007774:	0800b8d0 	.word	0x0800b8d0

08007778 <_Bfree>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800777c:	4605      	mov	r5, r0
 800777e:	460c      	mov	r4, r1
 8007780:	b976      	cbnz	r6, 80077a0 <_Bfree+0x28>
 8007782:	2010      	movs	r0, #16
 8007784:	f7fe fbcc 	bl	8005f20 <malloc>
 8007788:	4602      	mov	r2, r0
 800778a:	6268      	str	r0, [r5, #36]	; 0x24
 800778c:	b920      	cbnz	r0, 8007798 <_Bfree+0x20>
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <_Bfree+0x3c>)
 8007790:	4809      	ldr	r0, [pc, #36]	; (80077b8 <_Bfree+0x40>)
 8007792:	218a      	movs	r1, #138	; 0x8a
 8007794:	f000 fcbe 	bl	8008114 <__assert_func>
 8007798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800779c:	6006      	str	r6, [r0, #0]
 800779e:	60c6      	str	r6, [r0, #12]
 80077a0:	b13c      	cbz	r4, 80077b2 <_Bfree+0x3a>
 80077a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077a4:	6862      	ldr	r2, [r4, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077ac:	6021      	str	r1, [r4, #0]
 80077ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077b2:	bd70      	pop	{r4, r5, r6, pc}
 80077b4:	0800b849 	.word	0x0800b849
 80077b8:	0800b8d0 	.word	0x0800b8d0

080077bc <__multadd>:
 80077bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c0:	690e      	ldr	r6, [r1, #16]
 80077c2:	4607      	mov	r7, r0
 80077c4:	4698      	mov	r8, r3
 80077c6:	460c      	mov	r4, r1
 80077c8:	f101 0014 	add.w	r0, r1, #20
 80077cc:	2300      	movs	r3, #0
 80077ce:	6805      	ldr	r5, [r0, #0]
 80077d0:	b2a9      	uxth	r1, r5
 80077d2:	fb02 8101 	mla	r1, r2, r1, r8
 80077d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80077da:	0c2d      	lsrs	r5, r5, #16
 80077dc:	fb02 c505 	mla	r5, r2, r5, ip
 80077e0:	b289      	uxth	r1, r1
 80077e2:	3301      	adds	r3, #1
 80077e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80077e8:	429e      	cmp	r6, r3
 80077ea:	f840 1b04 	str.w	r1, [r0], #4
 80077ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80077f2:	dcec      	bgt.n	80077ce <__multadd+0x12>
 80077f4:	f1b8 0f00 	cmp.w	r8, #0
 80077f8:	d022      	beq.n	8007840 <__multadd+0x84>
 80077fa:	68a3      	ldr	r3, [r4, #8]
 80077fc:	42b3      	cmp	r3, r6
 80077fe:	dc19      	bgt.n	8007834 <__multadd+0x78>
 8007800:	6861      	ldr	r1, [r4, #4]
 8007802:	4638      	mov	r0, r7
 8007804:	3101      	adds	r1, #1
 8007806:	f7ff ff77 	bl	80076f8 <_Balloc>
 800780a:	4605      	mov	r5, r0
 800780c:	b928      	cbnz	r0, 800781a <__multadd+0x5e>
 800780e:	4602      	mov	r2, r0
 8007810:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <__multadd+0x8c>)
 8007812:	480e      	ldr	r0, [pc, #56]	; (800784c <__multadd+0x90>)
 8007814:	21b5      	movs	r1, #181	; 0xb5
 8007816:	f000 fc7d 	bl	8008114 <__assert_func>
 800781a:	6922      	ldr	r2, [r4, #16]
 800781c:	3202      	adds	r2, #2
 800781e:	f104 010c 	add.w	r1, r4, #12
 8007822:	0092      	lsls	r2, r2, #2
 8007824:	300c      	adds	r0, #12
 8007826:	f7fe fb83 	bl	8005f30 <memcpy>
 800782a:	4621      	mov	r1, r4
 800782c:	4638      	mov	r0, r7
 800782e:	f7ff ffa3 	bl	8007778 <_Bfree>
 8007832:	462c      	mov	r4, r5
 8007834:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007838:	3601      	adds	r6, #1
 800783a:	f8c3 8014 	str.w	r8, [r3, #20]
 800783e:	6126      	str	r6, [r4, #16]
 8007840:	4620      	mov	r0, r4
 8007842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007846:	bf00      	nop
 8007848:	0800b8bf 	.word	0x0800b8bf
 800784c:	0800b8d0 	.word	0x0800b8d0

08007850 <__hi0bits>:
 8007850:	0c03      	lsrs	r3, r0, #16
 8007852:	041b      	lsls	r3, r3, #16
 8007854:	b9d3      	cbnz	r3, 800788c <__hi0bits+0x3c>
 8007856:	0400      	lsls	r0, r0, #16
 8007858:	2310      	movs	r3, #16
 800785a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800785e:	bf04      	itt	eq
 8007860:	0200      	lsleq	r0, r0, #8
 8007862:	3308      	addeq	r3, #8
 8007864:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007868:	bf04      	itt	eq
 800786a:	0100      	lsleq	r0, r0, #4
 800786c:	3304      	addeq	r3, #4
 800786e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007872:	bf04      	itt	eq
 8007874:	0080      	lsleq	r0, r0, #2
 8007876:	3302      	addeq	r3, #2
 8007878:	2800      	cmp	r0, #0
 800787a:	db05      	blt.n	8007888 <__hi0bits+0x38>
 800787c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007880:	f103 0301 	add.w	r3, r3, #1
 8007884:	bf08      	it	eq
 8007886:	2320      	moveq	r3, #32
 8007888:	4618      	mov	r0, r3
 800788a:	4770      	bx	lr
 800788c:	2300      	movs	r3, #0
 800788e:	e7e4      	b.n	800785a <__hi0bits+0xa>

08007890 <__lo0bits>:
 8007890:	6803      	ldr	r3, [r0, #0]
 8007892:	f013 0207 	ands.w	r2, r3, #7
 8007896:	4601      	mov	r1, r0
 8007898:	d00b      	beq.n	80078b2 <__lo0bits+0x22>
 800789a:	07da      	lsls	r2, r3, #31
 800789c:	d424      	bmi.n	80078e8 <__lo0bits+0x58>
 800789e:	0798      	lsls	r0, r3, #30
 80078a0:	bf49      	itett	mi
 80078a2:	085b      	lsrmi	r3, r3, #1
 80078a4:	089b      	lsrpl	r3, r3, #2
 80078a6:	2001      	movmi	r0, #1
 80078a8:	600b      	strmi	r3, [r1, #0]
 80078aa:	bf5c      	itt	pl
 80078ac:	600b      	strpl	r3, [r1, #0]
 80078ae:	2002      	movpl	r0, #2
 80078b0:	4770      	bx	lr
 80078b2:	b298      	uxth	r0, r3
 80078b4:	b9b0      	cbnz	r0, 80078e4 <__lo0bits+0x54>
 80078b6:	0c1b      	lsrs	r3, r3, #16
 80078b8:	2010      	movs	r0, #16
 80078ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80078be:	bf04      	itt	eq
 80078c0:	0a1b      	lsreq	r3, r3, #8
 80078c2:	3008      	addeq	r0, #8
 80078c4:	071a      	lsls	r2, r3, #28
 80078c6:	bf04      	itt	eq
 80078c8:	091b      	lsreq	r3, r3, #4
 80078ca:	3004      	addeq	r0, #4
 80078cc:	079a      	lsls	r2, r3, #30
 80078ce:	bf04      	itt	eq
 80078d0:	089b      	lsreq	r3, r3, #2
 80078d2:	3002      	addeq	r0, #2
 80078d4:	07da      	lsls	r2, r3, #31
 80078d6:	d403      	bmi.n	80078e0 <__lo0bits+0x50>
 80078d8:	085b      	lsrs	r3, r3, #1
 80078da:	f100 0001 	add.w	r0, r0, #1
 80078de:	d005      	beq.n	80078ec <__lo0bits+0x5c>
 80078e0:	600b      	str	r3, [r1, #0]
 80078e2:	4770      	bx	lr
 80078e4:	4610      	mov	r0, r2
 80078e6:	e7e8      	b.n	80078ba <__lo0bits+0x2a>
 80078e8:	2000      	movs	r0, #0
 80078ea:	4770      	bx	lr
 80078ec:	2020      	movs	r0, #32
 80078ee:	4770      	bx	lr

080078f0 <__i2b>:
 80078f0:	b510      	push	{r4, lr}
 80078f2:	460c      	mov	r4, r1
 80078f4:	2101      	movs	r1, #1
 80078f6:	f7ff feff 	bl	80076f8 <_Balloc>
 80078fa:	4602      	mov	r2, r0
 80078fc:	b928      	cbnz	r0, 800790a <__i2b+0x1a>
 80078fe:	4b05      	ldr	r3, [pc, #20]	; (8007914 <__i2b+0x24>)
 8007900:	4805      	ldr	r0, [pc, #20]	; (8007918 <__i2b+0x28>)
 8007902:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007906:	f000 fc05 	bl	8008114 <__assert_func>
 800790a:	2301      	movs	r3, #1
 800790c:	6144      	str	r4, [r0, #20]
 800790e:	6103      	str	r3, [r0, #16]
 8007910:	bd10      	pop	{r4, pc}
 8007912:	bf00      	nop
 8007914:	0800b8bf 	.word	0x0800b8bf
 8007918:	0800b8d0 	.word	0x0800b8d0

0800791c <__multiply>:
 800791c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	4614      	mov	r4, r2
 8007922:	690a      	ldr	r2, [r1, #16]
 8007924:	6923      	ldr	r3, [r4, #16]
 8007926:	429a      	cmp	r2, r3
 8007928:	bfb8      	it	lt
 800792a:	460b      	movlt	r3, r1
 800792c:	460d      	mov	r5, r1
 800792e:	bfbc      	itt	lt
 8007930:	4625      	movlt	r5, r4
 8007932:	461c      	movlt	r4, r3
 8007934:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007938:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800793c:	68ab      	ldr	r3, [r5, #8]
 800793e:	6869      	ldr	r1, [r5, #4]
 8007940:	eb0a 0709 	add.w	r7, sl, r9
 8007944:	42bb      	cmp	r3, r7
 8007946:	b085      	sub	sp, #20
 8007948:	bfb8      	it	lt
 800794a:	3101      	addlt	r1, #1
 800794c:	f7ff fed4 	bl	80076f8 <_Balloc>
 8007950:	b930      	cbnz	r0, 8007960 <__multiply+0x44>
 8007952:	4602      	mov	r2, r0
 8007954:	4b42      	ldr	r3, [pc, #264]	; (8007a60 <__multiply+0x144>)
 8007956:	4843      	ldr	r0, [pc, #268]	; (8007a64 <__multiply+0x148>)
 8007958:	f240 115d 	movw	r1, #349	; 0x15d
 800795c:	f000 fbda 	bl	8008114 <__assert_func>
 8007960:	f100 0614 	add.w	r6, r0, #20
 8007964:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007968:	4633      	mov	r3, r6
 800796a:	2200      	movs	r2, #0
 800796c:	4543      	cmp	r3, r8
 800796e:	d31e      	bcc.n	80079ae <__multiply+0x92>
 8007970:	f105 0c14 	add.w	ip, r5, #20
 8007974:	f104 0314 	add.w	r3, r4, #20
 8007978:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800797c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007980:	9202      	str	r2, [sp, #8]
 8007982:	ebac 0205 	sub.w	r2, ip, r5
 8007986:	3a15      	subs	r2, #21
 8007988:	f022 0203 	bic.w	r2, r2, #3
 800798c:	3204      	adds	r2, #4
 800798e:	f105 0115 	add.w	r1, r5, #21
 8007992:	458c      	cmp	ip, r1
 8007994:	bf38      	it	cc
 8007996:	2204      	movcc	r2, #4
 8007998:	9201      	str	r2, [sp, #4]
 800799a:	9a02      	ldr	r2, [sp, #8]
 800799c:	9303      	str	r3, [sp, #12]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d808      	bhi.n	80079b4 <__multiply+0x98>
 80079a2:	2f00      	cmp	r7, #0
 80079a4:	dc55      	bgt.n	8007a52 <__multiply+0x136>
 80079a6:	6107      	str	r7, [r0, #16]
 80079a8:	b005      	add	sp, #20
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	f843 2b04 	str.w	r2, [r3], #4
 80079b2:	e7db      	b.n	800796c <__multiply+0x50>
 80079b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80079b8:	f1ba 0f00 	cmp.w	sl, #0
 80079bc:	d020      	beq.n	8007a00 <__multiply+0xe4>
 80079be:	f105 0e14 	add.w	lr, r5, #20
 80079c2:	46b1      	mov	r9, r6
 80079c4:	2200      	movs	r2, #0
 80079c6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80079ca:	f8d9 b000 	ldr.w	fp, [r9]
 80079ce:	b2a1      	uxth	r1, r4
 80079d0:	fa1f fb8b 	uxth.w	fp, fp
 80079d4:	fb0a b101 	mla	r1, sl, r1, fp
 80079d8:	4411      	add	r1, r2
 80079da:	f8d9 2000 	ldr.w	r2, [r9]
 80079de:	0c24      	lsrs	r4, r4, #16
 80079e0:	0c12      	lsrs	r2, r2, #16
 80079e2:	fb0a 2404 	mla	r4, sl, r4, r2
 80079e6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80079ea:	b289      	uxth	r1, r1
 80079ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80079f0:	45f4      	cmp	ip, lr
 80079f2:	f849 1b04 	str.w	r1, [r9], #4
 80079f6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80079fa:	d8e4      	bhi.n	80079c6 <__multiply+0xaa>
 80079fc:	9901      	ldr	r1, [sp, #4]
 80079fe:	5072      	str	r2, [r6, r1]
 8007a00:	9a03      	ldr	r2, [sp, #12]
 8007a02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a06:	3304      	adds	r3, #4
 8007a08:	f1b9 0f00 	cmp.w	r9, #0
 8007a0c:	d01f      	beq.n	8007a4e <__multiply+0x132>
 8007a0e:	6834      	ldr	r4, [r6, #0]
 8007a10:	f105 0114 	add.w	r1, r5, #20
 8007a14:	46b6      	mov	lr, r6
 8007a16:	f04f 0a00 	mov.w	sl, #0
 8007a1a:	880a      	ldrh	r2, [r1, #0]
 8007a1c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007a20:	fb09 b202 	mla	r2, r9, r2, fp
 8007a24:	4492      	add	sl, r2
 8007a26:	b2a4      	uxth	r4, r4
 8007a28:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007a2c:	f84e 4b04 	str.w	r4, [lr], #4
 8007a30:	f851 4b04 	ldr.w	r4, [r1], #4
 8007a34:	f8be 2000 	ldrh.w	r2, [lr]
 8007a38:	0c24      	lsrs	r4, r4, #16
 8007a3a:	fb09 2404 	mla	r4, r9, r4, r2
 8007a3e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007a42:	458c      	cmp	ip, r1
 8007a44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007a48:	d8e7      	bhi.n	8007a1a <__multiply+0xfe>
 8007a4a:	9a01      	ldr	r2, [sp, #4]
 8007a4c:	50b4      	str	r4, [r6, r2]
 8007a4e:	3604      	adds	r6, #4
 8007a50:	e7a3      	b.n	800799a <__multiply+0x7e>
 8007a52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1a5      	bne.n	80079a6 <__multiply+0x8a>
 8007a5a:	3f01      	subs	r7, #1
 8007a5c:	e7a1      	b.n	80079a2 <__multiply+0x86>
 8007a5e:	bf00      	nop
 8007a60:	0800b8bf 	.word	0x0800b8bf
 8007a64:	0800b8d0 	.word	0x0800b8d0

08007a68 <__pow5mult>:
 8007a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a6c:	4615      	mov	r5, r2
 8007a6e:	f012 0203 	ands.w	r2, r2, #3
 8007a72:	4606      	mov	r6, r0
 8007a74:	460f      	mov	r7, r1
 8007a76:	d007      	beq.n	8007a88 <__pow5mult+0x20>
 8007a78:	4c25      	ldr	r4, [pc, #148]	; (8007b10 <__pow5mult+0xa8>)
 8007a7a:	3a01      	subs	r2, #1
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a82:	f7ff fe9b 	bl	80077bc <__multadd>
 8007a86:	4607      	mov	r7, r0
 8007a88:	10ad      	asrs	r5, r5, #2
 8007a8a:	d03d      	beq.n	8007b08 <__pow5mult+0xa0>
 8007a8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007a8e:	b97c      	cbnz	r4, 8007ab0 <__pow5mult+0x48>
 8007a90:	2010      	movs	r0, #16
 8007a92:	f7fe fa45 	bl	8005f20 <malloc>
 8007a96:	4602      	mov	r2, r0
 8007a98:	6270      	str	r0, [r6, #36]	; 0x24
 8007a9a:	b928      	cbnz	r0, 8007aa8 <__pow5mult+0x40>
 8007a9c:	4b1d      	ldr	r3, [pc, #116]	; (8007b14 <__pow5mult+0xac>)
 8007a9e:	481e      	ldr	r0, [pc, #120]	; (8007b18 <__pow5mult+0xb0>)
 8007aa0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007aa4:	f000 fb36 	bl	8008114 <__assert_func>
 8007aa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007aac:	6004      	str	r4, [r0, #0]
 8007aae:	60c4      	str	r4, [r0, #12]
 8007ab0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ab8:	b94c      	cbnz	r4, 8007ace <__pow5mult+0x66>
 8007aba:	f240 2171 	movw	r1, #625	; 0x271
 8007abe:	4630      	mov	r0, r6
 8007ac0:	f7ff ff16 	bl	80078f0 <__i2b>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007aca:	4604      	mov	r4, r0
 8007acc:	6003      	str	r3, [r0, #0]
 8007ace:	f04f 0900 	mov.w	r9, #0
 8007ad2:	07eb      	lsls	r3, r5, #31
 8007ad4:	d50a      	bpl.n	8007aec <__pow5mult+0x84>
 8007ad6:	4639      	mov	r1, r7
 8007ad8:	4622      	mov	r2, r4
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff ff1e 	bl	800791c <__multiply>
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f7ff fe47 	bl	8007778 <_Bfree>
 8007aea:	4647      	mov	r7, r8
 8007aec:	106d      	asrs	r5, r5, #1
 8007aee:	d00b      	beq.n	8007b08 <__pow5mult+0xa0>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	b938      	cbnz	r0, 8007b04 <__pow5mult+0x9c>
 8007af4:	4622      	mov	r2, r4
 8007af6:	4621      	mov	r1, r4
 8007af8:	4630      	mov	r0, r6
 8007afa:	f7ff ff0f 	bl	800791c <__multiply>
 8007afe:	6020      	str	r0, [r4, #0]
 8007b00:	f8c0 9000 	str.w	r9, [r0]
 8007b04:	4604      	mov	r4, r0
 8007b06:	e7e4      	b.n	8007ad2 <__pow5mult+0x6a>
 8007b08:	4638      	mov	r0, r7
 8007b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b0e:	bf00      	nop
 8007b10:	0800ba20 	.word	0x0800ba20
 8007b14:	0800b849 	.word	0x0800b849
 8007b18:	0800b8d0 	.word	0x0800b8d0

08007b1c <__lshift>:
 8007b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b20:	460c      	mov	r4, r1
 8007b22:	6849      	ldr	r1, [r1, #4]
 8007b24:	6923      	ldr	r3, [r4, #16]
 8007b26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b2a:	68a3      	ldr	r3, [r4, #8]
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	4691      	mov	r9, r2
 8007b30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b34:	f108 0601 	add.w	r6, r8, #1
 8007b38:	42b3      	cmp	r3, r6
 8007b3a:	db0b      	blt.n	8007b54 <__lshift+0x38>
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f7ff fddb 	bl	80076f8 <_Balloc>
 8007b42:	4605      	mov	r5, r0
 8007b44:	b948      	cbnz	r0, 8007b5a <__lshift+0x3e>
 8007b46:	4602      	mov	r2, r0
 8007b48:	4b28      	ldr	r3, [pc, #160]	; (8007bec <__lshift+0xd0>)
 8007b4a:	4829      	ldr	r0, [pc, #164]	; (8007bf0 <__lshift+0xd4>)
 8007b4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b50:	f000 fae0 	bl	8008114 <__assert_func>
 8007b54:	3101      	adds	r1, #1
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	e7ee      	b.n	8007b38 <__lshift+0x1c>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f100 0114 	add.w	r1, r0, #20
 8007b60:	f100 0210 	add.w	r2, r0, #16
 8007b64:	4618      	mov	r0, r3
 8007b66:	4553      	cmp	r3, sl
 8007b68:	db33      	blt.n	8007bd2 <__lshift+0xb6>
 8007b6a:	6920      	ldr	r0, [r4, #16]
 8007b6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b70:	f104 0314 	add.w	r3, r4, #20
 8007b74:	f019 091f 	ands.w	r9, r9, #31
 8007b78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b80:	d02b      	beq.n	8007bda <__lshift+0xbe>
 8007b82:	f1c9 0e20 	rsb	lr, r9, #32
 8007b86:	468a      	mov	sl, r1
 8007b88:	2200      	movs	r2, #0
 8007b8a:	6818      	ldr	r0, [r3, #0]
 8007b8c:	fa00 f009 	lsl.w	r0, r0, r9
 8007b90:	4302      	orrs	r2, r0
 8007b92:	f84a 2b04 	str.w	r2, [sl], #4
 8007b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b9a:	459c      	cmp	ip, r3
 8007b9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ba0:	d8f3      	bhi.n	8007b8a <__lshift+0x6e>
 8007ba2:	ebac 0304 	sub.w	r3, ip, r4
 8007ba6:	3b15      	subs	r3, #21
 8007ba8:	f023 0303 	bic.w	r3, r3, #3
 8007bac:	3304      	adds	r3, #4
 8007bae:	f104 0015 	add.w	r0, r4, #21
 8007bb2:	4584      	cmp	ip, r0
 8007bb4:	bf38      	it	cc
 8007bb6:	2304      	movcc	r3, #4
 8007bb8:	50ca      	str	r2, [r1, r3]
 8007bba:	b10a      	cbz	r2, 8007bc0 <__lshift+0xa4>
 8007bbc:	f108 0602 	add.w	r6, r8, #2
 8007bc0:	3e01      	subs	r6, #1
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	612e      	str	r6, [r5, #16]
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	f7ff fdd6 	bl	8007778 <_Bfree>
 8007bcc:	4628      	mov	r0, r5
 8007bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	e7c5      	b.n	8007b66 <__lshift+0x4a>
 8007bda:	3904      	subs	r1, #4
 8007bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007be4:	459c      	cmp	ip, r3
 8007be6:	d8f9      	bhi.n	8007bdc <__lshift+0xc0>
 8007be8:	e7ea      	b.n	8007bc0 <__lshift+0xa4>
 8007bea:	bf00      	nop
 8007bec:	0800b8bf 	.word	0x0800b8bf
 8007bf0:	0800b8d0 	.word	0x0800b8d0

08007bf4 <__mcmp>:
 8007bf4:	b530      	push	{r4, r5, lr}
 8007bf6:	6902      	ldr	r2, [r0, #16]
 8007bf8:	690c      	ldr	r4, [r1, #16]
 8007bfa:	1b12      	subs	r2, r2, r4
 8007bfc:	d10e      	bne.n	8007c1c <__mcmp+0x28>
 8007bfe:	f100 0314 	add.w	r3, r0, #20
 8007c02:	3114      	adds	r1, #20
 8007c04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c14:	42a5      	cmp	r5, r4
 8007c16:	d003      	beq.n	8007c20 <__mcmp+0x2c>
 8007c18:	d305      	bcc.n	8007c26 <__mcmp+0x32>
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	bd30      	pop	{r4, r5, pc}
 8007c20:	4283      	cmp	r3, r0
 8007c22:	d3f3      	bcc.n	8007c0c <__mcmp+0x18>
 8007c24:	e7fa      	b.n	8007c1c <__mcmp+0x28>
 8007c26:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2a:	e7f7      	b.n	8007c1c <__mcmp+0x28>

08007c2c <__mdiff>:
 8007c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	460c      	mov	r4, r1
 8007c32:	4606      	mov	r6, r0
 8007c34:	4611      	mov	r1, r2
 8007c36:	4620      	mov	r0, r4
 8007c38:	4617      	mov	r7, r2
 8007c3a:	f7ff ffdb 	bl	8007bf4 <__mcmp>
 8007c3e:	1e05      	subs	r5, r0, #0
 8007c40:	d110      	bne.n	8007c64 <__mdiff+0x38>
 8007c42:	4629      	mov	r1, r5
 8007c44:	4630      	mov	r0, r6
 8007c46:	f7ff fd57 	bl	80076f8 <_Balloc>
 8007c4a:	b930      	cbnz	r0, 8007c5a <__mdiff+0x2e>
 8007c4c:	4b39      	ldr	r3, [pc, #228]	; (8007d34 <__mdiff+0x108>)
 8007c4e:	4602      	mov	r2, r0
 8007c50:	f240 2132 	movw	r1, #562	; 0x232
 8007c54:	4838      	ldr	r0, [pc, #224]	; (8007d38 <__mdiff+0x10c>)
 8007c56:	f000 fa5d 	bl	8008114 <__assert_func>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c64:	bfa4      	itt	ge
 8007c66:	463b      	movge	r3, r7
 8007c68:	4627      	movge	r7, r4
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	bfa6      	itte	ge
 8007c70:	461c      	movge	r4, r3
 8007c72:	2500      	movge	r5, #0
 8007c74:	2501      	movlt	r5, #1
 8007c76:	f7ff fd3f 	bl	80076f8 <_Balloc>
 8007c7a:	b920      	cbnz	r0, 8007c86 <__mdiff+0x5a>
 8007c7c:	4b2d      	ldr	r3, [pc, #180]	; (8007d34 <__mdiff+0x108>)
 8007c7e:	4602      	mov	r2, r0
 8007c80:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007c84:	e7e6      	b.n	8007c54 <__mdiff+0x28>
 8007c86:	693e      	ldr	r6, [r7, #16]
 8007c88:	60c5      	str	r5, [r0, #12]
 8007c8a:	6925      	ldr	r5, [r4, #16]
 8007c8c:	f107 0114 	add.w	r1, r7, #20
 8007c90:	f104 0914 	add.w	r9, r4, #20
 8007c94:	f100 0e14 	add.w	lr, r0, #20
 8007c98:	f107 0210 	add.w	r2, r7, #16
 8007c9c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007ca0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007ca4:	46f2      	mov	sl, lr
 8007ca6:	2700      	movs	r7, #0
 8007ca8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007cac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007cb0:	fa1f f883 	uxth.w	r8, r3
 8007cb4:	fa17 f78b 	uxtah	r7, r7, fp
 8007cb8:	0c1b      	lsrs	r3, r3, #16
 8007cba:	eba7 0808 	sub.w	r8, r7, r8
 8007cbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007cc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007cc6:	fa1f f888 	uxth.w	r8, r8
 8007cca:	141f      	asrs	r7, r3, #16
 8007ccc:	454d      	cmp	r5, r9
 8007cce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007cd2:	f84a 3b04 	str.w	r3, [sl], #4
 8007cd6:	d8e7      	bhi.n	8007ca8 <__mdiff+0x7c>
 8007cd8:	1b2b      	subs	r3, r5, r4
 8007cda:	3b15      	subs	r3, #21
 8007cdc:	f023 0303 	bic.w	r3, r3, #3
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	3415      	adds	r4, #21
 8007ce4:	42a5      	cmp	r5, r4
 8007ce6:	bf38      	it	cc
 8007ce8:	2304      	movcc	r3, #4
 8007cea:	4419      	add	r1, r3
 8007cec:	4473      	add	r3, lr
 8007cee:	469e      	mov	lr, r3
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	4565      	cmp	r5, ip
 8007cf4:	d30e      	bcc.n	8007d14 <__mdiff+0xe8>
 8007cf6:	f10c 0203 	add.w	r2, ip, #3
 8007cfa:	1a52      	subs	r2, r2, r1
 8007cfc:	f022 0203 	bic.w	r2, r2, #3
 8007d00:	3903      	subs	r1, #3
 8007d02:	458c      	cmp	ip, r1
 8007d04:	bf38      	it	cc
 8007d06:	2200      	movcc	r2, #0
 8007d08:	441a      	add	r2, r3
 8007d0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d0e:	b17b      	cbz	r3, 8007d30 <__mdiff+0x104>
 8007d10:	6106      	str	r6, [r0, #16]
 8007d12:	e7a5      	b.n	8007c60 <__mdiff+0x34>
 8007d14:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d18:	fa17 f488 	uxtah	r4, r7, r8
 8007d1c:	1422      	asrs	r2, r4, #16
 8007d1e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007d22:	b2a4      	uxth	r4, r4
 8007d24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007d28:	f84e 4b04 	str.w	r4, [lr], #4
 8007d2c:	1417      	asrs	r7, r2, #16
 8007d2e:	e7e0      	b.n	8007cf2 <__mdiff+0xc6>
 8007d30:	3e01      	subs	r6, #1
 8007d32:	e7ea      	b.n	8007d0a <__mdiff+0xde>
 8007d34:	0800b8bf 	.word	0x0800b8bf
 8007d38:	0800b8d0 	.word	0x0800b8d0

08007d3c <__d2b>:
 8007d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d40:	4689      	mov	r9, r1
 8007d42:	2101      	movs	r1, #1
 8007d44:	ec57 6b10 	vmov	r6, r7, d0
 8007d48:	4690      	mov	r8, r2
 8007d4a:	f7ff fcd5 	bl	80076f8 <_Balloc>
 8007d4e:	4604      	mov	r4, r0
 8007d50:	b930      	cbnz	r0, 8007d60 <__d2b+0x24>
 8007d52:	4602      	mov	r2, r0
 8007d54:	4b25      	ldr	r3, [pc, #148]	; (8007dec <__d2b+0xb0>)
 8007d56:	4826      	ldr	r0, [pc, #152]	; (8007df0 <__d2b+0xb4>)
 8007d58:	f240 310a 	movw	r1, #778	; 0x30a
 8007d5c:	f000 f9da 	bl	8008114 <__assert_func>
 8007d60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007d64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d68:	bb35      	cbnz	r5, 8007db8 <__d2b+0x7c>
 8007d6a:	2e00      	cmp	r6, #0
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	d028      	beq.n	8007dc2 <__d2b+0x86>
 8007d70:	4668      	mov	r0, sp
 8007d72:	9600      	str	r6, [sp, #0]
 8007d74:	f7ff fd8c 	bl	8007890 <__lo0bits>
 8007d78:	9900      	ldr	r1, [sp, #0]
 8007d7a:	b300      	cbz	r0, 8007dbe <__d2b+0x82>
 8007d7c:	9a01      	ldr	r2, [sp, #4]
 8007d7e:	f1c0 0320 	rsb	r3, r0, #32
 8007d82:	fa02 f303 	lsl.w	r3, r2, r3
 8007d86:	430b      	orrs	r3, r1
 8007d88:	40c2      	lsrs	r2, r0
 8007d8a:	6163      	str	r3, [r4, #20]
 8007d8c:	9201      	str	r2, [sp, #4]
 8007d8e:	9b01      	ldr	r3, [sp, #4]
 8007d90:	61a3      	str	r3, [r4, #24]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bf14      	ite	ne
 8007d96:	2202      	movne	r2, #2
 8007d98:	2201      	moveq	r2, #1
 8007d9a:	6122      	str	r2, [r4, #16]
 8007d9c:	b1d5      	cbz	r5, 8007dd4 <__d2b+0x98>
 8007d9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007da2:	4405      	add	r5, r0
 8007da4:	f8c9 5000 	str.w	r5, [r9]
 8007da8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007dac:	f8c8 0000 	str.w	r0, [r8]
 8007db0:	4620      	mov	r0, r4
 8007db2:	b003      	add	sp, #12
 8007db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007db8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dbc:	e7d5      	b.n	8007d6a <__d2b+0x2e>
 8007dbe:	6161      	str	r1, [r4, #20]
 8007dc0:	e7e5      	b.n	8007d8e <__d2b+0x52>
 8007dc2:	a801      	add	r0, sp, #4
 8007dc4:	f7ff fd64 	bl	8007890 <__lo0bits>
 8007dc8:	9b01      	ldr	r3, [sp, #4]
 8007dca:	6163      	str	r3, [r4, #20]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	6122      	str	r2, [r4, #16]
 8007dd0:	3020      	adds	r0, #32
 8007dd2:	e7e3      	b.n	8007d9c <__d2b+0x60>
 8007dd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ddc:	f8c9 0000 	str.w	r0, [r9]
 8007de0:	6918      	ldr	r0, [r3, #16]
 8007de2:	f7ff fd35 	bl	8007850 <__hi0bits>
 8007de6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007dea:	e7df      	b.n	8007dac <__d2b+0x70>
 8007dec:	0800b8bf 	.word	0x0800b8bf
 8007df0:	0800b8d0 	.word	0x0800b8d0

08007df4 <_calloc_r>:
 8007df4:	b513      	push	{r0, r1, r4, lr}
 8007df6:	434a      	muls	r2, r1
 8007df8:	4611      	mov	r1, r2
 8007dfa:	9201      	str	r2, [sp, #4]
 8007dfc:	f7fe f8fe 	bl	8005ffc <_malloc_r>
 8007e00:	4604      	mov	r4, r0
 8007e02:	b118      	cbz	r0, 8007e0c <_calloc_r+0x18>
 8007e04:	9a01      	ldr	r2, [sp, #4]
 8007e06:	2100      	movs	r1, #0
 8007e08:	f7fe f8a0 	bl	8005f4c <memset>
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	b002      	add	sp, #8
 8007e10:	bd10      	pop	{r4, pc}

08007e12 <_realloc_r>:
 8007e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e14:	4607      	mov	r7, r0
 8007e16:	4614      	mov	r4, r2
 8007e18:	460e      	mov	r6, r1
 8007e1a:	b921      	cbnz	r1, 8007e26 <_realloc_r+0x14>
 8007e1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e20:	4611      	mov	r1, r2
 8007e22:	f7fe b8eb 	b.w	8005ffc <_malloc_r>
 8007e26:	b922      	cbnz	r2, 8007e32 <_realloc_r+0x20>
 8007e28:	f7fe f898 	bl	8005f5c <_free_r>
 8007e2c:	4625      	mov	r5, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e32:	f000 f9ce 	bl	80081d2 <_malloc_usable_size_r>
 8007e36:	42a0      	cmp	r0, r4
 8007e38:	d20f      	bcs.n	8007e5a <_realloc_r+0x48>
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	f7fe f8dd 	bl	8005ffc <_malloc_r>
 8007e42:	4605      	mov	r5, r0
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d0f2      	beq.n	8007e2e <_realloc_r+0x1c>
 8007e48:	4631      	mov	r1, r6
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	f7fe f870 	bl	8005f30 <memcpy>
 8007e50:	4631      	mov	r1, r6
 8007e52:	4638      	mov	r0, r7
 8007e54:	f7fe f882 	bl	8005f5c <_free_r>
 8007e58:	e7e9      	b.n	8007e2e <_realloc_r+0x1c>
 8007e5a:	4635      	mov	r5, r6
 8007e5c:	e7e7      	b.n	8007e2e <_realloc_r+0x1c>

08007e5e <__ssputs_r>:
 8007e5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e62:	688e      	ldr	r6, [r1, #8]
 8007e64:	429e      	cmp	r6, r3
 8007e66:	4682      	mov	sl, r0
 8007e68:	460c      	mov	r4, r1
 8007e6a:	4690      	mov	r8, r2
 8007e6c:	461f      	mov	r7, r3
 8007e6e:	d838      	bhi.n	8007ee2 <__ssputs_r+0x84>
 8007e70:	898a      	ldrh	r2, [r1, #12]
 8007e72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e76:	d032      	beq.n	8007ede <__ssputs_r+0x80>
 8007e78:	6825      	ldr	r5, [r4, #0]
 8007e7a:	6909      	ldr	r1, [r1, #16]
 8007e7c:	eba5 0901 	sub.w	r9, r5, r1
 8007e80:	6965      	ldr	r5, [r4, #20]
 8007e82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	444b      	add	r3, r9
 8007e8e:	106d      	asrs	r5, r5, #1
 8007e90:	429d      	cmp	r5, r3
 8007e92:	bf38      	it	cc
 8007e94:	461d      	movcc	r5, r3
 8007e96:	0553      	lsls	r3, r2, #21
 8007e98:	d531      	bpl.n	8007efe <__ssputs_r+0xa0>
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	f7fe f8ae 	bl	8005ffc <_malloc_r>
 8007ea0:	4606      	mov	r6, r0
 8007ea2:	b950      	cbnz	r0, 8007eba <__ssputs_r+0x5c>
 8007ea4:	230c      	movs	r3, #12
 8007ea6:	f8ca 3000 	str.w	r3, [sl]
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eb0:	81a3      	strh	r3, [r4, #12]
 8007eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eba:	6921      	ldr	r1, [r4, #16]
 8007ebc:	464a      	mov	r2, r9
 8007ebe:	f7fe f837 	bl	8005f30 <memcpy>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ecc:	81a3      	strh	r3, [r4, #12]
 8007ece:	6126      	str	r6, [r4, #16]
 8007ed0:	6165      	str	r5, [r4, #20]
 8007ed2:	444e      	add	r6, r9
 8007ed4:	eba5 0509 	sub.w	r5, r5, r9
 8007ed8:	6026      	str	r6, [r4, #0]
 8007eda:	60a5      	str	r5, [r4, #8]
 8007edc:	463e      	mov	r6, r7
 8007ede:	42be      	cmp	r6, r7
 8007ee0:	d900      	bls.n	8007ee4 <__ssputs_r+0x86>
 8007ee2:	463e      	mov	r6, r7
 8007ee4:	4632      	mov	r2, r6
 8007ee6:	6820      	ldr	r0, [r4, #0]
 8007ee8:	4641      	mov	r1, r8
 8007eea:	f000 f958 	bl	800819e <memmove>
 8007eee:	68a3      	ldr	r3, [r4, #8]
 8007ef0:	6822      	ldr	r2, [r4, #0]
 8007ef2:	1b9b      	subs	r3, r3, r6
 8007ef4:	4432      	add	r2, r6
 8007ef6:	60a3      	str	r3, [r4, #8]
 8007ef8:	6022      	str	r2, [r4, #0]
 8007efa:	2000      	movs	r0, #0
 8007efc:	e7db      	b.n	8007eb6 <__ssputs_r+0x58>
 8007efe:	462a      	mov	r2, r5
 8007f00:	f7ff ff87 	bl	8007e12 <_realloc_r>
 8007f04:	4606      	mov	r6, r0
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d1e1      	bne.n	8007ece <__ssputs_r+0x70>
 8007f0a:	6921      	ldr	r1, [r4, #16]
 8007f0c:	4650      	mov	r0, sl
 8007f0e:	f7fe f825 	bl	8005f5c <_free_r>
 8007f12:	e7c7      	b.n	8007ea4 <__ssputs_r+0x46>

08007f14 <_svfiprintf_r>:
 8007f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	4698      	mov	r8, r3
 8007f1a:	898b      	ldrh	r3, [r1, #12]
 8007f1c:	061b      	lsls	r3, r3, #24
 8007f1e:	b09d      	sub	sp, #116	; 0x74
 8007f20:	4607      	mov	r7, r0
 8007f22:	460d      	mov	r5, r1
 8007f24:	4614      	mov	r4, r2
 8007f26:	d50e      	bpl.n	8007f46 <_svfiprintf_r+0x32>
 8007f28:	690b      	ldr	r3, [r1, #16]
 8007f2a:	b963      	cbnz	r3, 8007f46 <_svfiprintf_r+0x32>
 8007f2c:	2140      	movs	r1, #64	; 0x40
 8007f2e:	f7fe f865 	bl	8005ffc <_malloc_r>
 8007f32:	6028      	str	r0, [r5, #0]
 8007f34:	6128      	str	r0, [r5, #16]
 8007f36:	b920      	cbnz	r0, 8007f42 <_svfiprintf_r+0x2e>
 8007f38:	230c      	movs	r3, #12
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	e0d1      	b.n	80080e6 <_svfiprintf_r+0x1d2>
 8007f42:	2340      	movs	r3, #64	; 0x40
 8007f44:	616b      	str	r3, [r5, #20]
 8007f46:	2300      	movs	r3, #0
 8007f48:	9309      	str	r3, [sp, #36]	; 0x24
 8007f4a:	2320      	movs	r3, #32
 8007f4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f54:	2330      	movs	r3, #48	; 0x30
 8007f56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008100 <_svfiprintf_r+0x1ec>
 8007f5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f5e:	f04f 0901 	mov.w	r9, #1
 8007f62:	4623      	mov	r3, r4
 8007f64:	469a      	mov	sl, r3
 8007f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f6a:	b10a      	cbz	r2, 8007f70 <_svfiprintf_r+0x5c>
 8007f6c:	2a25      	cmp	r2, #37	; 0x25
 8007f6e:	d1f9      	bne.n	8007f64 <_svfiprintf_r+0x50>
 8007f70:	ebba 0b04 	subs.w	fp, sl, r4
 8007f74:	d00b      	beq.n	8007f8e <_svfiprintf_r+0x7a>
 8007f76:	465b      	mov	r3, fp
 8007f78:	4622      	mov	r2, r4
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	f7ff ff6e 	bl	8007e5e <__ssputs_r>
 8007f82:	3001      	adds	r0, #1
 8007f84:	f000 80aa 	beq.w	80080dc <_svfiprintf_r+0x1c8>
 8007f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f8a:	445a      	add	r2, fp
 8007f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 80a2 	beq.w	80080dc <_svfiprintf_r+0x1c8>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fa2:	f10a 0a01 	add.w	sl, sl, #1
 8007fa6:	9304      	str	r3, [sp, #16]
 8007fa8:	9307      	str	r3, [sp, #28]
 8007faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fae:	931a      	str	r3, [sp, #104]	; 0x68
 8007fb0:	4654      	mov	r4, sl
 8007fb2:	2205      	movs	r2, #5
 8007fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb8:	4851      	ldr	r0, [pc, #324]	; (8008100 <_svfiprintf_r+0x1ec>)
 8007fba:	f7f8 f929 	bl	8000210 <memchr>
 8007fbe:	9a04      	ldr	r2, [sp, #16]
 8007fc0:	b9d8      	cbnz	r0, 8007ffa <_svfiprintf_r+0xe6>
 8007fc2:	06d0      	lsls	r0, r2, #27
 8007fc4:	bf44      	itt	mi
 8007fc6:	2320      	movmi	r3, #32
 8007fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fcc:	0711      	lsls	r1, r2, #28
 8007fce:	bf44      	itt	mi
 8007fd0:	232b      	movmi	r3, #43	; 0x2b
 8007fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007fda:	2b2a      	cmp	r3, #42	; 0x2a
 8007fdc:	d015      	beq.n	800800a <_svfiprintf_r+0xf6>
 8007fde:	9a07      	ldr	r2, [sp, #28]
 8007fe0:	4654      	mov	r4, sl
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	f04f 0c0a 	mov.w	ip, #10
 8007fe8:	4621      	mov	r1, r4
 8007fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fee:	3b30      	subs	r3, #48	; 0x30
 8007ff0:	2b09      	cmp	r3, #9
 8007ff2:	d94e      	bls.n	8008092 <_svfiprintf_r+0x17e>
 8007ff4:	b1b0      	cbz	r0, 8008024 <_svfiprintf_r+0x110>
 8007ff6:	9207      	str	r2, [sp, #28]
 8007ff8:	e014      	b.n	8008024 <_svfiprintf_r+0x110>
 8007ffa:	eba0 0308 	sub.w	r3, r0, r8
 8007ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8008002:	4313      	orrs	r3, r2
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	46a2      	mov	sl, r4
 8008008:	e7d2      	b.n	8007fb0 <_svfiprintf_r+0x9c>
 800800a:	9b03      	ldr	r3, [sp, #12]
 800800c:	1d19      	adds	r1, r3, #4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	9103      	str	r1, [sp, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	bfbb      	ittet	lt
 8008016:	425b      	neglt	r3, r3
 8008018:	f042 0202 	orrlt.w	r2, r2, #2
 800801c:	9307      	strge	r3, [sp, #28]
 800801e:	9307      	strlt	r3, [sp, #28]
 8008020:	bfb8      	it	lt
 8008022:	9204      	strlt	r2, [sp, #16]
 8008024:	7823      	ldrb	r3, [r4, #0]
 8008026:	2b2e      	cmp	r3, #46	; 0x2e
 8008028:	d10c      	bne.n	8008044 <_svfiprintf_r+0x130>
 800802a:	7863      	ldrb	r3, [r4, #1]
 800802c:	2b2a      	cmp	r3, #42	; 0x2a
 800802e:	d135      	bne.n	800809c <_svfiprintf_r+0x188>
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	1d1a      	adds	r2, r3, #4
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	9203      	str	r2, [sp, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	bfb8      	it	lt
 800803c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008040:	3402      	adds	r4, #2
 8008042:	9305      	str	r3, [sp, #20]
 8008044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008110 <_svfiprintf_r+0x1fc>
 8008048:	7821      	ldrb	r1, [r4, #0]
 800804a:	2203      	movs	r2, #3
 800804c:	4650      	mov	r0, sl
 800804e:	f7f8 f8df 	bl	8000210 <memchr>
 8008052:	b140      	cbz	r0, 8008066 <_svfiprintf_r+0x152>
 8008054:	2340      	movs	r3, #64	; 0x40
 8008056:	eba0 000a 	sub.w	r0, r0, sl
 800805a:	fa03 f000 	lsl.w	r0, r3, r0
 800805e:	9b04      	ldr	r3, [sp, #16]
 8008060:	4303      	orrs	r3, r0
 8008062:	3401      	adds	r4, #1
 8008064:	9304      	str	r3, [sp, #16]
 8008066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800806a:	4826      	ldr	r0, [pc, #152]	; (8008104 <_svfiprintf_r+0x1f0>)
 800806c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008070:	2206      	movs	r2, #6
 8008072:	f7f8 f8cd 	bl	8000210 <memchr>
 8008076:	2800      	cmp	r0, #0
 8008078:	d038      	beq.n	80080ec <_svfiprintf_r+0x1d8>
 800807a:	4b23      	ldr	r3, [pc, #140]	; (8008108 <_svfiprintf_r+0x1f4>)
 800807c:	bb1b      	cbnz	r3, 80080c6 <_svfiprintf_r+0x1b2>
 800807e:	9b03      	ldr	r3, [sp, #12]
 8008080:	3307      	adds	r3, #7
 8008082:	f023 0307 	bic.w	r3, r3, #7
 8008086:	3308      	adds	r3, #8
 8008088:	9303      	str	r3, [sp, #12]
 800808a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800808c:	4433      	add	r3, r6
 800808e:	9309      	str	r3, [sp, #36]	; 0x24
 8008090:	e767      	b.n	8007f62 <_svfiprintf_r+0x4e>
 8008092:	fb0c 3202 	mla	r2, ip, r2, r3
 8008096:	460c      	mov	r4, r1
 8008098:	2001      	movs	r0, #1
 800809a:	e7a5      	b.n	8007fe8 <_svfiprintf_r+0xd4>
 800809c:	2300      	movs	r3, #0
 800809e:	3401      	adds	r4, #1
 80080a0:	9305      	str	r3, [sp, #20]
 80080a2:	4619      	mov	r1, r3
 80080a4:	f04f 0c0a 	mov.w	ip, #10
 80080a8:	4620      	mov	r0, r4
 80080aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080ae:	3a30      	subs	r2, #48	; 0x30
 80080b0:	2a09      	cmp	r2, #9
 80080b2:	d903      	bls.n	80080bc <_svfiprintf_r+0x1a8>
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0c5      	beq.n	8008044 <_svfiprintf_r+0x130>
 80080b8:	9105      	str	r1, [sp, #20]
 80080ba:	e7c3      	b.n	8008044 <_svfiprintf_r+0x130>
 80080bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80080c0:	4604      	mov	r4, r0
 80080c2:	2301      	movs	r3, #1
 80080c4:	e7f0      	b.n	80080a8 <_svfiprintf_r+0x194>
 80080c6:	ab03      	add	r3, sp, #12
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	462a      	mov	r2, r5
 80080cc:	4b0f      	ldr	r3, [pc, #60]	; (800810c <_svfiprintf_r+0x1f8>)
 80080ce:	a904      	add	r1, sp, #16
 80080d0:	4638      	mov	r0, r7
 80080d2:	f7fe f88d 	bl	80061f0 <_printf_float>
 80080d6:	1c42      	adds	r2, r0, #1
 80080d8:	4606      	mov	r6, r0
 80080da:	d1d6      	bne.n	800808a <_svfiprintf_r+0x176>
 80080dc:	89ab      	ldrh	r3, [r5, #12]
 80080de:	065b      	lsls	r3, r3, #25
 80080e0:	f53f af2c 	bmi.w	8007f3c <_svfiprintf_r+0x28>
 80080e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080e6:	b01d      	add	sp, #116	; 0x74
 80080e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ec:	ab03      	add	r3, sp, #12
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	462a      	mov	r2, r5
 80080f2:	4b06      	ldr	r3, [pc, #24]	; (800810c <_svfiprintf_r+0x1f8>)
 80080f4:	a904      	add	r1, sp, #16
 80080f6:	4638      	mov	r0, r7
 80080f8:	f7fe fb1e 	bl	8006738 <_printf_i>
 80080fc:	e7eb      	b.n	80080d6 <_svfiprintf_r+0x1c2>
 80080fe:	bf00      	nop
 8008100:	0800ba2c 	.word	0x0800ba2c
 8008104:	0800ba36 	.word	0x0800ba36
 8008108:	080061f1 	.word	0x080061f1
 800810c:	08007e5f 	.word	0x08007e5f
 8008110:	0800ba32 	.word	0x0800ba32

08008114 <__assert_func>:
 8008114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008116:	4614      	mov	r4, r2
 8008118:	461a      	mov	r2, r3
 800811a:	4b09      	ldr	r3, [pc, #36]	; (8008140 <__assert_func+0x2c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4605      	mov	r5, r0
 8008120:	68d8      	ldr	r0, [r3, #12]
 8008122:	b14c      	cbz	r4, 8008138 <__assert_func+0x24>
 8008124:	4b07      	ldr	r3, [pc, #28]	; (8008144 <__assert_func+0x30>)
 8008126:	9100      	str	r1, [sp, #0]
 8008128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800812c:	4906      	ldr	r1, [pc, #24]	; (8008148 <__assert_func+0x34>)
 800812e:	462b      	mov	r3, r5
 8008130:	f000 f80e 	bl	8008150 <fiprintf>
 8008134:	f000 fa7c 	bl	8008630 <abort>
 8008138:	4b04      	ldr	r3, [pc, #16]	; (800814c <__assert_func+0x38>)
 800813a:	461c      	mov	r4, r3
 800813c:	e7f3      	b.n	8008126 <__assert_func+0x12>
 800813e:	bf00      	nop
 8008140:	200005e4 	.word	0x200005e4
 8008144:	0800ba3d 	.word	0x0800ba3d
 8008148:	0800ba4a 	.word	0x0800ba4a
 800814c:	0800ba78 	.word	0x0800ba78

08008150 <fiprintf>:
 8008150:	b40e      	push	{r1, r2, r3}
 8008152:	b503      	push	{r0, r1, lr}
 8008154:	4601      	mov	r1, r0
 8008156:	ab03      	add	r3, sp, #12
 8008158:	4805      	ldr	r0, [pc, #20]	; (8008170 <fiprintf+0x20>)
 800815a:	f853 2b04 	ldr.w	r2, [r3], #4
 800815e:	6800      	ldr	r0, [r0, #0]
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	f000 f867 	bl	8008234 <_vfiprintf_r>
 8008166:	b002      	add	sp, #8
 8008168:	f85d eb04 	ldr.w	lr, [sp], #4
 800816c:	b003      	add	sp, #12
 800816e:	4770      	bx	lr
 8008170:	200005e4 	.word	0x200005e4

08008174 <__retarget_lock_init_recursive>:
 8008174:	4770      	bx	lr

08008176 <__retarget_lock_acquire_recursive>:
 8008176:	4770      	bx	lr

08008178 <__retarget_lock_release_recursive>:
 8008178:	4770      	bx	lr

0800817a <__ascii_mbtowc>:
 800817a:	b082      	sub	sp, #8
 800817c:	b901      	cbnz	r1, 8008180 <__ascii_mbtowc+0x6>
 800817e:	a901      	add	r1, sp, #4
 8008180:	b142      	cbz	r2, 8008194 <__ascii_mbtowc+0x1a>
 8008182:	b14b      	cbz	r3, 8008198 <__ascii_mbtowc+0x1e>
 8008184:	7813      	ldrb	r3, [r2, #0]
 8008186:	600b      	str	r3, [r1, #0]
 8008188:	7812      	ldrb	r2, [r2, #0]
 800818a:	1e10      	subs	r0, r2, #0
 800818c:	bf18      	it	ne
 800818e:	2001      	movne	r0, #1
 8008190:	b002      	add	sp, #8
 8008192:	4770      	bx	lr
 8008194:	4610      	mov	r0, r2
 8008196:	e7fb      	b.n	8008190 <__ascii_mbtowc+0x16>
 8008198:	f06f 0001 	mvn.w	r0, #1
 800819c:	e7f8      	b.n	8008190 <__ascii_mbtowc+0x16>

0800819e <memmove>:
 800819e:	4288      	cmp	r0, r1
 80081a0:	b510      	push	{r4, lr}
 80081a2:	eb01 0402 	add.w	r4, r1, r2
 80081a6:	d902      	bls.n	80081ae <memmove+0x10>
 80081a8:	4284      	cmp	r4, r0
 80081aa:	4623      	mov	r3, r4
 80081ac:	d807      	bhi.n	80081be <memmove+0x20>
 80081ae:	1e43      	subs	r3, r0, #1
 80081b0:	42a1      	cmp	r1, r4
 80081b2:	d008      	beq.n	80081c6 <memmove+0x28>
 80081b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081bc:	e7f8      	b.n	80081b0 <memmove+0x12>
 80081be:	4402      	add	r2, r0
 80081c0:	4601      	mov	r1, r0
 80081c2:	428a      	cmp	r2, r1
 80081c4:	d100      	bne.n	80081c8 <memmove+0x2a>
 80081c6:	bd10      	pop	{r4, pc}
 80081c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081d0:	e7f7      	b.n	80081c2 <memmove+0x24>

080081d2 <_malloc_usable_size_r>:
 80081d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d6:	1f18      	subs	r0, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	bfbc      	itt	lt
 80081dc:	580b      	ldrlt	r3, [r1, r0]
 80081de:	18c0      	addlt	r0, r0, r3
 80081e0:	4770      	bx	lr

080081e2 <__sfputc_r>:
 80081e2:	6893      	ldr	r3, [r2, #8]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	b410      	push	{r4}
 80081ea:	6093      	str	r3, [r2, #8]
 80081ec:	da08      	bge.n	8008200 <__sfputc_r+0x1e>
 80081ee:	6994      	ldr	r4, [r2, #24]
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	db01      	blt.n	80081f8 <__sfputc_r+0x16>
 80081f4:	290a      	cmp	r1, #10
 80081f6:	d103      	bne.n	8008200 <__sfputc_r+0x1e>
 80081f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081fc:	f000 b94a 	b.w	8008494 <__swbuf_r>
 8008200:	6813      	ldr	r3, [r2, #0]
 8008202:	1c58      	adds	r0, r3, #1
 8008204:	6010      	str	r0, [r2, #0]
 8008206:	7019      	strb	r1, [r3, #0]
 8008208:	4608      	mov	r0, r1
 800820a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800820e:	4770      	bx	lr

08008210 <__sfputs_r>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	4606      	mov	r6, r0
 8008214:	460f      	mov	r7, r1
 8008216:	4614      	mov	r4, r2
 8008218:	18d5      	adds	r5, r2, r3
 800821a:	42ac      	cmp	r4, r5
 800821c:	d101      	bne.n	8008222 <__sfputs_r+0x12>
 800821e:	2000      	movs	r0, #0
 8008220:	e007      	b.n	8008232 <__sfputs_r+0x22>
 8008222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008226:	463a      	mov	r2, r7
 8008228:	4630      	mov	r0, r6
 800822a:	f7ff ffda 	bl	80081e2 <__sfputc_r>
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	d1f3      	bne.n	800821a <__sfputs_r+0xa>
 8008232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008234 <_vfiprintf_r>:
 8008234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008238:	460d      	mov	r5, r1
 800823a:	b09d      	sub	sp, #116	; 0x74
 800823c:	4614      	mov	r4, r2
 800823e:	4698      	mov	r8, r3
 8008240:	4606      	mov	r6, r0
 8008242:	b118      	cbz	r0, 800824c <_vfiprintf_r+0x18>
 8008244:	6983      	ldr	r3, [r0, #24]
 8008246:	b90b      	cbnz	r3, 800824c <_vfiprintf_r+0x18>
 8008248:	f000 fb14 	bl	8008874 <__sinit>
 800824c:	4b89      	ldr	r3, [pc, #548]	; (8008474 <_vfiprintf_r+0x240>)
 800824e:	429d      	cmp	r5, r3
 8008250:	d11b      	bne.n	800828a <_vfiprintf_r+0x56>
 8008252:	6875      	ldr	r5, [r6, #4]
 8008254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008256:	07d9      	lsls	r1, r3, #31
 8008258:	d405      	bmi.n	8008266 <_vfiprintf_r+0x32>
 800825a:	89ab      	ldrh	r3, [r5, #12]
 800825c:	059a      	lsls	r2, r3, #22
 800825e:	d402      	bmi.n	8008266 <_vfiprintf_r+0x32>
 8008260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008262:	f7ff ff88 	bl	8008176 <__retarget_lock_acquire_recursive>
 8008266:	89ab      	ldrh	r3, [r5, #12]
 8008268:	071b      	lsls	r3, r3, #28
 800826a:	d501      	bpl.n	8008270 <_vfiprintf_r+0x3c>
 800826c:	692b      	ldr	r3, [r5, #16]
 800826e:	b9eb      	cbnz	r3, 80082ac <_vfiprintf_r+0x78>
 8008270:	4629      	mov	r1, r5
 8008272:	4630      	mov	r0, r6
 8008274:	f000 f96e 	bl	8008554 <__swsetup_r>
 8008278:	b1c0      	cbz	r0, 80082ac <_vfiprintf_r+0x78>
 800827a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800827c:	07dc      	lsls	r4, r3, #31
 800827e:	d50e      	bpl.n	800829e <_vfiprintf_r+0x6a>
 8008280:	f04f 30ff 	mov.w	r0, #4294967295
 8008284:	b01d      	add	sp, #116	; 0x74
 8008286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828a:	4b7b      	ldr	r3, [pc, #492]	; (8008478 <_vfiprintf_r+0x244>)
 800828c:	429d      	cmp	r5, r3
 800828e:	d101      	bne.n	8008294 <_vfiprintf_r+0x60>
 8008290:	68b5      	ldr	r5, [r6, #8]
 8008292:	e7df      	b.n	8008254 <_vfiprintf_r+0x20>
 8008294:	4b79      	ldr	r3, [pc, #484]	; (800847c <_vfiprintf_r+0x248>)
 8008296:	429d      	cmp	r5, r3
 8008298:	bf08      	it	eq
 800829a:	68f5      	ldreq	r5, [r6, #12]
 800829c:	e7da      	b.n	8008254 <_vfiprintf_r+0x20>
 800829e:	89ab      	ldrh	r3, [r5, #12]
 80082a0:	0598      	lsls	r0, r3, #22
 80082a2:	d4ed      	bmi.n	8008280 <_vfiprintf_r+0x4c>
 80082a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082a6:	f7ff ff67 	bl	8008178 <__retarget_lock_release_recursive>
 80082aa:	e7e9      	b.n	8008280 <_vfiprintf_r+0x4c>
 80082ac:	2300      	movs	r3, #0
 80082ae:	9309      	str	r3, [sp, #36]	; 0x24
 80082b0:	2320      	movs	r3, #32
 80082b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80082ba:	2330      	movs	r3, #48	; 0x30
 80082bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008480 <_vfiprintf_r+0x24c>
 80082c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082c4:	f04f 0901 	mov.w	r9, #1
 80082c8:	4623      	mov	r3, r4
 80082ca:	469a      	mov	sl, r3
 80082cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082d0:	b10a      	cbz	r2, 80082d6 <_vfiprintf_r+0xa2>
 80082d2:	2a25      	cmp	r2, #37	; 0x25
 80082d4:	d1f9      	bne.n	80082ca <_vfiprintf_r+0x96>
 80082d6:	ebba 0b04 	subs.w	fp, sl, r4
 80082da:	d00b      	beq.n	80082f4 <_vfiprintf_r+0xc0>
 80082dc:	465b      	mov	r3, fp
 80082de:	4622      	mov	r2, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	4630      	mov	r0, r6
 80082e4:	f7ff ff94 	bl	8008210 <__sfputs_r>
 80082e8:	3001      	adds	r0, #1
 80082ea:	f000 80aa 	beq.w	8008442 <_vfiprintf_r+0x20e>
 80082ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082f0:	445a      	add	r2, fp
 80082f2:	9209      	str	r2, [sp, #36]	; 0x24
 80082f4:	f89a 3000 	ldrb.w	r3, [sl]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 80a2 	beq.w	8008442 <_vfiprintf_r+0x20e>
 80082fe:	2300      	movs	r3, #0
 8008300:	f04f 32ff 	mov.w	r2, #4294967295
 8008304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008308:	f10a 0a01 	add.w	sl, sl, #1
 800830c:	9304      	str	r3, [sp, #16]
 800830e:	9307      	str	r3, [sp, #28]
 8008310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008314:	931a      	str	r3, [sp, #104]	; 0x68
 8008316:	4654      	mov	r4, sl
 8008318:	2205      	movs	r2, #5
 800831a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800831e:	4858      	ldr	r0, [pc, #352]	; (8008480 <_vfiprintf_r+0x24c>)
 8008320:	f7f7 ff76 	bl	8000210 <memchr>
 8008324:	9a04      	ldr	r2, [sp, #16]
 8008326:	b9d8      	cbnz	r0, 8008360 <_vfiprintf_r+0x12c>
 8008328:	06d1      	lsls	r1, r2, #27
 800832a:	bf44      	itt	mi
 800832c:	2320      	movmi	r3, #32
 800832e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008332:	0713      	lsls	r3, r2, #28
 8008334:	bf44      	itt	mi
 8008336:	232b      	movmi	r3, #43	; 0x2b
 8008338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800833c:	f89a 3000 	ldrb.w	r3, [sl]
 8008340:	2b2a      	cmp	r3, #42	; 0x2a
 8008342:	d015      	beq.n	8008370 <_vfiprintf_r+0x13c>
 8008344:	9a07      	ldr	r2, [sp, #28]
 8008346:	4654      	mov	r4, sl
 8008348:	2000      	movs	r0, #0
 800834a:	f04f 0c0a 	mov.w	ip, #10
 800834e:	4621      	mov	r1, r4
 8008350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008354:	3b30      	subs	r3, #48	; 0x30
 8008356:	2b09      	cmp	r3, #9
 8008358:	d94e      	bls.n	80083f8 <_vfiprintf_r+0x1c4>
 800835a:	b1b0      	cbz	r0, 800838a <_vfiprintf_r+0x156>
 800835c:	9207      	str	r2, [sp, #28]
 800835e:	e014      	b.n	800838a <_vfiprintf_r+0x156>
 8008360:	eba0 0308 	sub.w	r3, r0, r8
 8008364:	fa09 f303 	lsl.w	r3, r9, r3
 8008368:	4313      	orrs	r3, r2
 800836a:	9304      	str	r3, [sp, #16]
 800836c:	46a2      	mov	sl, r4
 800836e:	e7d2      	b.n	8008316 <_vfiprintf_r+0xe2>
 8008370:	9b03      	ldr	r3, [sp, #12]
 8008372:	1d19      	adds	r1, r3, #4
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	9103      	str	r1, [sp, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	bfbb      	ittet	lt
 800837c:	425b      	neglt	r3, r3
 800837e:	f042 0202 	orrlt.w	r2, r2, #2
 8008382:	9307      	strge	r3, [sp, #28]
 8008384:	9307      	strlt	r3, [sp, #28]
 8008386:	bfb8      	it	lt
 8008388:	9204      	strlt	r2, [sp, #16]
 800838a:	7823      	ldrb	r3, [r4, #0]
 800838c:	2b2e      	cmp	r3, #46	; 0x2e
 800838e:	d10c      	bne.n	80083aa <_vfiprintf_r+0x176>
 8008390:	7863      	ldrb	r3, [r4, #1]
 8008392:	2b2a      	cmp	r3, #42	; 0x2a
 8008394:	d135      	bne.n	8008402 <_vfiprintf_r+0x1ce>
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	1d1a      	adds	r2, r3, #4
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	9203      	str	r2, [sp, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bfb8      	it	lt
 80083a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80083a6:	3402      	adds	r4, #2
 80083a8:	9305      	str	r3, [sp, #20]
 80083aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008490 <_vfiprintf_r+0x25c>
 80083ae:	7821      	ldrb	r1, [r4, #0]
 80083b0:	2203      	movs	r2, #3
 80083b2:	4650      	mov	r0, sl
 80083b4:	f7f7 ff2c 	bl	8000210 <memchr>
 80083b8:	b140      	cbz	r0, 80083cc <_vfiprintf_r+0x198>
 80083ba:	2340      	movs	r3, #64	; 0x40
 80083bc:	eba0 000a 	sub.w	r0, r0, sl
 80083c0:	fa03 f000 	lsl.w	r0, r3, r0
 80083c4:	9b04      	ldr	r3, [sp, #16]
 80083c6:	4303      	orrs	r3, r0
 80083c8:	3401      	adds	r4, #1
 80083ca:	9304      	str	r3, [sp, #16]
 80083cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083d0:	482c      	ldr	r0, [pc, #176]	; (8008484 <_vfiprintf_r+0x250>)
 80083d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083d6:	2206      	movs	r2, #6
 80083d8:	f7f7 ff1a 	bl	8000210 <memchr>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d03f      	beq.n	8008460 <_vfiprintf_r+0x22c>
 80083e0:	4b29      	ldr	r3, [pc, #164]	; (8008488 <_vfiprintf_r+0x254>)
 80083e2:	bb1b      	cbnz	r3, 800842c <_vfiprintf_r+0x1f8>
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	3307      	adds	r3, #7
 80083e8:	f023 0307 	bic.w	r3, r3, #7
 80083ec:	3308      	adds	r3, #8
 80083ee:	9303      	str	r3, [sp, #12]
 80083f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f2:	443b      	add	r3, r7
 80083f4:	9309      	str	r3, [sp, #36]	; 0x24
 80083f6:	e767      	b.n	80082c8 <_vfiprintf_r+0x94>
 80083f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80083fc:	460c      	mov	r4, r1
 80083fe:	2001      	movs	r0, #1
 8008400:	e7a5      	b.n	800834e <_vfiprintf_r+0x11a>
 8008402:	2300      	movs	r3, #0
 8008404:	3401      	adds	r4, #1
 8008406:	9305      	str	r3, [sp, #20]
 8008408:	4619      	mov	r1, r3
 800840a:	f04f 0c0a 	mov.w	ip, #10
 800840e:	4620      	mov	r0, r4
 8008410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008414:	3a30      	subs	r2, #48	; 0x30
 8008416:	2a09      	cmp	r2, #9
 8008418:	d903      	bls.n	8008422 <_vfiprintf_r+0x1ee>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d0c5      	beq.n	80083aa <_vfiprintf_r+0x176>
 800841e:	9105      	str	r1, [sp, #20]
 8008420:	e7c3      	b.n	80083aa <_vfiprintf_r+0x176>
 8008422:	fb0c 2101 	mla	r1, ip, r1, r2
 8008426:	4604      	mov	r4, r0
 8008428:	2301      	movs	r3, #1
 800842a:	e7f0      	b.n	800840e <_vfiprintf_r+0x1da>
 800842c:	ab03      	add	r3, sp, #12
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	462a      	mov	r2, r5
 8008432:	4b16      	ldr	r3, [pc, #88]	; (800848c <_vfiprintf_r+0x258>)
 8008434:	a904      	add	r1, sp, #16
 8008436:	4630      	mov	r0, r6
 8008438:	f7fd feda 	bl	80061f0 <_printf_float>
 800843c:	4607      	mov	r7, r0
 800843e:	1c78      	adds	r0, r7, #1
 8008440:	d1d6      	bne.n	80083f0 <_vfiprintf_r+0x1bc>
 8008442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008444:	07d9      	lsls	r1, r3, #31
 8008446:	d405      	bmi.n	8008454 <_vfiprintf_r+0x220>
 8008448:	89ab      	ldrh	r3, [r5, #12]
 800844a:	059a      	lsls	r2, r3, #22
 800844c:	d402      	bmi.n	8008454 <_vfiprintf_r+0x220>
 800844e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008450:	f7ff fe92 	bl	8008178 <__retarget_lock_release_recursive>
 8008454:	89ab      	ldrh	r3, [r5, #12]
 8008456:	065b      	lsls	r3, r3, #25
 8008458:	f53f af12 	bmi.w	8008280 <_vfiprintf_r+0x4c>
 800845c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800845e:	e711      	b.n	8008284 <_vfiprintf_r+0x50>
 8008460:	ab03      	add	r3, sp, #12
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	462a      	mov	r2, r5
 8008466:	4b09      	ldr	r3, [pc, #36]	; (800848c <_vfiprintf_r+0x258>)
 8008468:	a904      	add	r1, sp, #16
 800846a:	4630      	mov	r0, r6
 800846c:	f7fe f964 	bl	8006738 <_printf_i>
 8008470:	e7e4      	b.n	800843c <_vfiprintf_r+0x208>
 8008472:	bf00      	nop
 8008474:	0800bba4 	.word	0x0800bba4
 8008478:	0800bbc4 	.word	0x0800bbc4
 800847c:	0800bb84 	.word	0x0800bb84
 8008480:	0800ba2c 	.word	0x0800ba2c
 8008484:	0800ba36 	.word	0x0800ba36
 8008488:	080061f1 	.word	0x080061f1
 800848c:	08008211 	.word	0x08008211
 8008490:	0800ba32 	.word	0x0800ba32

08008494 <__swbuf_r>:
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	460e      	mov	r6, r1
 8008498:	4614      	mov	r4, r2
 800849a:	4605      	mov	r5, r0
 800849c:	b118      	cbz	r0, 80084a6 <__swbuf_r+0x12>
 800849e:	6983      	ldr	r3, [r0, #24]
 80084a0:	b90b      	cbnz	r3, 80084a6 <__swbuf_r+0x12>
 80084a2:	f000 f9e7 	bl	8008874 <__sinit>
 80084a6:	4b21      	ldr	r3, [pc, #132]	; (800852c <__swbuf_r+0x98>)
 80084a8:	429c      	cmp	r4, r3
 80084aa:	d12b      	bne.n	8008504 <__swbuf_r+0x70>
 80084ac:	686c      	ldr	r4, [r5, #4]
 80084ae:	69a3      	ldr	r3, [r4, #24]
 80084b0:	60a3      	str	r3, [r4, #8]
 80084b2:	89a3      	ldrh	r3, [r4, #12]
 80084b4:	071a      	lsls	r2, r3, #28
 80084b6:	d52f      	bpl.n	8008518 <__swbuf_r+0x84>
 80084b8:	6923      	ldr	r3, [r4, #16]
 80084ba:	b36b      	cbz	r3, 8008518 <__swbuf_r+0x84>
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	6820      	ldr	r0, [r4, #0]
 80084c0:	1ac0      	subs	r0, r0, r3
 80084c2:	6963      	ldr	r3, [r4, #20]
 80084c4:	b2f6      	uxtb	r6, r6
 80084c6:	4283      	cmp	r3, r0
 80084c8:	4637      	mov	r7, r6
 80084ca:	dc04      	bgt.n	80084d6 <__swbuf_r+0x42>
 80084cc:	4621      	mov	r1, r4
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 f93c 	bl	800874c <_fflush_r>
 80084d4:	bb30      	cbnz	r0, 8008524 <__swbuf_r+0x90>
 80084d6:	68a3      	ldr	r3, [r4, #8]
 80084d8:	3b01      	subs	r3, #1
 80084da:	60a3      	str	r3, [r4, #8]
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	6022      	str	r2, [r4, #0]
 80084e2:	701e      	strb	r6, [r3, #0]
 80084e4:	6963      	ldr	r3, [r4, #20]
 80084e6:	3001      	adds	r0, #1
 80084e8:	4283      	cmp	r3, r0
 80084ea:	d004      	beq.n	80084f6 <__swbuf_r+0x62>
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	07db      	lsls	r3, r3, #31
 80084f0:	d506      	bpl.n	8008500 <__swbuf_r+0x6c>
 80084f2:	2e0a      	cmp	r6, #10
 80084f4:	d104      	bne.n	8008500 <__swbuf_r+0x6c>
 80084f6:	4621      	mov	r1, r4
 80084f8:	4628      	mov	r0, r5
 80084fa:	f000 f927 	bl	800874c <_fflush_r>
 80084fe:	b988      	cbnz	r0, 8008524 <__swbuf_r+0x90>
 8008500:	4638      	mov	r0, r7
 8008502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008504:	4b0a      	ldr	r3, [pc, #40]	; (8008530 <__swbuf_r+0x9c>)
 8008506:	429c      	cmp	r4, r3
 8008508:	d101      	bne.n	800850e <__swbuf_r+0x7a>
 800850a:	68ac      	ldr	r4, [r5, #8]
 800850c:	e7cf      	b.n	80084ae <__swbuf_r+0x1a>
 800850e:	4b09      	ldr	r3, [pc, #36]	; (8008534 <__swbuf_r+0xa0>)
 8008510:	429c      	cmp	r4, r3
 8008512:	bf08      	it	eq
 8008514:	68ec      	ldreq	r4, [r5, #12]
 8008516:	e7ca      	b.n	80084ae <__swbuf_r+0x1a>
 8008518:	4621      	mov	r1, r4
 800851a:	4628      	mov	r0, r5
 800851c:	f000 f81a 	bl	8008554 <__swsetup_r>
 8008520:	2800      	cmp	r0, #0
 8008522:	d0cb      	beq.n	80084bc <__swbuf_r+0x28>
 8008524:	f04f 37ff 	mov.w	r7, #4294967295
 8008528:	e7ea      	b.n	8008500 <__swbuf_r+0x6c>
 800852a:	bf00      	nop
 800852c:	0800bba4 	.word	0x0800bba4
 8008530:	0800bbc4 	.word	0x0800bbc4
 8008534:	0800bb84 	.word	0x0800bb84

08008538 <__ascii_wctomb>:
 8008538:	b149      	cbz	r1, 800854e <__ascii_wctomb+0x16>
 800853a:	2aff      	cmp	r2, #255	; 0xff
 800853c:	bf85      	ittet	hi
 800853e:	238a      	movhi	r3, #138	; 0x8a
 8008540:	6003      	strhi	r3, [r0, #0]
 8008542:	700a      	strbls	r2, [r1, #0]
 8008544:	f04f 30ff 	movhi.w	r0, #4294967295
 8008548:	bf98      	it	ls
 800854a:	2001      	movls	r0, #1
 800854c:	4770      	bx	lr
 800854e:	4608      	mov	r0, r1
 8008550:	4770      	bx	lr
	...

08008554 <__swsetup_r>:
 8008554:	4b32      	ldr	r3, [pc, #200]	; (8008620 <__swsetup_r+0xcc>)
 8008556:	b570      	push	{r4, r5, r6, lr}
 8008558:	681d      	ldr	r5, [r3, #0]
 800855a:	4606      	mov	r6, r0
 800855c:	460c      	mov	r4, r1
 800855e:	b125      	cbz	r5, 800856a <__swsetup_r+0x16>
 8008560:	69ab      	ldr	r3, [r5, #24]
 8008562:	b913      	cbnz	r3, 800856a <__swsetup_r+0x16>
 8008564:	4628      	mov	r0, r5
 8008566:	f000 f985 	bl	8008874 <__sinit>
 800856a:	4b2e      	ldr	r3, [pc, #184]	; (8008624 <__swsetup_r+0xd0>)
 800856c:	429c      	cmp	r4, r3
 800856e:	d10f      	bne.n	8008590 <__swsetup_r+0x3c>
 8008570:	686c      	ldr	r4, [r5, #4]
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008578:	0719      	lsls	r1, r3, #28
 800857a:	d42c      	bmi.n	80085d6 <__swsetup_r+0x82>
 800857c:	06dd      	lsls	r5, r3, #27
 800857e:	d411      	bmi.n	80085a4 <__swsetup_r+0x50>
 8008580:	2309      	movs	r3, #9
 8008582:	6033      	str	r3, [r6, #0]
 8008584:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008588:	81a3      	strh	r3, [r4, #12]
 800858a:	f04f 30ff 	mov.w	r0, #4294967295
 800858e:	e03e      	b.n	800860e <__swsetup_r+0xba>
 8008590:	4b25      	ldr	r3, [pc, #148]	; (8008628 <__swsetup_r+0xd4>)
 8008592:	429c      	cmp	r4, r3
 8008594:	d101      	bne.n	800859a <__swsetup_r+0x46>
 8008596:	68ac      	ldr	r4, [r5, #8]
 8008598:	e7eb      	b.n	8008572 <__swsetup_r+0x1e>
 800859a:	4b24      	ldr	r3, [pc, #144]	; (800862c <__swsetup_r+0xd8>)
 800859c:	429c      	cmp	r4, r3
 800859e:	bf08      	it	eq
 80085a0:	68ec      	ldreq	r4, [r5, #12]
 80085a2:	e7e6      	b.n	8008572 <__swsetup_r+0x1e>
 80085a4:	0758      	lsls	r0, r3, #29
 80085a6:	d512      	bpl.n	80085ce <__swsetup_r+0x7a>
 80085a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085aa:	b141      	cbz	r1, 80085be <__swsetup_r+0x6a>
 80085ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085b0:	4299      	cmp	r1, r3
 80085b2:	d002      	beq.n	80085ba <__swsetup_r+0x66>
 80085b4:	4630      	mov	r0, r6
 80085b6:	f7fd fcd1 	bl	8005f5c <_free_r>
 80085ba:	2300      	movs	r3, #0
 80085bc:	6363      	str	r3, [r4, #52]	; 0x34
 80085be:	89a3      	ldrh	r3, [r4, #12]
 80085c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085c4:	81a3      	strh	r3, [r4, #12]
 80085c6:	2300      	movs	r3, #0
 80085c8:	6063      	str	r3, [r4, #4]
 80085ca:	6923      	ldr	r3, [r4, #16]
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	f043 0308 	orr.w	r3, r3, #8
 80085d4:	81a3      	strh	r3, [r4, #12]
 80085d6:	6923      	ldr	r3, [r4, #16]
 80085d8:	b94b      	cbnz	r3, 80085ee <__swsetup_r+0x9a>
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085e4:	d003      	beq.n	80085ee <__swsetup_r+0x9a>
 80085e6:	4621      	mov	r1, r4
 80085e8:	4630      	mov	r0, r6
 80085ea:	f000 fa05 	bl	80089f8 <__smakebuf_r>
 80085ee:	89a0      	ldrh	r0, [r4, #12]
 80085f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085f4:	f010 0301 	ands.w	r3, r0, #1
 80085f8:	d00a      	beq.n	8008610 <__swsetup_r+0xbc>
 80085fa:	2300      	movs	r3, #0
 80085fc:	60a3      	str	r3, [r4, #8]
 80085fe:	6963      	ldr	r3, [r4, #20]
 8008600:	425b      	negs	r3, r3
 8008602:	61a3      	str	r3, [r4, #24]
 8008604:	6923      	ldr	r3, [r4, #16]
 8008606:	b943      	cbnz	r3, 800861a <__swsetup_r+0xc6>
 8008608:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800860c:	d1ba      	bne.n	8008584 <__swsetup_r+0x30>
 800860e:	bd70      	pop	{r4, r5, r6, pc}
 8008610:	0781      	lsls	r1, r0, #30
 8008612:	bf58      	it	pl
 8008614:	6963      	ldrpl	r3, [r4, #20]
 8008616:	60a3      	str	r3, [r4, #8]
 8008618:	e7f4      	b.n	8008604 <__swsetup_r+0xb0>
 800861a:	2000      	movs	r0, #0
 800861c:	e7f7      	b.n	800860e <__swsetup_r+0xba>
 800861e:	bf00      	nop
 8008620:	200005e4 	.word	0x200005e4
 8008624:	0800bba4 	.word	0x0800bba4
 8008628:	0800bbc4 	.word	0x0800bbc4
 800862c:	0800bb84 	.word	0x0800bb84

08008630 <abort>:
 8008630:	b508      	push	{r3, lr}
 8008632:	2006      	movs	r0, #6
 8008634:	f000 fa48 	bl	8008ac8 <raise>
 8008638:	2001      	movs	r0, #1
 800863a:	f7f9 f8b9 	bl	80017b0 <_exit>
	...

08008640 <__sflush_r>:
 8008640:	898a      	ldrh	r2, [r1, #12]
 8008642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008646:	4605      	mov	r5, r0
 8008648:	0710      	lsls	r0, r2, #28
 800864a:	460c      	mov	r4, r1
 800864c:	d458      	bmi.n	8008700 <__sflush_r+0xc0>
 800864e:	684b      	ldr	r3, [r1, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	dc05      	bgt.n	8008660 <__sflush_r+0x20>
 8008654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	dc02      	bgt.n	8008660 <__sflush_r+0x20>
 800865a:	2000      	movs	r0, #0
 800865c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008662:	2e00      	cmp	r6, #0
 8008664:	d0f9      	beq.n	800865a <__sflush_r+0x1a>
 8008666:	2300      	movs	r3, #0
 8008668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800866c:	682f      	ldr	r7, [r5, #0]
 800866e:	602b      	str	r3, [r5, #0]
 8008670:	d032      	beq.n	80086d8 <__sflush_r+0x98>
 8008672:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	075a      	lsls	r2, r3, #29
 8008678:	d505      	bpl.n	8008686 <__sflush_r+0x46>
 800867a:	6863      	ldr	r3, [r4, #4]
 800867c:	1ac0      	subs	r0, r0, r3
 800867e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008680:	b10b      	cbz	r3, 8008686 <__sflush_r+0x46>
 8008682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008684:	1ac0      	subs	r0, r0, r3
 8008686:	2300      	movs	r3, #0
 8008688:	4602      	mov	r2, r0
 800868a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800868c:	6a21      	ldr	r1, [r4, #32]
 800868e:	4628      	mov	r0, r5
 8008690:	47b0      	blx	r6
 8008692:	1c43      	adds	r3, r0, #1
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	d106      	bne.n	80086a6 <__sflush_r+0x66>
 8008698:	6829      	ldr	r1, [r5, #0]
 800869a:	291d      	cmp	r1, #29
 800869c:	d82c      	bhi.n	80086f8 <__sflush_r+0xb8>
 800869e:	4a2a      	ldr	r2, [pc, #168]	; (8008748 <__sflush_r+0x108>)
 80086a0:	40ca      	lsrs	r2, r1
 80086a2:	07d6      	lsls	r6, r2, #31
 80086a4:	d528      	bpl.n	80086f8 <__sflush_r+0xb8>
 80086a6:	2200      	movs	r2, #0
 80086a8:	6062      	str	r2, [r4, #4]
 80086aa:	04d9      	lsls	r1, r3, #19
 80086ac:	6922      	ldr	r2, [r4, #16]
 80086ae:	6022      	str	r2, [r4, #0]
 80086b0:	d504      	bpl.n	80086bc <__sflush_r+0x7c>
 80086b2:	1c42      	adds	r2, r0, #1
 80086b4:	d101      	bne.n	80086ba <__sflush_r+0x7a>
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	b903      	cbnz	r3, 80086bc <__sflush_r+0x7c>
 80086ba:	6560      	str	r0, [r4, #84]	; 0x54
 80086bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086be:	602f      	str	r7, [r5, #0]
 80086c0:	2900      	cmp	r1, #0
 80086c2:	d0ca      	beq.n	800865a <__sflush_r+0x1a>
 80086c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086c8:	4299      	cmp	r1, r3
 80086ca:	d002      	beq.n	80086d2 <__sflush_r+0x92>
 80086cc:	4628      	mov	r0, r5
 80086ce:	f7fd fc45 	bl	8005f5c <_free_r>
 80086d2:	2000      	movs	r0, #0
 80086d4:	6360      	str	r0, [r4, #52]	; 0x34
 80086d6:	e7c1      	b.n	800865c <__sflush_r+0x1c>
 80086d8:	6a21      	ldr	r1, [r4, #32]
 80086da:	2301      	movs	r3, #1
 80086dc:	4628      	mov	r0, r5
 80086de:	47b0      	blx	r6
 80086e0:	1c41      	adds	r1, r0, #1
 80086e2:	d1c7      	bne.n	8008674 <__sflush_r+0x34>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0c4      	beq.n	8008674 <__sflush_r+0x34>
 80086ea:	2b1d      	cmp	r3, #29
 80086ec:	d001      	beq.n	80086f2 <__sflush_r+0xb2>
 80086ee:	2b16      	cmp	r3, #22
 80086f0:	d101      	bne.n	80086f6 <__sflush_r+0xb6>
 80086f2:	602f      	str	r7, [r5, #0]
 80086f4:	e7b1      	b.n	800865a <__sflush_r+0x1a>
 80086f6:	89a3      	ldrh	r3, [r4, #12]
 80086f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086fc:	81a3      	strh	r3, [r4, #12]
 80086fe:	e7ad      	b.n	800865c <__sflush_r+0x1c>
 8008700:	690f      	ldr	r7, [r1, #16]
 8008702:	2f00      	cmp	r7, #0
 8008704:	d0a9      	beq.n	800865a <__sflush_r+0x1a>
 8008706:	0793      	lsls	r3, r2, #30
 8008708:	680e      	ldr	r6, [r1, #0]
 800870a:	bf08      	it	eq
 800870c:	694b      	ldreq	r3, [r1, #20]
 800870e:	600f      	str	r7, [r1, #0]
 8008710:	bf18      	it	ne
 8008712:	2300      	movne	r3, #0
 8008714:	eba6 0807 	sub.w	r8, r6, r7
 8008718:	608b      	str	r3, [r1, #8]
 800871a:	f1b8 0f00 	cmp.w	r8, #0
 800871e:	dd9c      	ble.n	800865a <__sflush_r+0x1a>
 8008720:	6a21      	ldr	r1, [r4, #32]
 8008722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008724:	4643      	mov	r3, r8
 8008726:	463a      	mov	r2, r7
 8008728:	4628      	mov	r0, r5
 800872a:	47b0      	blx	r6
 800872c:	2800      	cmp	r0, #0
 800872e:	dc06      	bgt.n	800873e <__sflush_r+0xfe>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008736:	81a3      	strh	r3, [r4, #12]
 8008738:	f04f 30ff 	mov.w	r0, #4294967295
 800873c:	e78e      	b.n	800865c <__sflush_r+0x1c>
 800873e:	4407      	add	r7, r0
 8008740:	eba8 0800 	sub.w	r8, r8, r0
 8008744:	e7e9      	b.n	800871a <__sflush_r+0xda>
 8008746:	bf00      	nop
 8008748:	20400001 	.word	0x20400001

0800874c <_fflush_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	690b      	ldr	r3, [r1, #16]
 8008750:	4605      	mov	r5, r0
 8008752:	460c      	mov	r4, r1
 8008754:	b913      	cbnz	r3, 800875c <_fflush_r+0x10>
 8008756:	2500      	movs	r5, #0
 8008758:	4628      	mov	r0, r5
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	b118      	cbz	r0, 8008766 <_fflush_r+0x1a>
 800875e:	6983      	ldr	r3, [r0, #24]
 8008760:	b90b      	cbnz	r3, 8008766 <_fflush_r+0x1a>
 8008762:	f000 f887 	bl	8008874 <__sinit>
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <_fflush_r+0x6c>)
 8008768:	429c      	cmp	r4, r3
 800876a:	d11b      	bne.n	80087a4 <_fflush_r+0x58>
 800876c:	686c      	ldr	r4, [r5, #4]
 800876e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0ef      	beq.n	8008756 <_fflush_r+0xa>
 8008776:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008778:	07d0      	lsls	r0, r2, #31
 800877a:	d404      	bmi.n	8008786 <_fflush_r+0x3a>
 800877c:	0599      	lsls	r1, r3, #22
 800877e:	d402      	bmi.n	8008786 <_fflush_r+0x3a>
 8008780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008782:	f7ff fcf8 	bl	8008176 <__retarget_lock_acquire_recursive>
 8008786:	4628      	mov	r0, r5
 8008788:	4621      	mov	r1, r4
 800878a:	f7ff ff59 	bl	8008640 <__sflush_r>
 800878e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008790:	07da      	lsls	r2, r3, #31
 8008792:	4605      	mov	r5, r0
 8008794:	d4e0      	bmi.n	8008758 <_fflush_r+0xc>
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	059b      	lsls	r3, r3, #22
 800879a:	d4dd      	bmi.n	8008758 <_fflush_r+0xc>
 800879c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800879e:	f7ff fceb 	bl	8008178 <__retarget_lock_release_recursive>
 80087a2:	e7d9      	b.n	8008758 <_fflush_r+0xc>
 80087a4:	4b05      	ldr	r3, [pc, #20]	; (80087bc <_fflush_r+0x70>)
 80087a6:	429c      	cmp	r4, r3
 80087a8:	d101      	bne.n	80087ae <_fflush_r+0x62>
 80087aa:	68ac      	ldr	r4, [r5, #8]
 80087ac:	e7df      	b.n	800876e <_fflush_r+0x22>
 80087ae:	4b04      	ldr	r3, [pc, #16]	; (80087c0 <_fflush_r+0x74>)
 80087b0:	429c      	cmp	r4, r3
 80087b2:	bf08      	it	eq
 80087b4:	68ec      	ldreq	r4, [r5, #12]
 80087b6:	e7da      	b.n	800876e <_fflush_r+0x22>
 80087b8:	0800bba4 	.word	0x0800bba4
 80087bc:	0800bbc4 	.word	0x0800bbc4
 80087c0:	0800bb84 	.word	0x0800bb84

080087c4 <std>:
 80087c4:	2300      	movs	r3, #0
 80087c6:	b510      	push	{r4, lr}
 80087c8:	4604      	mov	r4, r0
 80087ca:	e9c0 3300 	strd	r3, r3, [r0]
 80087ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087d2:	6083      	str	r3, [r0, #8]
 80087d4:	8181      	strh	r1, [r0, #12]
 80087d6:	6643      	str	r3, [r0, #100]	; 0x64
 80087d8:	81c2      	strh	r2, [r0, #14]
 80087da:	6183      	str	r3, [r0, #24]
 80087dc:	4619      	mov	r1, r3
 80087de:	2208      	movs	r2, #8
 80087e0:	305c      	adds	r0, #92	; 0x5c
 80087e2:	f7fd fbb3 	bl	8005f4c <memset>
 80087e6:	4b05      	ldr	r3, [pc, #20]	; (80087fc <std+0x38>)
 80087e8:	6263      	str	r3, [r4, #36]	; 0x24
 80087ea:	4b05      	ldr	r3, [pc, #20]	; (8008800 <std+0x3c>)
 80087ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80087ee:	4b05      	ldr	r3, [pc, #20]	; (8008804 <std+0x40>)
 80087f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087f2:	4b05      	ldr	r3, [pc, #20]	; (8008808 <std+0x44>)
 80087f4:	6224      	str	r4, [r4, #32]
 80087f6:	6323      	str	r3, [r4, #48]	; 0x30
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	bf00      	nop
 80087fc:	08008b01 	.word	0x08008b01
 8008800:	08008b23 	.word	0x08008b23
 8008804:	08008b5b 	.word	0x08008b5b
 8008808:	08008b7f 	.word	0x08008b7f

0800880c <_cleanup_r>:
 800880c:	4901      	ldr	r1, [pc, #4]	; (8008814 <_cleanup_r+0x8>)
 800880e:	f000 b8af 	b.w	8008970 <_fwalk_reent>
 8008812:	bf00      	nop
 8008814:	0800874d 	.word	0x0800874d

08008818 <__sfmoreglue>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	1e4a      	subs	r2, r1, #1
 800881c:	2568      	movs	r5, #104	; 0x68
 800881e:	4355      	muls	r5, r2
 8008820:	460e      	mov	r6, r1
 8008822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008826:	f7fd fbe9 	bl	8005ffc <_malloc_r>
 800882a:	4604      	mov	r4, r0
 800882c:	b140      	cbz	r0, 8008840 <__sfmoreglue+0x28>
 800882e:	2100      	movs	r1, #0
 8008830:	e9c0 1600 	strd	r1, r6, [r0]
 8008834:	300c      	adds	r0, #12
 8008836:	60a0      	str	r0, [r4, #8]
 8008838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800883c:	f7fd fb86 	bl	8005f4c <memset>
 8008840:	4620      	mov	r0, r4
 8008842:	bd70      	pop	{r4, r5, r6, pc}

08008844 <__sfp_lock_acquire>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__sfp_lock_acquire+0x8>)
 8008846:	f7ff bc96 	b.w	8008176 <__retarget_lock_acquire_recursive>
 800884a:	bf00      	nop
 800884c:	200009f8 	.word	0x200009f8

08008850 <__sfp_lock_release>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__sfp_lock_release+0x8>)
 8008852:	f7ff bc91 	b.w	8008178 <__retarget_lock_release_recursive>
 8008856:	bf00      	nop
 8008858:	200009f8 	.word	0x200009f8

0800885c <__sinit_lock_acquire>:
 800885c:	4801      	ldr	r0, [pc, #4]	; (8008864 <__sinit_lock_acquire+0x8>)
 800885e:	f7ff bc8a 	b.w	8008176 <__retarget_lock_acquire_recursive>
 8008862:	bf00      	nop
 8008864:	200009f3 	.word	0x200009f3

08008868 <__sinit_lock_release>:
 8008868:	4801      	ldr	r0, [pc, #4]	; (8008870 <__sinit_lock_release+0x8>)
 800886a:	f7ff bc85 	b.w	8008178 <__retarget_lock_release_recursive>
 800886e:	bf00      	nop
 8008870:	200009f3 	.word	0x200009f3

08008874 <__sinit>:
 8008874:	b510      	push	{r4, lr}
 8008876:	4604      	mov	r4, r0
 8008878:	f7ff fff0 	bl	800885c <__sinit_lock_acquire>
 800887c:	69a3      	ldr	r3, [r4, #24]
 800887e:	b11b      	cbz	r3, 8008888 <__sinit+0x14>
 8008880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008884:	f7ff bff0 	b.w	8008868 <__sinit_lock_release>
 8008888:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800888c:	6523      	str	r3, [r4, #80]	; 0x50
 800888e:	4b13      	ldr	r3, [pc, #76]	; (80088dc <__sinit+0x68>)
 8008890:	4a13      	ldr	r2, [pc, #76]	; (80088e0 <__sinit+0x6c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	62a2      	str	r2, [r4, #40]	; 0x28
 8008896:	42a3      	cmp	r3, r4
 8008898:	bf04      	itt	eq
 800889a:	2301      	moveq	r3, #1
 800889c:	61a3      	streq	r3, [r4, #24]
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 f820 	bl	80088e4 <__sfp>
 80088a4:	6060      	str	r0, [r4, #4]
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 f81c 	bl	80088e4 <__sfp>
 80088ac:	60a0      	str	r0, [r4, #8]
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 f818 	bl	80088e4 <__sfp>
 80088b4:	2200      	movs	r2, #0
 80088b6:	60e0      	str	r0, [r4, #12]
 80088b8:	2104      	movs	r1, #4
 80088ba:	6860      	ldr	r0, [r4, #4]
 80088bc:	f7ff ff82 	bl	80087c4 <std>
 80088c0:	68a0      	ldr	r0, [r4, #8]
 80088c2:	2201      	movs	r2, #1
 80088c4:	2109      	movs	r1, #9
 80088c6:	f7ff ff7d 	bl	80087c4 <std>
 80088ca:	68e0      	ldr	r0, [r4, #12]
 80088cc:	2202      	movs	r2, #2
 80088ce:	2112      	movs	r1, #18
 80088d0:	f7ff ff78 	bl	80087c4 <std>
 80088d4:	2301      	movs	r3, #1
 80088d6:	61a3      	str	r3, [r4, #24]
 80088d8:	e7d2      	b.n	8008880 <__sinit+0xc>
 80088da:	bf00      	nop
 80088dc:	0800b804 	.word	0x0800b804
 80088e0:	0800880d 	.word	0x0800880d

080088e4 <__sfp>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	4607      	mov	r7, r0
 80088e8:	f7ff ffac 	bl	8008844 <__sfp_lock_acquire>
 80088ec:	4b1e      	ldr	r3, [pc, #120]	; (8008968 <__sfp+0x84>)
 80088ee:	681e      	ldr	r6, [r3, #0]
 80088f0:	69b3      	ldr	r3, [r6, #24]
 80088f2:	b913      	cbnz	r3, 80088fa <__sfp+0x16>
 80088f4:	4630      	mov	r0, r6
 80088f6:	f7ff ffbd 	bl	8008874 <__sinit>
 80088fa:	3648      	adds	r6, #72	; 0x48
 80088fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008900:	3b01      	subs	r3, #1
 8008902:	d503      	bpl.n	800890c <__sfp+0x28>
 8008904:	6833      	ldr	r3, [r6, #0]
 8008906:	b30b      	cbz	r3, 800894c <__sfp+0x68>
 8008908:	6836      	ldr	r6, [r6, #0]
 800890a:	e7f7      	b.n	80088fc <__sfp+0x18>
 800890c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008910:	b9d5      	cbnz	r5, 8008948 <__sfp+0x64>
 8008912:	4b16      	ldr	r3, [pc, #88]	; (800896c <__sfp+0x88>)
 8008914:	60e3      	str	r3, [r4, #12]
 8008916:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800891a:	6665      	str	r5, [r4, #100]	; 0x64
 800891c:	f7ff fc2a 	bl	8008174 <__retarget_lock_init_recursive>
 8008920:	f7ff ff96 	bl	8008850 <__sfp_lock_release>
 8008924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800892c:	6025      	str	r5, [r4, #0]
 800892e:	61a5      	str	r5, [r4, #24]
 8008930:	2208      	movs	r2, #8
 8008932:	4629      	mov	r1, r5
 8008934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008938:	f7fd fb08 	bl	8005f4c <memset>
 800893c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008944:	4620      	mov	r0, r4
 8008946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008948:	3468      	adds	r4, #104	; 0x68
 800894a:	e7d9      	b.n	8008900 <__sfp+0x1c>
 800894c:	2104      	movs	r1, #4
 800894e:	4638      	mov	r0, r7
 8008950:	f7ff ff62 	bl	8008818 <__sfmoreglue>
 8008954:	4604      	mov	r4, r0
 8008956:	6030      	str	r0, [r6, #0]
 8008958:	2800      	cmp	r0, #0
 800895a:	d1d5      	bne.n	8008908 <__sfp+0x24>
 800895c:	f7ff ff78 	bl	8008850 <__sfp_lock_release>
 8008960:	230c      	movs	r3, #12
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	e7ee      	b.n	8008944 <__sfp+0x60>
 8008966:	bf00      	nop
 8008968:	0800b804 	.word	0x0800b804
 800896c:	ffff0001 	.word	0xffff0001

08008970 <_fwalk_reent>:
 8008970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008974:	4606      	mov	r6, r0
 8008976:	4688      	mov	r8, r1
 8008978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800897c:	2700      	movs	r7, #0
 800897e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008982:	f1b9 0901 	subs.w	r9, r9, #1
 8008986:	d505      	bpl.n	8008994 <_fwalk_reent+0x24>
 8008988:	6824      	ldr	r4, [r4, #0]
 800898a:	2c00      	cmp	r4, #0
 800898c:	d1f7      	bne.n	800897e <_fwalk_reent+0xe>
 800898e:	4638      	mov	r0, r7
 8008990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008994:	89ab      	ldrh	r3, [r5, #12]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d907      	bls.n	80089aa <_fwalk_reent+0x3a>
 800899a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800899e:	3301      	adds	r3, #1
 80089a0:	d003      	beq.n	80089aa <_fwalk_reent+0x3a>
 80089a2:	4629      	mov	r1, r5
 80089a4:	4630      	mov	r0, r6
 80089a6:	47c0      	blx	r8
 80089a8:	4307      	orrs	r7, r0
 80089aa:	3568      	adds	r5, #104	; 0x68
 80089ac:	e7e9      	b.n	8008982 <_fwalk_reent+0x12>

080089ae <__swhatbuf_r>:
 80089ae:	b570      	push	{r4, r5, r6, lr}
 80089b0:	460e      	mov	r6, r1
 80089b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b6:	2900      	cmp	r1, #0
 80089b8:	b096      	sub	sp, #88	; 0x58
 80089ba:	4614      	mov	r4, r2
 80089bc:	461d      	mov	r5, r3
 80089be:	da07      	bge.n	80089d0 <__swhatbuf_r+0x22>
 80089c0:	2300      	movs	r3, #0
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	89b3      	ldrh	r3, [r6, #12]
 80089c6:	061a      	lsls	r2, r3, #24
 80089c8:	d410      	bmi.n	80089ec <__swhatbuf_r+0x3e>
 80089ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ce:	e00e      	b.n	80089ee <__swhatbuf_r+0x40>
 80089d0:	466a      	mov	r2, sp
 80089d2:	f000 f8fb 	bl	8008bcc <_fstat_r>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	dbf2      	blt.n	80089c0 <__swhatbuf_r+0x12>
 80089da:	9a01      	ldr	r2, [sp, #4]
 80089dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089e4:	425a      	negs	r2, r3
 80089e6:	415a      	adcs	r2, r3
 80089e8:	602a      	str	r2, [r5, #0]
 80089ea:	e7ee      	b.n	80089ca <__swhatbuf_r+0x1c>
 80089ec:	2340      	movs	r3, #64	; 0x40
 80089ee:	2000      	movs	r0, #0
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	b016      	add	sp, #88	; 0x58
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080089f8 <__smakebuf_r>:
 80089f8:	898b      	ldrh	r3, [r1, #12]
 80089fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089fc:	079d      	lsls	r5, r3, #30
 80089fe:	4606      	mov	r6, r0
 8008a00:	460c      	mov	r4, r1
 8008a02:	d507      	bpl.n	8008a14 <__smakebuf_r+0x1c>
 8008a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	6123      	str	r3, [r4, #16]
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	6163      	str	r3, [r4, #20]
 8008a10:	b002      	add	sp, #8
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	ab01      	add	r3, sp, #4
 8008a16:	466a      	mov	r2, sp
 8008a18:	f7ff ffc9 	bl	80089ae <__swhatbuf_r>
 8008a1c:	9900      	ldr	r1, [sp, #0]
 8008a1e:	4605      	mov	r5, r0
 8008a20:	4630      	mov	r0, r6
 8008a22:	f7fd faeb 	bl	8005ffc <_malloc_r>
 8008a26:	b948      	cbnz	r0, 8008a3c <__smakebuf_r+0x44>
 8008a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2c:	059a      	lsls	r2, r3, #22
 8008a2e:	d4ef      	bmi.n	8008a10 <__smakebuf_r+0x18>
 8008a30:	f023 0303 	bic.w	r3, r3, #3
 8008a34:	f043 0302 	orr.w	r3, r3, #2
 8008a38:	81a3      	strh	r3, [r4, #12]
 8008a3a:	e7e3      	b.n	8008a04 <__smakebuf_r+0xc>
 8008a3c:	4b0d      	ldr	r3, [pc, #52]	; (8008a74 <__smakebuf_r+0x7c>)
 8008a3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	6020      	str	r0, [r4, #0]
 8008a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a48:	81a3      	strh	r3, [r4, #12]
 8008a4a:	9b00      	ldr	r3, [sp, #0]
 8008a4c:	6163      	str	r3, [r4, #20]
 8008a4e:	9b01      	ldr	r3, [sp, #4]
 8008a50:	6120      	str	r0, [r4, #16]
 8008a52:	b15b      	cbz	r3, 8008a6c <__smakebuf_r+0x74>
 8008a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f000 f8c9 	bl	8008bf0 <_isatty_r>
 8008a5e:	b128      	cbz	r0, 8008a6c <__smakebuf_r+0x74>
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	f023 0303 	bic.w	r3, r3, #3
 8008a66:	f043 0301 	orr.w	r3, r3, #1
 8008a6a:	81a3      	strh	r3, [r4, #12]
 8008a6c:	89a0      	ldrh	r0, [r4, #12]
 8008a6e:	4305      	orrs	r5, r0
 8008a70:	81a5      	strh	r5, [r4, #12]
 8008a72:	e7cd      	b.n	8008a10 <__smakebuf_r+0x18>
 8008a74:	0800880d 	.word	0x0800880d

08008a78 <_raise_r>:
 8008a78:	291f      	cmp	r1, #31
 8008a7a:	b538      	push	{r3, r4, r5, lr}
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	460d      	mov	r5, r1
 8008a80:	d904      	bls.n	8008a8c <_raise_r+0x14>
 8008a82:	2316      	movs	r3, #22
 8008a84:	6003      	str	r3, [r0, #0]
 8008a86:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a8e:	b112      	cbz	r2, 8008a96 <_raise_r+0x1e>
 8008a90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a94:	b94b      	cbnz	r3, 8008aaa <_raise_r+0x32>
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 f830 	bl	8008afc <_getpid_r>
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aa6:	f000 b817 	b.w	8008ad8 <_kill_r>
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d00a      	beq.n	8008ac4 <_raise_r+0x4c>
 8008aae:	1c59      	adds	r1, r3, #1
 8008ab0:	d103      	bne.n	8008aba <_raise_r+0x42>
 8008ab2:	2316      	movs	r3, #22
 8008ab4:	6003      	str	r3, [r0, #0]
 8008ab6:	2001      	movs	r0, #1
 8008ab8:	e7e7      	b.n	8008a8a <_raise_r+0x12>
 8008aba:	2400      	movs	r4, #0
 8008abc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	4798      	blx	r3
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	e7e0      	b.n	8008a8a <_raise_r+0x12>

08008ac8 <raise>:
 8008ac8:	4b02      	ldr	r3, [pc, #8]	; (8008ad4 <raise+0xc>)
 8008aca:	4601      	mov	r1, r0
 8008acc:	6818      	ldr	r0, [r3, #0]
 8008ace:	f7ff bfd3 	b.w	8008a78 <_raise_r>
 8008ad2:	bf00      	nop
 8008ad4:	200005e4 	.word	0x200005e4

08008ad8 <_kill_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4d07      	ldr	r5, [pc, #28]	; (8008af8 <_kill_r+0x20>)
 8008adc:	2300      	movs	r3, #0
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	602b      	str	r3, [r5, #0]
 8008ae6:	f7f8 fe53 	bl	8001790 <_kill>
 8008aea:	1c43      	adds	r3, r0, #1
 8008aec:	d102      	bne.n	8008af4 <_kill_r+0x1c>
 8008aee:	682b      	ldr	r3, [r5, #0]
 8008af0:	b103      	cbz	r3, 8008af4 <_kill_r+0x1c>
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	bd38      	pop	{r3, r4, r5, pc}
 8008af6:	bf00      	nop
 8008af8:	200009ec 	.word	0x200009ec

08008afc <_getpid_r>:
 8008afc:	f7f8 be40 	b.w	8001780 <_getpid>

08008b00 <__sread>:
 8008b00:	b510      	push	{r4, lr}
 8008b02:	460c      	mov	r4, r1
 8008b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b08:	f000 f894 	bl	8008c34 <_read_r>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	bfab      	itete	ge
 8008b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b12:	89a3      	ldrhlt	r3, [r4, #12]
 8008b14:	181b      	addge	r3, r3, r0
 8008b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b1a:	bfac      	ite	ge
 8008b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b1e:	81a3      	strhlt	r3, [r4, #12]
 8008b20:	bd10      	pop	{r4, pc}

08008b22 <__swrite>:
 8008b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b26:	461f      	mov	r7, r3
 8008b28:	898b      	ldrh	r3, [r1, #12]
 8008b2a:	05db      	lsls	r3, r3, #23
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	460c      	mov	r4, r1
 8008b30:	4616      	mov	r6, r2
 8008b32:	d505      	bpl.n	8008b40 <__swrite+0x1e>
 8008b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b38:	2302      	movs	r3, #2
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f000 f868 	bl	8008c10 <_lseek_r>
 8008b40:	89a3      	ldrh	r3, [r4, #12]
 8008b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	463b      	mov	r3, r7
 8008b50:	4628      	mov	r0, r5
 8008b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b56:	f000 b817 	b.w	8008b88 <_write_r>

08008b5a <__sseek>:
 8008b5a:	b510      	push	{r4, lr}
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b62:	f000 f855 	bl	8008c10 <_lseek_r>
 8008b66:	1c43      	adds	r3, r0, #1
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	bf15      	itete	ne
 8008b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b76:	81a3      	strheq	r3, [r4, #12]
 8008b78:	bf18      	it	ne
 8008b7a:	81a3      	strhne	r3, [r4, #12]
 8008b7c:	bd10      	pop	{r4, pc}

08008b7e <__sclose>:
 8008b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b82:	f000 b813 	b.w	8008bac <_close_r>
	...

08008b88 <_write_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4d07      	ldr	r5, [pc, #28]	; (8008ba8 <_write_r+0x20>)
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4611      	mov	r1, r2
 8008b92:	2200      	movs	r2, #0
 8008b94:	602a      	str	r2, [r5, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f7f8 fe31 	bl	80017fe <_write>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_write_r+0x1e>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_write_r+0x1e>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	200009ec 	.word	0x200009ec

08008bac <_close_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d06      	ldr	r5, [pc, #24]	; (8008bc8 <_close_r+0x1c>)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	f7f8 fe3d 	bl	8001836 <_close>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_close_r+0x1a>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_close_r+0x1a>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	200009ec 	.word	0x200009ec

08008bcc <_fstat_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4d07      	ldr	r5, [pc, #28]	; (8008bec <_fstat_r+0x20>)
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	f7f8 fe38 	bl	800184e <_fstat>
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	d102      	bne.n	8008be8 <_fstat_r+0x1c>
 8008be2:	682b      	ldr	r3, [r5, #0]
 8008be4:	b103      	cbz	r3, 8008be8 <_fstat_r+0x1c>
 8008be6:	6023      	str	r3, [r4, #0]
 8008be8:	bd38      	pop	{r3, r4, r5, pc}
 8008bea:	bf00      	nop
 8008bec:	200009ec 	.word	0x200009ec

08008bf0 <_isatty_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d06      	ldr	r5, [pc, #24]	; (8008c0c <_isatty_r+0x1c>)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	f7f8 fe37 	bl	800186e <_isatty>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d102      	bne.n	8008c0a <_isatty_r+0x1a>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	b103      	cbz	r3, 8008c0a <_isatty_r+0x1a>
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	200009ec 	.word	0x200009ec

08008c10 <_lseek_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4d07      	ldr	r5, [pc, #28]	; (8008c30 <_lseek_r+0x20>)
 8008c14:	4604      	mov	r4, r0
 8008c16:	4608      	mov	r0, r1
 8008c18:	4611      	mov	r1, r2
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	602a      	str	r2, [r5, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f7f8 fe30 	bl	8001884 <_lseek>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_lseek_r+0x1e>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_lseek_r+0x1e>
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	200009ec 	.word	0x200009ec

08008c34 <_read_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4d07      	ldr	r5, [pc, #28]	; (8008c54 <_read_r+0x20>)
 8008c38:	4604      	mov	r4, r0
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	602a      	str	r2, [r5, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f7f8 fdbe 	bl	80017c4 <_read>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_read_r+0x1e>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_read_r+0x1e>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	200009ec 	.word	0x200009ec

08008c58 <_init>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr

08008c64 <_fini>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	bf00      	nop
 8008c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6a:	bc08      	pop	{r3}
 8008c6c:	469e      	mov	lr, r3
 8008c6e:	4770      	bx	lr
